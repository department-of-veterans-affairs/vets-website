// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@import "global";

//
// @variables
//
$include-html-button-classes: $include-html-classes !default;

// We use these to build padding for buttons.
$button-tny: rem-calc(10) !default;
$button-sml: rem-calc(14) !default;
$button-med: rem-calc(16) !default;
$button-lrg: rem-calc(18) !default;

// We use this to control the display property.
$button-display: inline-block !default;
$button-margin-bottom: rem-calc(20) !default;

// We use these to control button text styles.
$button-font-family: $body-font-family !default;
$button-font-colour: $white !default;
$button-font-colour-alt: $oil !default;
$button-font-tny: rem-calc(11) !default;
$button-font-sml: rem-calc(13) !default;
$button-font-med: rem-calc(16) !default;
$button-font-lrg: rem-calc(20) !default;
$button-font-weight: $font-weight-normal !default;
$button-font-align: center !default;

// We use these to control various hover effects.
$button-function-factor: -20% !default;

// We use these to control button border styles.
$button-border-width: 0 !default;
$button-border-style: solid !default;
$button-bg-colour: $primary-colour !default;
$button-bg-hover: scale-colour($button-bg-colour, $lightness: $button-function-factor) !default;
$button-border-colour: $button-bg-hover !default;
$secondary-button-bg-hover: scale-colour($secondary-colour, $lightness: $button-function-factor) !default;
$secondary-button-border-colour: $secondary-button-bg-hover !default;
$success-button-bg-hover: scale-colour($success-colour, $lightness: $button-function-factor) !default;
$success-button-border-colour: $success-button-bg-hover !default;
$alert-button-bg-hover: scale-colour($alert-colour, $lightness: $button-function-factor) !default;
$alert-button-border-colour: $alert-button-bg-hover !default;
$warning-button-bg-hover: scale-colour($warning-colour, $lightness: $button-function-factor) !default;
$warning-button-border-colour: $warning-button-bg-hover !default;
$info-button-bg-hover: scale-colour($info-colour, $lightness: $button-function-factor) !default;
$info-button-border-colour: $info-button-bg-hover !default;

// We use this to set the default radius used throughout the core.
$button-radius: $global-radius !default;
$button-round: $global-rounded !default;

// We use this to set default opacity and cursor for disabled buttons.
$button-disabled-opacity: 0.7 !default;
$button-disabled-cursor: $cursor-default-value !default;


//
// @MIXIN
//
// We use this mixin to create a default button base.
//
// $style - Sets base styles. Can be set to false. Default: true.
// $display - Used to control display property. Default: $button-display || inline-block

@mixin button-base($style:true, $display:$button-display) {
  @if $style {
    border-style: $button-border-style;
    border-width: $button-border-width;
    cursor: $cursor-pointer-value;
    font-family: $button-font-family;
    font-weight: $button-font-weight;
    line-height: normal;
    margin: 0 0 $button-margin-bottom;
    position: relative;
    text-decoration: none;
    text-align: $button-font-align;
    -webkit-appearance: none;
    border-radius:0;
  }
  @if $display { display: $display; }
}

// @MIXIN
//
// We use this mixin to add button size styles
//
// $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// $full-width - We can set $full-width:true to remove side padding extend width - Default: false

@mixin button-size($padding:$button-med, $full-width:false) {

  // We control which padding styles come through,
  // these can be turned off by setting $padding:false
  @if $padding {
    padding-top: $padding;
    padding-#{$opposite-direction}: $padding * 2;
    padding-bottom: $padding + rem-calc(1);
    padding-#{$default-float}: $padding * 2;

    // We control the font-size based on mixin input.
    @if      $padding == $button-med { font-size: $button-font-med; }
    @else if $padding == $button-tny { font-size: $button-font-tny; }
    @else if $padding == $button-sml { font-size: $button-font-sml; }
    @else if $padding == $button-lrg { font-size: $button-font-lrg; }
  }

  // We can set $full-width:true to remove side padding extend width.
  @if $full-width {
    // We still need to check if $padding is set.
    @if $padding {
    padding-top: $padding;
    padding-bottom: $padding + rem-calc(1);
    } @else if $padding == false {
      padding-top:0;
      padding-bottom:0;
    }
    padding-right: 0;
    padding-left: 0;
    width: 100%;
  }
}

// @MIXIN
//
// we use this mixin to create the button hover and border colours

// @MIXIN
//
// We use this mixin to add button colour styles
//
// $bg - Background colour. We can set $bg:false for a transparent background. Default: $primary-colour.
// $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default: true
// $disabled - We can set $disabled:true to create a disabled transparent button. Default: false
// $bg-hover - Button Hover Background Color. Default: $button-bg-hover
// $border-colour - Button Border Color. Default: $button-border-colour
@mixin button-style($bg:$button-bg-colour, $radius:false, $disabled:false, $bg-hover:null, $border-colour:null) {

  // We control which background styles are used,
  // these can be removed by setting $bg:false
  @if $bg {

    @if $bg-hover == null {
      $bg-hover: if($bg == $button-bg-colour, $button-bg-hover, scale-colour($bg, $lightness: $button-function-factor));
    }

    @if $border-colour == null {
      $border-colour: if($bg == $button-bg-colour, $button-border-colour, scale-colour($bg, $lightness: $button-function-factor));
    }

    // This find the lightness percentage of the background colour.
    $bg-lightness: lightness($bg);
    $bg-hover-lightness: lightness($bg-hover);

    background-colour: $bg;
    border-colour: $border-colour;
    &:hover,
    &:focus { background-colour: $bg-hover; }

    // We control the text colour for you based on the background colour.
    colour: if($bg-lightness > 70%, $button-font-colour-alt, $button-font-colour);

    &:hover,
    &:focus {
      colour: if($bg-hover-lightness > 70%, $button-font-colour-alt, $button-font-colour);
    }
  }

  // We can set $disabled:true to create a disabled transparent button.
  @if $disabled {
    cursor: $button-disabled-cursor;
    opacity: $button-disabled-opacity;
    box-shadow: none;
    &:hover,
    &:focus { background-colour: $bg; }
  }

  // We can control how much button radius is used.
  @if $radius == true { @include radius($button-radius); }
  @else if $radius { @include radius($radius); }

}

// @MIXIN
//
// We use this to quickly create buttons with a single mixin. As @jaredhardy puts it, "the kitchen sink mixin"
//
// $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// $bg - Primary colour set in settings file. Default: $button-bg.
// $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default:false.
// $full-width - We can set $full-width:true to remove side padding extend width. Default:false.
// $disabled - We can set $disabled:true to create a disabled transparent button. Default:false.
// $is-prefix - Not used? Default:false.
// $bg-hover - Button Hover Color - Default null - see button-style mixin
// $border-colour - Button Border Color - Default null - see button-style mixin
// $transition - We can control whether or not to include the background-colour transition property - Default:true.
@mixin button($padding:$button-med, $bg:$button-bg-colour, $radius:false, $full-width:false, $disabled:false, $is-prefix:false, $bg-hover:null, $border-colour:null, $transition: true) {
  @include button-base;
  @include button-size($padding, $full-width);
  @include button-style($bg, $radius, $disabled, $bg-hover, $border-colour);

  @if $transition {
    @include single-transition(background-colour);
  }
}


@include exports("button") {
  @if $include-html-button-classes {

    // Default styles applied outside of media query
    button, .button {
      @include button-base;
      @include button-size;
      @include button-style;

      @include single-transition(background-colour);

      &.secondary { @include button-style($bg:$secondary-colour, $bg-hover:$secondary-button-bg-hover, $border-colour:$secondary-button-border-colour); }
      &.success   { @include button-style($bg:$success-colour, $bg-hover:$success-button-bg-hover, $border-colour:$success-button-border-colour); }
      &.alert     { @include button-style($bg:$alert-colour, $bg-hover:$alert-button-bg-hover, $border-colour:$alert-button-border-colour); }
      &.warning   { @include button-style($bg:$warning-colour, $bg-hover:$warning-button-bg-hover, $border-colour:$warning-button-border-colour); }
      &.info      { @include button-style($bg:$info-colour, $bg-hover:$info-button-bg-hover, $border-colour:$info-button-border-colour); }

      &.large  { @include button-size($padding:$button-lrg); }
      &.small  { @include button-size($padding:$button-sml); }
      &.tiny   { @include button-size($padding:$button-tny); }
      &.expand { @include button-size($padding:null,$full-width:true); }

      &.left-align  { text-align: left; text-indent: rem-calc(12); }
      &.right-align { text-align: right; padding-right: rem-calc(12); }

      &.radius { @include button-style($bg:false, $radius:true); }
      &.round  { @include button-style($bg:false, $radius:$button-round); }

      &.disabled, &[disabled] { @include button-style($bg:$button-bg-colour, $disabled:true, $bg-hover:$button-bg-hover, $border-colour:$button-border-colour);
        &.secondary { @include button-style($bg:$secondary-colour, $disabled:true, $bg-hover:$secondary-button-bg-hover, $border-colour:$secondary-button-border-colour); }
        &.success { @include button-style($bg:$success-colour, $disabled:true, $bg-hover:$success-button-bg-hover, $border-colour:$success-button-border-colour); }
        &.alert { @include button-style($bg:$alert-colour, $disabled:true, $bg-hover:$alert-button-bg-hover, $border-colour:$alert-button-border-colour); }
        &.warning { @include button-style($bg:$warning-colour, $disabled:true, $bg-hover:$warning-button-bg-hover, $border-colour:$warning-button-border-colour); }
        &.info { @include button-style($bg:$info-colour, $disabled:true, $bg-hover:$info-button-bg-hover, $border-colour:$info-button-border-colour); }
      }
    }

    //firefox 2px fix
    button::-moz-focus-inner {border:0; padding:0;}

    @media #{$medium-up} {
      button, .button {
        @include button-base($style:false, $display:inline-block);
        @include button-size($padding:false, $full-width:false);
      }
    }
  }
}
