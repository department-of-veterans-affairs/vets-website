name: Unit Tests Stress Test

on:
  schedule:
    - cron: '0 02 * * 1-5' # 10pm EST/2am UTC, weekdays

jobs:
  fetch-unit-tests-allow-list:
    name: Fetch Unit Tests Allow List
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get va-vsp-bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Init Dashboard Data Repo
        # uses: department-of-veterans-affairs/platform-release-tools-actions/init-data-repo@main
        uses: ./.github/workflows/init-data-repo

      - name: Set Up BigQuery Creds
        uses: ./.github/workflows/configure-bigquery

      - name: Fetch Unit Test allow list
        run: yarn get-allow-list
        working-directory: qa-standards-dashboard-data
        env:
          TEST_TYPE: unit_test

      - name: Archive allow list
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-allow-list
          path: qa-standards-dashboard-data/unit_test_allow_list.json

  unit-tests-stress-test:
    name: Unit Tests
    runs-on: self-hosted
    outputs:
      app_folders: ${{ steps.get-changed-apps.outputs.folders }}

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        runs:
          [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
          ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/workflows/install
        timeout-minutes: 30
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Get changed applications
        id: get-changed-apps
        uses: ./.github/workflows/get-changed-apps
        with:
          delimiter: ','
          output-type: 'folder'

      - name: Download Allow List
        uses: actions/download-artifact@v3
        with:
          name: unit-test-allow-list
          path: .

      - name: Run unit tests
        run: yarn test:unit ${APP_FOLDERS:+"{script,$APP_FOLDERS}/**/*.unit.spec.js?(x)"} --coverage
        env:
          MOCHA_FILE: test-results/unit-tests.xml
          APP_FOLDERS: ${{ steps.get-changed-apps.outputs.folders }}
          IS_STRESS_TEST: true
          STEP: ${{ matrix.runs }}

      - name: Archive unit test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-report
          path: mocha/results

      # - name: Generate coverage report by app
      #   run: node script/app-coverage-report.js > test-results/coverage_report.txt
      # - name: Upload Coverage Report Artifact
      #   uses: actions/upload-artifact@v3
      #   if: ${{ always() }}
      #   with:
      #     name: unit-test-coverage-report
      #     path: coverage/test-coverage-report.json
      # - name: Configure AWS credentials (1)
      #   if: ${{ github.ref == 'refs/heads/main' }}
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-gov-west-1
      # - name: Get AWS IAM role
      #   if: ${{ github.ref == 'refs/heads/main' }}
      #   uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
      #   with:
      #     ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
      #     env_variable_name: AWS_FRONTEND_NONPROD_ROLE
      # - name: Configure AWS Credentials (2)
      #   if: ${{ github.ref == 'refs/heads/main' }}
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-gov-west-1
      #     role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
      #     role-duration-seconds: 900
      #     role-session-name: vsp-frontendteam-githubaction
      # - name: Upload coverage report to S3
      #   if: ${{ github.ref == 'refs/heads/main' && steps.get-changed-apps.outputs.folders == '' }}
      #   run: aws s3 cp coverage/test-coverage-report.json s3://vetsgov-website-builds-s3-upload-test/coverage/test-coverage-report.json --acl public-read --region us-gov-west-1
      # - name: Get code coverage
      #   if: ${{ always() }}
      #   id: code-coverage
      #   run: echo MARKDOWN=$(node ./script/github-actions/code-coverage-format-report.js) >> $GITHUB_OUTPUT
      # - name: Publish test results
      #   if: ${{ always() }}
      #   continue-on-error: true
      #   uses: mikepenz/action-junit-report@v2.8.4
      #   with:
      #     check_name: 'Unit Tests Summary'
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     report_paths: 'test-results/unit-tests.xml'
      #     summary: ${{ steps.code-coverage.outputs.MARKDOWN }}
      #     fail_on_failure: 'true'

  update-unit-test-allow-list:
    name: Update Unit Tests Allow List
    runs-on: ubuntu-latest
    needs: [unit-tests-stress-test, fetch-unit-tests-allow-list]
    if: ${{ always() && (needs.unit-tests-stress-test.result == 'success' || needs.unit-tests-stress-test.result == 'failure') }}
    continue-on-error: true
    env:
      APPLICATION_LIST: ${{ needs.testing-reports-prep.outputs.app_list }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get va-vsp-bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Init Dashboard Data Repo
        # uses: department-of-veterans-affairs/platform-release-tools-actions/init-data-repo@main
        uses: ./.github/workflows/init-data-repo

      - name: Set Up BigQuery Creds
        uses: ./.github/workflows/configure-bigquery
      - name: Get AWS IAM role
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Set UUID for Mochawesome reports
        run: echo "UUID=$(uuidgen)" >> $GITHUB_ENV

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Download Unit Test results
        uses: actions/download-artifact@v3
        with:
          name: unit-test-report
          path: qa-standards-dashboard-data/src/allow-list/data

      - name: Download Allow List
        uses: actions/download-artifact@v3
        with:
          name: unit-test-allow-list
          path: qa-standards-dashboard-data

      - name: Copy test results to mochawesome directory
        run: cp -R qa-standards-dashboard-data/src/allow-list/data qa-standards-dashboard-data/src/testing-reports/data

      - name: Update Unit Test Allow List
        run: yarn update-allow-list
        working-directory: qa-standards-dashboard-data
        env:
          TEST_TYPE: unit_test
          IS_CI: false
          GITHUB_WORKFLOW_URL: ${{ github.server_url}}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      # - name: Create Unit Test report and post results to BigQuery
      #   run: yarn cypress-mochawesome-to-bigquery
      #   working-directory: qa-standards-dashboard-data
      #   env:
      #     IS_MASTER_BUILD: false
      #     TEST_EXECUTIONS_TABLE_NAME: cypress_test_suite_executions
      #     TEST_RESULTS_TABLE_NAME: cypress_test_results
      #     TEST_REPORTS_FOLDER_NAME: vets-website-cypress-stress-test-reports
      #     TEST_RETRIES_TABLE_NAME: cypress_retry_records
      #     NUM_CONTAINERS: ${{ needs.cypress-tests-prep.outputs.num_containers }}
      #     IS_STRESS_TEST: true

      # - name: Upload Unit Test report to s3
      #   run: aws s3 cp qa-standards-dashboard-data/mochawesome-report s3://testing-tools-testing-reports/vets-website-cypress-stress-test-reports --acl public-read --region us-gov-west-1 --recursive

      # - name: Publish Unit Test Results
      #   if: ${{ always() }}
      #   uses: LouisBrunner/checks-action@v1.2.0
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     name: Unit Test Stress Test Summary
      #     conclusion: ${{ needs.stress-test-cypress-tests.result }}
      #     output: |
      #       {"summary":${{ env.MOCHAWESOME_REPORT_RESULTS }}}
