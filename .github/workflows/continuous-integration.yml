name: Continuous Integration

on: [push]

env:
  CHROMEDRIVER_FILEPATH: /usr/local/share/chrome_driver/chromedriver

jobs:
  build:
    name: Build
    runs-on: self-hosted

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    strategy:
      fail-fast: true
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Build
        run: yarn build --verbose --buildtype=${{ matrix.buildtype }}
        timeout-minutes: 30

      - name: Generate build details
        run: |
          cat > build/${{ matrix.buildtype }}/BUILD.txt << EOF
          BUILDTYPE=${{ matrix.buildtype }}
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          RUN_ID=${{ github.run_id }}
          REF=${{ github.sha }}
          BUILDTIME=$(date +%s)
          EOF

      - name: Compress and archive build
        run: tar -C build/${{ matrix.buildtype }} -cjf ${{ matrix.buildtype }}.tar.bz2 .

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.buildtype }}.tar.bz2
          path: ${{ matrix.buildtype }}.tar.bz2
          retention-days: 1

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Run unit tests
        run: yarn test:unit --coverage
        env:
          MOCHA_FILE: test-results/unit-tests.xml

      - name: Generate coverage report by app
        run: node script/app-coverage-report.js > test-results/coverage_report.txt

      - name: Get code coverage
        id: code-coverage
        run: echo ::set-output name=MARKDOWN::$(node ./script/github-actions/code-coverage-format-report.js)

      - name: Publish test results
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v2.4.0
        with:
          check_name: 'Unit Tests Summary'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test-results/unit-tests.xml'
          summary: ${{ steps.code-coverage.outputs.MARKDOWN }}

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-gov-west-1"

      - name: Get Pact Broker password
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /dsva-vagov/pact-broker/utility/PACT_BROKER_BASIC_AUTH_PASSWORD
          env_variable_name: PACT_BROKER_BASIC_AUTH_PASSWORD

      - name: Get GitHub token
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Run contract tests
        run: yarn test:contract
        env:
          MOCHA_FILE: ./test-results/test-results.xml

      - name: Print Pact failures
        run: cat test-results/test-results.xml
        if: ${{ failure() }}

      - name: Run Pact publish
        run: yarn pact:publish
        env:
          PACT_BROKER_BASIC_AUTH_USERNAME: pact-broker
          PACT_BROKER_BASE_URL: https://dev.va.gov/_vfs/pact-broker/

      - name: Run Pact verify
        run: |
          curl -v -X POST \
          -H 'Authorization: token ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}' \
          -H 'Accept: application/vnd.github.v3+json' \
          https://api.github.com/repos/department-of-veterans-affairs/vets-api/actions/workflows/8289333/dispatches \
          -d '{"ref": "master"}' \
          --fail

      - name: Archive contract test results
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: contract-test-report
          path: test-results/test-results.xml

      - name: Archive contract test log
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: contract-test-log
          path: logs/pact.log

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Audit dependencies
        run: yarn security-check

  linting:
    name: Linting (All)
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Annotate ESLint results
        run: yarn run eslint --ext .js --ext .jsx --format ./script/github-actions/eslint-annotation-format.js .

      - name: Run Stylelint
        run: yarn run stylelint verbose --output-file stylelint-report.json --formatter json src/**/*.scss

      - name: Annotate Stylelint results
        if: ${{ always() }}
        run: node ./script/github-actions/stylelint-annotation-format.js

  cypress-tests:
    name: Cypress E2E Tests
    runs-on: self-hosted
    needs: build

    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        ci_node_index: [0, 1, 2, 3, 4, 5]

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    steps:
      - name: Checkout vets-website
        uses: actions/checkout@v2

      - name: Download production build artifact
        uses: actions/download-artifact@v2
        with:
          name: vagovprod.tar.bz2

      - name: Unpack build
        run: |
          mkdir -p build/vagovprod
          tar -C build/vagovprod -xjf vagovprod.tar.bz2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Set port for server
        run: echo "SERVER_PORT=$(( ( RANDOM % 2000 ) + 3001 ))" >> $GITHUB_ENV

      # Cypress env vars like this are used to either override config settings
      # or be made available to tests through Cypress.env().
      # https://docs.cypress.io/guides/guides/environment-variables#Option-3-CYPRESS_
      - name: Set port for Cypress
        run: echo "CYPRESS_PORT=$(( SERVER_PORT + 1 ))" >> $GITHUB_ENV

      - name: Start server
        run: node src/platform/testing/e2e/test-server.js --buildtype vagovprod --port=$SERVER_PORT &

      - name: Create test results directory
        run: mkdir -p test-results

      - name: Run Cypress tests
        run: node script/github-actions/run-cypress-tests.js
        timeout-minutes: 60
        env:
          CYPRESS_BASE_URL: http://localhost:${{ env.SERVER_PORT }}
          CYPRESS_CI: true
          STEP: ${{ matrix.ci_node_index }}

      - name: Publish test results
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v2.4.2
        with:
          check_name: 'Cypress Tests Summary'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test-results/e2e-test-output-*.xml'

      - name: Archive Cypress test videos
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: cypress-video-artifacts
          path: cypress/videos

      - name: Archive Cypress test screenshots
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: cypress-screenshot-artifacts
          path: cypress/screenshots

      - name: Archive Cypress Mochawesome test results
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: cypress-mochawesome-test-results-artifact-${{ matrix.ci_node_index }}
          path: cypress/results
          retention-days: 1

  mochawesome-report:
    name: Mochawesome Report
    runs-on: ubuntu-latest
    needs: cypress-tests
    if: ${{ always() && (needs.cypress-tests.result == 'success' || needs.cypress-tests.result == 'failure') }}

    defaults:
      run:
        working-directory: testing-tools-team-dashboard-data

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-gov-west-1"

      - name: Get BigQuery service credentials
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /dsva-vagov/testing-team/bigquery_service_credentials
          env_variable_name: BIGQUERY_SERVICE_CREDENTIALS

      - name: Get GitHub token
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Checkout Testing Tools Team Dashboard Data repo
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/testing-tools-team-dashboard-data
          token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          path: testing-tools-team-dashboard-data

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: vsp-analytics-and-insights
          service_account_key: ${{ env.BIGQUERY_SERVICE_CREDENTIALS }}
          export_default_credentials: true

      - name: Download test result artifact 0
        uses: actions/download-artifact@v2
        with:
          name: cypress-mochawesome-test-results-artifact-0
          path: testing-tools-team-dashboard-data/src/mochawesome/data
        continue-on-error: true

      - name: Download test result artifact 1
        uses: actions/download-artifact@v2
        with:
          name: cypress-mochawesome-test-results-artifact-1
          path: testing-tools-team-dashboard-data/src/mochawesome/data
        continue-on-error: true

      - name: Download test result artifact 2
        uses: actions/download-artifact@v2
        with:
          name: cypress-mochawesome-test-results-artifact-2
          path: testing-tools-team-dashboard-data/src/mochawesome/data
        continue-on-error: true

      - name: Download test result artifact 3
        uses: actions/download-artifact@v2
        with:
          name: cypress-mochawesome-test-results-artifact-3
          path: testing-tools-team-dashboard-data/src/mochawesome/data
        continue-on-error: true

      - name: Download test result artifact 4
        uses: actions/download-artifact@v2
        with:
          name: cypress-mochawesome-test-results-artifact-4
          path: testing-tools-team-dashboard-data/src/mochawesome/data
        continue-on-error: true

      - name: Download test result artifact 5
        uses: actions/download-artifact@v2
        with:
          name: cypress-mochawesome-test-results-artifact-5
          path: testing-tools-team-dashboard-data/src/mochawesome/data
        continue-on-error: true

      - name: Create report and post results to BigQuery
        run: yarn cypress-mochawesome-to-bigquery

  nightwatch-tests:
    name: Nightwatch E2E Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout vets-website
        uses: actions/checkout@v2

      - name: Download production build artifact
        uses: actions/download-artifact@v2
        with:
          name: vagovprod.tar.bz2

      - name: Unpack build
        run: |
          mkdir -p build/vagovprod
          tar -C build/vagovprod -xjf vagovprod.tar.bz2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Run Nightwatch tests
        run: yarn test:e2e:headless
        timeout-minutes: 30
        env:
          BUILDTYPE: vagovprod
          NODE_ENV: production

  archive:
    name: Archive
    runs-on: ubuntu-latest

    strategy:
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]

    needs: [cypress-tests, nightwatch-tests, unit-tests, contract-tests, security-audit, linting]

    # Archive should still run even when linting is skipped (as in PRs).
    # This if overrides the dependency on linting success to include skipped.
    # Because of always(), the rest of the needed jobs have to be checked too.
    # By doing this, later jobs that need this job require similar overrides
    # or else they will also be skipped when linting is skipped.
    if: |
      always() &&
      needs.cypress-tests.result == 'success' &&
      needs.nightwatch-tests.result == 'success' &&
      needs.unit-tests.result == 'success' &&
      needs.contract-tests.result == 'success' &&
      needs.security-audit.result == 'success' &&
      (needs.linting.result == 'success' || needs.linting.result == 'skipped')

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.buildtype }}.tar.bz2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get AWS IAM role
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload build
        run: aws s3 cp ${{ matrix.buildtype }}.tar.bz2 s3://vetsgov-website-builds-s3-upload/application-build/$GITHUB_SHA/${{ matrix.buildtype }}.tar.bz2 --acl public-read --region us-gov-west-1

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: ${{ always() && github.ref == 'refs/heads/master' && needs.archive.result == 'success' }}
    needs: archive

    strategy:
      matrix:
        include:
          - environment: vagovdev
            bucket: apps.dev.va.gov
          - environment: vagovstaging
            bucket: apps.staging.va.gov

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get AWS IAM role
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Deploy
        run: ./script/github-actions/deploy.sh -s $SRC -d $DEST -v
        env:
          SRC: s3://vetsgov-website-builds-s3-upload/application-build/${{ github.sha }}/${{ matrix.environment }}.tar.bz2
          DEST: s3://${{ matrix.bucket }}

  jenkins:
    name: Run Jenkins CI
    runs-on: ubuntu-latest
    needs: archive
    if: ${{ always() && needs.archive.result == 'success' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get Jenkins token
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/JENKINS_API_TOKEN
          env_variable_name: JENKINS_API_TOKEN

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Trigger Jenkins pipeline
        run: node script/github-actions/trigger-jenkins.js
