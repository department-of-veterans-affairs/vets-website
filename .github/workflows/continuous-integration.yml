name: Continuous Integration

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

env:
  CHROMEDRIVER_FILEPATH: /usr/local/share/chrome_driver/chromedriver
  NEXUS_REGISTRY: https://devops.va.gov/dots-nexus/repository/npm-public/

concurrency:
  group: ${{ github.ref != 'refs/heads/master' && github.ref || github.sha  }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  build:
    name: Build
    runs-on: self-hosted

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    strategy:
      fail-fast: false
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-gov-west-1'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Get NEXUS username
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_1_NEXUS_USERNAME
          env_variable_name: VA_VSP_BOT_1_NEXUS_USERNAME

      - name: Get NEXUS token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_1_NEXUS_PASSWORD
          env_variable_name: VA_VSP_BOT_1_NEXUS_PASSWORD

      # Required to change registry in yarn.lock file
      - name: Change registry in yarn.lock
        run: |
          sed -i -e "s#https://registry.yarnpkg.com/#${{ env.NEXUS_REGISTRY }}#g" yarn.lock
          sed -i -e "s#https://registry.npmjs.org/#${{ env.NEXUS_REGISTRY }}#g" yarn.lock

      - name: Authenticate NEXUS
        run: |
          npm config set _auth $(echo -n '${{ env.VA_VSP_BOT_1_NEXUS_USERNAME }}:${{ env.VA_VSP_BOT_1_NEXUS_PASSWORD }}' | openssl base64)
          npm config set cafile ${{ env.NODE_EXTRA_CA_CERTS }}
          npm config set registry ${{ env.NEXUS_REGISTRY }}
          npm config set email va-vsp-bot-1@va.gov
          npm config set always-auth true

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          command: yarn install --frozen-lockfile --prefer-offline --production=false --network-concurrency 1
          max_attempts: 3
          timeout_minutes: 5
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Build
        run: yarn build --verbose --buildtype=${{ matrix.buildtype }}
        timeout-minutes: 30

      # ----------------------------
      # | Notify Slack of failures |
      # ---------------------------

      - name: Get va-vsp-bot token
        if: ${{ failure() }}
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Checkout VSP actions
        if: ${{ failure() }}
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vsp-github-actions
          ref: refs/heads/main
          token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/vsp-github-actions

      - name: Get Slack app token
        if: ${{ failure() }}
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/github_actions_slack_socket_token
          env_variable_name: SLACK_APP_TOKEN

      - name: Get Slack bot token
        if: ${{ failure() }}
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/github_actions_slack_bot_user_token
          env_variable_name: SLACK_BOT_TOKEN

      - name: Notify Slack about build failures
        if: ${{ failure() }}
        uses: ./.github/actions/vsp-github-actions/slack-socket
        env:
          SSL_CERT_DIR: /etc/ssl/certs
        with:
          slack_app_token: ${{ env.SLACK_APP_TOKEN }}
          slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
          attachments: '[{"mrkdwn_in": ["text"], "color": "danger", "text": "At least one build step in `vets-website` has failed, run: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.run_id}}>"}]'
          channel_id: C02AG8UF95M # gha-build-status

      - name: Cancel other parallel steps
        if: ${{ failure() }}
        uses: andymckay/cancel-action@0.2

      # ----------------
      # | End Notify Slack |
      # ----------------

      - name: Generate build details
        run: |
          cat > build/${{ matrix.buildtype }}/BUILD.txt << EOF
          BUILDTYPE=${{ matrix.buildtype }}
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          RUN_ID=${{ github.run_id }}
          REF=${{ github.sha }}
          BUILDTIME=$(date +%s)
          EOF

      - name: Compress and archive build
        run: tar -C build/${{ matrix.buildtype }} -cjf ${{ matrix.buildtype }}.tar.bz2 .

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.buildtype }}.tar.bz2
          path: ${{ matrix.buildtype }}.tar.bz2
          retention-days: 1

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          command: yarn install --frozen-lockfile --prefer-offline --production=false
          max_attempts: 3
          timeout_minutes: 5
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Run unit tests
        run: yarn test:unit --coverage
        env:
          MOCHA_FILE: test-results/unit-tests.xml

      - name: Generate coverage report by app
        run: node script/app-coverage-report.js > test-results/coverage_report.txt

      - name: Configure AWS credentials (1)
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get AWS IAM role
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload coverage report to S3
        if: ${{ github.ref == 'refs/heads/master' }}
        run: aws s3 cp coverage/test-coverage-report.json s3://apps.dev.va.gov/coverage/test-coverage-report.json --acl public-read --region us-gov-west-1

      - name: Get code coverage
        id: code-coverage
        run: echo ::set-output name=MARKDOWN::$(node ./script/github-actions/code-coverage-format-report.js)

      - name: Publish test results
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v2.4.3
        with:
          check_name: 'Unit Tests Summary'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test-results/unit-tests.xml'
          summary: ${{ steps.code-coverage.outputs.MARKDOWN }}

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get Pact Broker password
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /dsva-vagov/pact-broker/utility/PACT_BROKER_BASIC_AUTH_PASSWORD
          env_variable_name: PACT_BROKER_BASIC_AUTH_PASSWORD

      - name: Get GitHub token
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          command: yarn install --frozen-lockfile --prefer-offline --production=false
          max_attempts: 3
          timeout_minutes: 5
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Run contract tests
        run: yarn test:contract
        env:
          MOCHA_FILE: ./test-results/test-results.xml

      - name: Print Pact failures
        run: cat test-results/test-results.xml
        if: ${{ failure() }}

      - name: Run Pact publish
        run: yarn pact:publish
        env:
          PACT_BROKER_BASIC_AUTH_USERNAME: pact-broker
          PACT_BROKER_BASE_URL: https://dev.va.gov/_vfs/pact-broker/

      - name: Run Pact verify
        run: |
          curl -v -X POST \
          -H 'Authorization: token ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}' \
          -H 'Accept: application/vnd.github.v3+json' \
          https://api.github.com/repos/department-of-veterans-affairs/vets-api/actions/workflows/8289333/dispatches \
          -d '{"ref": "master"}' \
          --fail

      - name: Archive contract test results
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: contract-test-report
          path: test-results/test-results.xml

      - name: Archive contract test log
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: contract-test-log
          path: logs/pact.log

      - name: Publish test results
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v2.4.3
        with:
          check_name: 'Pact Tests Summary'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test-results/test-results.xml'

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Audit dependencies
        run: yarn security-check

  linting:
    name: Linting (All)
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          command: yarn install --frozen-lockfile --prefer-offline --production=false
          max_attempts: 3
          timeout_minutes: 5
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Annotate ESLint results
        run: yarn run eslint --ext .js --ext .jsx --format ./script/github-actions/eslint-annotation-format.js .

      - name: Run Stylelint
        run: yarn run stylelint verbose --output-file stylelint-report.json --formatter json src/**/*.scss

      - name: Annotate Stylelint results
        if: ${{ always() }}
        run: node ./script/github-actions/stylelint-annotation-format.js

  cypress-tests-prep:
    name: Prep for Cypress Tests
    runs-on: ubuntu-latest
    outputs:
      num_containers: ${{ steps.containers.outputs.num }}
      ci_node_index: ${{ steps.matrix.outputs.ci_node_index }}
      tests: ${{ steps.tests.outputs.selected }}
      is_master_build: ${{ env.IS_MASTER_BUILD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # this is required to list all changed files in branch

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          command: yarn install --frozen-lockfile --prefer-offline --production=false
          max_attempts: 3
          timeout_minutes: 5
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Set IS_MASTER_BUILD
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
              echo "IS_MASTER_BUILD=true" >> $GITHUB_ENV
          else
              echo "IS_MASTER_BUILD=false" >> $GITHUB_ENV
          fi

      - name: List changed files
        id: changed-files
        run: echo ::set-output name=all_changed_files::$(git diff --name-only origin/master...)

      - name: Set NUM_CONTAINERS, CI_NODE_INDEX, TESTS variables
        run: node script/github-actions/select-cypress-tests.js
        env:
          IS_MASTER_BUILD: ${{ env.IS_MASTER_BUILD }}
          CHANGED_FILE_PATHS: ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Set output of NUM_CONTAINERS
        id: containers
        run: echo ::set-output name=num::$NUM_CONTAINERS

      - name: Set output of CI_NODE_INDEX
        id: matrix
        run: echo ::set-output name=ci_node_index::$CI_NODE_INDEX

      - name: Set output of TESTS
        id: tests
        run: echo ::set-output name=selected::$TESTS

  cypress-tests:
    name: Cypress E2E Tests
    runs-on: self-hosted
    needs: [build, cypress-tests-prep]
    if: ${{ needs.cypress-tests-prep.outputs.num_containers > 0 }}
    container:
      image: public.ecr.aws/cypress-io/cypress/browsers:node14.16.0-chrome89-ff77
      options: -u 1001:1001 -v /usr/local/share:/share

    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        ci_node_index: ${{ fromJson(needs.cypress-tests-prep.outputs.ci_node_index) }}

    env:
      CHROMEDRIVER_FILEPATH: /share/chrome_driver/chromedriver
      NODE_EXTRA_CA_CERTS: /share/ca-certificates/VA-Internal-S2-RCA1-v1.cer.crt

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-gov-west-1'

      - name: Checkout vets-website
        uses: actions/checkout@v2

      - name: Download production build artifact
        uses: actions/download-artifact@v2
        with:
          name: vagovprod.tar.bz2

      - name: Unpack build
        run: |
          mkdir -p build/vagovprod
          tar -C build/vagovprod -xjf vagovprod.tar.bz2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            /github/home/.cache/Cypress
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}-cypress

      - name: Get NEXUS username
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_1_NEXUS_USERNAME
          env_variable_name: VA_VSP_BOT_1_NEXUS_USERNAME

      - name: Get NEXUS token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_1_NEXUS_PASSWORD
          env_variable_name: VA_VSP_BOT_1_NEXUS_PASSWORD

      # Required to change registry in yarn.lock file
      - name: Change registry in yarn.lock
        run: |
          sed -i -e "s#https://registry.yarnpkg.com/#${{ env.NEXUS_REGISTRY }}#g" yarn.lock
          sed -i -e "s#https://registry.npmjs.org/#${{ env.NEXUS_REGISTRY }}#g" yarn.lock

      - name: Authenticate NEXUS
        run: |
          npm config set _auth $(echo -n '${{ env.VA_VSP_BOT_1_NEXUS_USERNAME }}:${{ env.VA_VSP_BOT_1_NEXUS_PASSWORD }}' | openssl base64)
          npm config set cafile ${{ env.NODE_EXTRA_CA_CERTS }}
          npm config set registry ${{ env.NEXUS_REGISTRY }}
          npm config set email va-vsp-bot-1@va.gov
          npm config set always-auth true

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          command: yarn install --frozen-lockfile --prefer-offline --production=false --network-concurrency 1
          max_attempts: 3
          timeout_minutes: 5
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Start server
        run: node src/platform/testing/e2e/test-server.js --buildtype vagovprod --port=3001 &

      - name: Create test results directory
        run: mkdir -p test-results

      - name: Run Cypress tests
        run: node script/github-actions/run-cypress-tests.js
        timeout-minutes: 30
        env:
          CYPRESS_CI: true
          STEP: ${{ matrix.ci_node_index }}
          NUM_CONTAINERS: ${{ needs.cypress-tests-prep.outputs.num_containers }}
          TESTS: ${{ needs.cypress-tests-prep.outputs.tests }}

      - name: Archive test videos
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: cypress-video-artifacts
          path: cypress/videos

      - name: Archive test screenshots
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: cypress-screenshot-artifacts
          path: cypress/screenshots

      - name: Archive Mochawesome test results
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: cypress-mochawesome-test-results
          path: cypress/results
          retention-days: 1

  failure-notifications:
    name: Failure Notifications
    runs-on: ubuntu-latest
    needs: cypress-tests
    if: ${{ needs.cypress-tests.result == 'failure' }}
    continue-on-error: true
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-gov-west-1'

      - name: Get va-vsp-bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      # ----------------
      # | Notify Slack |
      # ----------------
      - name: Checkout VSP actions
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vsp-github-actions
          ref: refs/heads/main
          token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/vsp-github-actions

      - name: Get Slack app token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/github_actions_slack_socket_token
          env_variable_name: SLACK_APP_TOKEN

      - name: Get Slack bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/github_actions_slack_bot_user_token
          env_variable_name: SLACK_BOT_TOKEN

      - name: Notify Slack about Cypress test failures
        uses: ./.github/actions/vsp-github-actions/slack-socket
        env:
          SSL_CERT_DIR: /etc/ssl/certs
        with:
          slack_app_token: ${{ env.SLACK_APP_TOKEN }}
          slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
          attachments: '[{"mrkdwn_in": ["text"], "color": "danger", "text": "E2E tests in `vets-website` have failed, run: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.run_id}}>"}]'
          channel_id: C026PD47Z19 #gha-test-status

# archive:
#   name: Archive
#   runs-on: ubuntu-latest

#   strategy:
#     matrix:
#       buildtype: [vagovdev, vagovstaging, vagovprod]

#   needs: [cypress-tests, nightwatch-tests, unit-tests, contract-tests, security-audit, linting]

#   # Archive should still run even when linting is skipped (as in PRs).
#   # This if overrides the dependency on linting success to include skipped.
#   # Because of always(), the rest of the needed jobs have to be checked too.
#   # By doing this, later jobs that need this job require similar overrides
#   # or else they will also be skipped when linting is skipped.
#   if: |
#     always() &&
#     needs.cypress-tests.result == 'success' &&
#     needs.nightwatch-tests.result == 'success' &&
#     needs.unit-tests.result == 'success' &&
#     needs.contract-tests.result == 'success' &&
#     needs.security-audit.result == 'success' &&
#     (needs.linting.result == 'success' || needs.linting.result == 'skipped')

#   steps:
#     - name: Download build artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ${{ matrix.buildtype }}.tar.bz2

#     - name: Configure AWS credentials (1)
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-gov-west-1

#     - name: Get AWS IAM role
#       uses: marvinpinto/action-inject-ssm-secrets@latest
#       with:
#         ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
#         env_variable_name: AWS_FRONTEND_NONPROD_ROLE

#     - name: Configure AWS Credentials (2)
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-gov-west-1
#         role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
#         role-duration-seconds: 900
#         role-session-name: vsp-frontendteam-githubaction

#     - name: Upload build
#       run: aws s3 cp ${{ matrix.buildtype }}.tar.bz2 s3://vetsgov-website-builds-s3-upload/application-build/$GITHUB_SHA/${{ matrix.buildtype }}.tar.bz2 --acl public-read --region us-gov-west-1

# deploy:
#   name: Deploy
#   runs-on: ubuntu-latest
#   if: ${{ always() && github.ref == 'refs/heads/master' && needs.archive.result == 'success' }}
#   needs: archive

#   strategy:
#     matrix:
#       include:
#         - environment: vagovdev
#           bucket: dev-va-gov-assets
#         - environment: vagovstaging
#           bucket: staging-va-gov-assets

#   steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Configure AWS credentials (1)
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-gov-west-1

#     - name: Get AWS IAM role
#       uses: marvinpinto/action-inject-ssm-secrets@latest
#       with:
#         ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
#         env_variable_name: AWS_FRONTEND_NONPROD_ROLE

#     - name: Configure AWS Credentials (2)
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-gov-west-1
#         role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
#         role-duration-seconds: 900
#         role-session-name: vsp-frontendteam-githubaction

#     - name: Deploy
#       run: ./script/github-actions/deploy.sh -s $SRC -d $DEST -v
#       env:
#         SRC: s3://vetsgov-website-builds-s3-upload/application-build/${{ github.sha }}/${{ matrix.environment }}.tar.bz2
#         DEST: s3://${{ matrix.bucket }}

# jenkins:
#   name: Run Jenkins CI
#   runs-on: ubuntu-latest
#   needs: archive
#   if: ${{ always() && needs.archive.result == 'success' }}
#   steps:
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-gov-west-1

#     - name: Get Jenkins token
#       uses: marvinpinto/action-inject-ssm-secrets@latest
#       with:
#         ssm_parameter: /frontend-team/github-actions/parameters/JENKINS_API_TOKEN
#         env_variable_name: JENKINS_API_TOKEN

#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Get Node version
#       id: get-node-version
#       run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

#     - name: Setup Node
#       uses: actions/setup-node@v2
#       with:
#         node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}
#     - name: Cache dependencies
#       id: cache-dependencies
#       uses: actions/cache@v2
#       with:
#         path: |
#           .cache/yarn
#           node_modules
#         key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

#     - name: Install dependencies
#       run: yarn install --frozen-lockfile --prefer-offline
#       env:
#         YARN_CACHE_FOLDER: .cache/yarn

#     - name: Trigger Jenkins pipeline
#       run: node script/github-actions/trigger-jenkins.js
