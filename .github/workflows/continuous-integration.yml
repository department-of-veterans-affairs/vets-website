name: Continuous Integration

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

env:
  DEVOPS_CHANNEL_ID: C37M86Y8G #devops-deploys
  CHROMEDRIVER_FILEPATH: /usr/local/share/chrome_driver/chromedriver

concurrency:
  group: ${{ github.ref != 'refs/heads/master' && github.ref || github.sha }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  build:
    name: Build
    runs-on: self-hosted

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    strategy:
      fail-fast: false
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Build
        run: yarn build --verbose --buildtype=${{ matrix.buildtype }}
        timeout-minutes: 30

      - name: Generate build details
        run: |
          cat > build/${{ matrix.buildtype }}/BUILD.txt << EOF
          BUILDTYPE=${{ matrix.buildtype }}
          NODE_ENV=production
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          CHANGE_TARGET=null
          RUN_ID=${{ github.run_id }}
          RUN_NUMBER=${{ github.run_number }}
          REF=${{ github.sha }}
          BUILDTIME=$(date +%s)
          EOF

      - name: Compress and archive build
        run: tar -C build/${{ matrix.buildtype }} -cjf ${{ matrix.buildtype }}.tar.bz2 .

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.buildtype }}.tar.bz2
          path: ${{ matrix.buildtype }}.tar.bz2
          retention-days: 1

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Run unit tests
        run: yarn test:unit --coverage
        env:
          MOCHA_FILE: test-results/unit-tests.xml

      - name: Generate coverage report by app
        run: node script/app-coverage-report.js > test-results/coverage_report.txt

      - name: Configure AWS credentials (1)
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get AWS IAM role
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload coverage report to S3
        if: ${{ github.ref == 'refs/heads/master' }}
        run: aws s3 cp coverage/test-coverage-report.json s3://apps.dev.va.gov/coverage/test-coverage-report.json --acl public-read --region us-gov-west-1

      - name: Get code coverage
        id: code-coverage
        run: echo ::set-output name=MARKDOWN::$(node ./script/github-actions/code-coverage-format-report.js)

      - name: Publish test results
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v2.4.3
        with:
          check_name: 'Unit Tests Summary'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test-results/unit-tests.xml'
          summary: ${{ steps.code-coverage.outputs.MARKDOWN }}

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get Pact Broker password
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /dsva-vagov/pact-broker/utility/PACT_BROKER_BASIC_AUTH_PASSWORD
          env_variable_name: PACT_BROKER_BASIC_AUTH_PASSWORD

      - name: Get GitHub token
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Run contract tests
        run: yarn test:contract
        env:
          MOCHA_FILE: ./test-results/test-results.xml

      - name: Print Pact failures
        run: cat test-results/test-results.xml
        if: ${{ failure() }}

      - name: Run Pact publish
        run: yarn pact:publish
        env:
          PACT_BROKER_BASIC_AUTH_USERNAME: pact-broker
          PACT_BROKER_BASE_URL: https://dev.va.gov/_vfs/pact-broker/

      - name: Run Pact verify
        run: |
          curl -v -X POST \
          -H 'Authorization: token ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}' \
          -H 'Accept: application/vnd.github.v3+json' \
          https://api.github.com/repos/department-of-veterans-affairs/vets-api/actions/workflows/8289333/dispatches \
          -d '{"ref": "master"}' \
          --fail

      - name: Archive contract test results
        uses: actions/upload-artifact@v2
        with:
          name: contract-test-report
          path: mochawesome-report

      - name: Archive contract test log
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: contract-test-log
          path: logs/pact.log

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Audit dependencies
        run: yarn security-check

  linting:
    name: Linting (All)
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Annotate ESLint results
        run: yarn run eslint --ext .js --ext .jsx --format ./script/github-actions/eslint-annotation-format.js .

      - name: Run Stylelint
        run: yarn run stylelint verbose --output-file stylelint-report.json --formatter json src/**/*.scss

      - name: Annotate Stylelint results
        if: ${{ always() }}
        run: node ./script/github-actions/stylelint-annotation-format.js

  testing-reports-prep:
    name: Testing Reports Prep
    runs-on: ubuntu-latest
    outputs:
      app_list: ${{ env.APPLICATION_LIST }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Generate new application list
        run: yarn generate-app-list
      # exports app list and assigns to environmental variable at this step

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get va-vsp-bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Checkout Testing Tools Team Dashboard Data repo
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/testing-tools-team-dashboard-data
          token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          path: testing-tools-team-dashboard-data
          ref: test-naming-apps

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14 # ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline --production=false
        env:
          YARN_CACHE_FOLDER: .cache/yarn
        working-directory: testing-tools-team-dashboard-data

      - name: Get BigQuery service credentials
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /dsva-vagov/testing-team/bigquery_service_credentials
          env_variable_name: BIGQUERY_SERVICE_CREDENTIALS

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: vsp-analytics-and-insights
          service_account_key: ${{ env.BIGQUERY_SERVICE_CREDENTIALS }}
          export_default_credentials: true

      - name: Upload app list to BigQuery
        run: yarn generate-app-list
        working-directory: testing-tools-team-dashboard-data

  cypress-tests-prep:
    name: Prep for Cypress Tests
    runs-on: ubuntu-latest
    outputs:
      num_containers: ${{ steps.containers.outputs.num }}
      ci_node_index: ${{ steps.matrix.outputs.ci_node_index }}
      tests: ${{ steps.tests.outputs.selected }}
      is_master_build: ${{ env.IS_MASTER_BUILD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Set IS_MASTER_BUILD
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
              echo "IS_MASTER_BUILD=true" >> $GITHUB_ENV
          else
              echo "IS_MASTER_BUILD=false" >> $GITHUB_ENV
          fi

      - name: List changed files
        id: changed-files
        run: echo ::set-output name=all_changed_files::$(git diff --name-only origin/master...)

      - name: Set NUM_CONTAINERS, CI_NODE_INDEX, TESTS variables
        run: node script/github-actions/select-cypress-tests.js
        env:
          IS_MASTER_BUILD: ${{ env.IS_MASTER_BUILD }}
          CHANGED_FILE_PATHS: ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Set output of NUM_CONTAINERS
        id: containers
        run: echo ::set-output name=num::$NUM_CONTAINERS

      - name: Set output of CI_NODE_INDEX
        id: matrix
        run: echo ::set-output name=ci_node_index::$CI_NODE_INDEX

      - name: Set output of TESTS
        id: tests
        run: echo ::set-output name=selected::$TESTS

  cypress-tests:
    name: Cypress E2E Tests
    runs-on: self-hosted
    needs: [build, cypress-tests-prep]
    if: ${{ needs.cypress-tests-prep.outputs.num_containers > 0 }}
    container:
      image: public.ecr.aws/cypress-io/cypress/browsers:node14.16.0-chrome90-ff88
      options: -u 1001:1001 -v /usr/local/share:/share

    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        ci_node_index: ${{ fromJson(needs.cypress-tests-prep.outputs.ci_node_index) }}

    env:
      CHROMEDRIVER_FILEPATH: /share/chrome_driver/chromedriver
      NODE_EXTRA_CA_CERTS: /share/ca-certificates/VA-Internal-S2-RCA1-v1.cer.crt

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Checkout vets-website
        uses: actions/checkout@v2

      - name: Download production build artifact
        uses: actions/download-artifact@v2
        with:
          name: vagovprod.tar.bz2

      - name: Unpack build
        run: |
          mkdir -p build/vagovprod
          tar -C build/vagovprod -xjf vagovprod.tar.bz2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            /github/home/.cache/Cypress
            node_modules

      - name: Start server
        run: node src/platform/testing/e2e/test-server.js --buildtype vagovprod --port=3001 &

      - name: Run Cypress tests
        run: node script/github-actions/run-cypress-tests.js
        timeout-minutes: 30
        env:
          CYPRESS_CI: true
          STEP: ${{ matrix.ci_node_index }}
          NUM_CONTAINERS: ${{ needs.cypress-tests-prep.outputs.num_containers }}
          TESTS: ${{ needs.cypress-tests-prep.outputs.tests }}

      - name: Archive test videos
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: cypress-video-artifacts
          path: cypress/videos

      - name: Archive test screenshots
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: cypress-screenshot-artifacts
          path: cypress/screenshots

      - name: Archive Mochawesome test results
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: cypress-mochawesome-test-results
          path: cypress/results
          retention-days: 1

  testing-reports-contract-tests:
    name: Testing Reports - Contract Tests
    runs-on: ubuntu-latest
    needs: [contract-tests]
    if: ${{ always() && (needs.contract-tests.result == 'success' || needs.contract-tests.result == 'failure') }}
    continue-on-error: true
    steps:
      - name: Set IS_MASTER_BUILD
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
              echo "IS_MASTER_BUILD=true" >> $GITHUB_ENV
          else
              echo "IS_MASTER_BUILD=false" >> $GITHUB_ENV
          fi

      - name: Checkout
        uses: actions/checkout@v2

      # ----------------
      # | Notify Slack |
      # ----------------

      - name: Notify Slack about Contract test failures
        if: ${{ github.ref == 'refs/heads/master' && needs.contract-tests.result == 'failure' }}
        uses: ./.github/workflows/slack-notify
        continue-on-error: true
        env:
          SSL_CERT_DIR: /etc/ssl/certs
        with:
          attachments: '[{"mrkdwn_in": ["text"], "color": "danger", "text": "<!here> Contract tests in `vets-website` have failed on the `master` branch, run: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.run_id}}>"}]'
          channel_id: C026PD47Z19 #gha-test-status
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # ------------------------
      # | Upload BigQuery Data |
      # ------------------------

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get va-vsp-bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Checkout Testing Tools Team Dashboard Data repo
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/testing-tools-team-dashboard-data
          token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          path: testing-tools-team-dashboard-data

      # TODO: Set .nvmrc in testing-tools-team-dashboard-data.
      # - name: Get Node version
      #   id: get-node-version
      #   run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      #   working-directory: testing-tools-team-dashboard-data

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14 # ${{ steps.get-node-version.outputs.NODE_VERSION }}

      # TODO: Potentially use install composite
      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline --production=false
        env:
          YARN_CACHE_FOLDER: .cache/yarn
        working-directory: testing-tools-team-dashboard-data

      - name: Get BigQuery service credentials
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /dsva-vagov/testing-team/bigquery_service_credentials
          env_variable_name: BIGQUERY_SERVICE_CREDENTIALS

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: vsp-analytics-and-insights
          service_account_key: ${{ env.BIGQUERY_SERVICE_CREDENTIALS }}
          export_default_credentials: true

      - name: Get AWS IAM role
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Set UUID for Mochawesome reports
        run: echo "UUID=$(uuidgen)" >> $GITHUB_ENV

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      # --------------------------------------
      # | Publish Contract Test Report       |
      # -------------------------------------

      - name: Download Contract Test Mochawesome test results
        uses: actions/download-artifact@v2
        with:
          name: contract-test-report
          path: testing-tools-team-dashboard-data/src/mochawesome/data

      - name: Upload Contract Test report to s3
        run: aws s3 cp testing-tools-team-dashboard-data/src/mochawesome/data/mochawesome.html s3://testing-tools-testing-reports/vets-website-contract-test-reports/${{env.UUID}}.html --acl public-read --region us-gov-west-1

      - name: Create Contract Test report and post results to BigQuery
        run: yarn cypress-mochawesome-to-bigquery
        working-directory: testing-tools-team-dashboard-data
        env:
          NUM_CONTAINERS: ${{ needs.cypress-tests-prep.outputs.num_containers }}
          TEST_EXECUTIONS_TABLE_NAME: vets_website_contract_test_suite_executions
          TEST_RESULTS_TABLE_NAME: vets_website_contract_test_results
          TEST_REPORTS_FOLDER_NAME: vets-website-contract-test-reports

          # env.MOCHAWESOME_REPORT_RESULTS is set and exported during the above step when the mochawesome report is generated.  It contains the output string for the publish step at the end of the job with the numbers from the Mochawesome report.

      # -------------------------
      # | Contract Tests Summary |
      # -------------------------

      - name: Contract test results
        if: ${{ always() }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Contract Tests Summary
          conclusion: ${{ needs.contract-tests.result }}
          output: |
            {"summary":${{ env.MOCHAWESOME_REPORT_RESULTS }}}

  testing-reports-cypress:
    name: Testing Reports - Cypress E2E Tests
    runs-on: ubuntu-latest
    needs: [testing-reports-prep, cypress-tests-prep, cypress-tests]
    if: ${{ always() && needs.cypress-tests-prep.outputs.num_containers > 0 && (needs.cypress-tests.result == 'success' || needs.cypress-tests.result == 'failure') }}
    env:
      APPLICATION_LIST: ${{ needs.testing-reports-prep.outputs.app_list }}
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Notify Slack about Cypress test failures
        if: ${{ github.ref == 'refs/heads/master' && needs.cypress-tests.result == 'failure' }}
        uses: ./.github/workflows/slack-notify
        continue-on-error: true
        env:
          SSL_CERT_DIR: /etc/ssl/certs
        with:
          attachments: '[{"mrkdwn_in": ["text"], "color": "danger", "text": "<!here> E2E tests in `vets-website` have failed on the `master` branch, run: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.run_id}}>"}]'
          channel_id: C026PD47Z19 #gha-test-status
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        # ------------------------
        # | Upload BigQuery Data |
        # ------------------------

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get va-vsp-bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Checkout Testing Tools Team Dashboard Data repo
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/testing-tools-team-dashboard-data
          token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          path: testing-tools-team-dashboard-data

        # TODO: Set .nvmrc in testing-tools-team-dashboard-data.
        # - name: Get Node version
        #   id: get-node-version
        #   run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
        #   working-directory: testing-tools-team-dashboard-data

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14 # ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline --production=false
        env:
          YARN_CACHE_FOLDER: .cache/yarn
        working-directory: testing-tools-team-dashboard-data

      - name: Get BigQuery service credentials
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /dsva-vagov/testing-team/bigquery_service_credentials
          env_variable_name: BIGQUERY_SERVICE_CREDENTIALS

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: vsp-analytics-and-insights
          service_account_key: ${{ env.BIGQUERY_SERVICE_CREDENTIALS }}
          export_default_credentials: true

      - name: Get AWS IAM role
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Set UUID for Mochawesome reports
        run: echo "UUID=$(uuidgen)" >> $GITHUB_ENV

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

        # --------------------------------------
        # | Publish Cypress E2E Testing Report |
        # -------------------------------------

      - name: Download Cypress E2E Mochawesome test results
        uses: actions/download-artifact@v2
        with:
          name: cypress-mochawesome-test-results
          path: testing-tools-team-dashboard-data/src/mochawesome/data

      - name: Download Cypress E2E video artifacts
        if: ${{ needs.cypress-tests.result == 'failure' }}
        uses: actions/download-artifact@v2
        with:
          name: cypress-video-artifacts
          path: testing-tools-team-dashboard-data/cypress-reports/videos/${{ env.UUID }}

      - name: Create Cypress E2E report and post results to BigQuery
        run: yarn cypress-mochawesome-to-bigquery
        working-directory: testing-tools-team-dashboard-data
        env:
          IS_MASTER_BUILD: ${{ needs.cypress-tests-prep.outputs.is_master_build }}
          NUM_CONTAINERS: ${{ needs.cypress-tests-prep.outputs.num_containers }}
          TEST_EXECUTIONS_TABLE_NAME: cypress_test_suite_executions
          TEST_RESULTS_TABLE_NAME: cypress_test_results
          TEST_REPORTS_FOLDER_NAME: vets-website-cypress-reports

          # env.MOCHAWESOME_REPORT_RESULTS is set and exported during the above step when the mochawesome report is generated.  It contains the output string for the publish step at the end of the job with the numbers from the Mochawesome report.

      - name: Upload Cypress E2E test videos to s3
        if: ${{ needs.cypress-tests.result == 'failure' }}
        run: aws s3 cp testing-tools-team-dashboard-data/cypress-reports/videos/${{ env.UUID }} s3://testing-tools-testing-reports/vets-website-cypress-reports/videos/${{ env.UUID }} --acl public-read --region us-gov-west-1 --recursive

      - name: Upload Cypress E2E test report to s3
        run: aws s3 cp testing-tools-team-dashboard-data/mochawesome-report s3://testing-tools-testing-reports/vets-website-cypress-reports --acl public-read --region us-gov-west-1 --recursive

        # -------------------------
        # | Cypress Tests Summary |
        # -------------------------

      - name: Publish Cypress test results
        if: ${{ always() }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Cypress Tests Summary
          conclusion: ${{ needs.cypress-tests.result }}
          output: |
            {"summary":${{ env.MOCHAWESOME_REPORT_RESULTS }}}

  archive:
    name: Archive
    runs-on: ubuntu-latest

    # TODO: Add vagovprod when ready
    strategy:
      matrix:
        buildtype: [vagovdev, vagovstaging]

    needs: [cypress-tests, unit-tests, contract-tests, security-audit, linting]

    # Archive should still run even when linting is skipped (as in PRs).
    # This if overrides the dependency on linting success to include skipped.
    # Because of always(), the rest of the needed jobs have to be checked too.
    # By doing this, later jobs that need this job require similar overrides
    # or else they will also be skipped when linting is skipped.
    if: |
      always() &&
      (needs.cypress-tests.result == 'success' || needs.cypress-tests.result == 'skipped') &&
      needs.build.result == 'success' &&
      needs.unit-tests.result == 'success' &&
      needs.contract-tests.result == 'success' &&
      needs.security-audit.result == 'success' &&
      (needs.linting.result == 'success' || needs.linting.result == 'skipped')

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.buildtype }}.tar.bz2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get AWS IAM role
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload build
        run: aws s3 cp ${{ matrix.buildtype }}.tar.bz2 s3://vetsgov-website-builds-s3-upload/$GITHUB_SHA/${{ matrix.buildtype }}.tar.bz2 --acl public-read --region us-gov-west-1

  get-latest-run-number:
    name: Get Latest Workflow Run Number
    runs-on: ubuntu-latest
    if: ${{ always() && github.ref == 'refs/heads/master' && needs.archive.result == 'success' }}
    needs: archive
    outputs:
      latest_run_number: ${{ steps.latest-run-number.outputs.latest_run_number }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          command: yarn install --frozen-lockfile --prefer-offline --production=false
          max_attempts: 3
          timeout_minutes: 7
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Set output of latest_run_number
        id: latest-run-number
        run: echo ::set-output name=latest_run_number::$(node ./script/github-actions/get-latest-run-number.js)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: ${{ always() && github.ref == 'refs/heads/master' && needs.get-latest-run-number.result == 'success' && needs.get-latest-run-number.outputs.latest_run_number == github.run_number}}
    needs: get-latest-run-number

    strategy:
      matrix:
        include:
          - environment: vagovdev
            bucket: dev-va-gov-assets
          - environment: vagovstaging
            bucket: staging-va-gov-assets

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get AWS IAM role
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Deploy
        run: ./script/github-actions/deploy.sh -s $SRC -d $DEST -v
        env:
          SRC: s3://vetsgov-website-builds-s3-upload/${{ github.sha }}/${{ matrix.environment }}.tar.bz2
          DEST: s3://${{ matrix.bucket }}

  # jenkins:
  #   name: Run Jenkins CI
  #   runs-on: ubuntu-latest
  #   needs: archive
  #   if: ${{ always() && needs.archive.result == 'success' }}
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-gov-west-1

  #     - name: Get Jenkins token
  #       uses: marvinpinto/action-inject-ssm-secrets@latest
  #       with:
  #         ssm_parameter: /frontend-team/github-actions/parameters/JENKINS_API_TOKEN
  #         env_variable_name: JENKINS_API_TOKEN

  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Get Node version
  #       id: get-node-version
  #       run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}
  #     - name: Cache dependencies
  #       id: cache-dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           .cache/yarn
  #           node_modules
  #         key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile --prefer-offline
  #       env:
  #         YARN_CACHE_FOLDER: .cache/yarn

  #     - name: Trigger Jenkins pipeline
  #       run: node script/github-actions/trigger-jenkins.js

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' && (failure() || cancelled()) }}
    needs: deploy

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Notify Slack
        uses: ./.github/workflows/slack-notify
        continue-on-error: true
        with:
          attachments: '[{"mrkdwn_in": ["text"], "color": "danger", "text": "vets-website master branch CI failed!: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}>"}]'
          channel_id: ${{ env.DEVOPS_CHANNEL_ID }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
