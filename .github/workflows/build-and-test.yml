name: Build / Test

on: [push]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Run unit tests
        run: yarn test:unit --coverage
        env:
          MOCHA_FILE: test-results/unit-tests.xml

      - name: Generate coverage report by app
        run: node script/app-coverage-report.js

      - name: Publish test results
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v2
        with:
          check_name: 'Unit Tests Summary'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test-results/unit-tests.xml'

  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Run ESLint
        run: yarn run eslint --ext .js --ext .jsx --output-file eslint-report.json --format json .

      - name: Annotate linting results
        if: ${{ always() }}
        uses: ataylorme/eslint-annotate-action@1.1.2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "eslint-report.json"

      - name: Run Sass linter
        run: yarn lint:sass

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: "us-gov-west-1"

      # - name: Get bot token from Parameter Store
      #   uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
      #   with:
      #     ssm_parameter: /dsva-vagov/pact-broker/utility/PACT_BROKER_BASIC_AUTH_PASSWORD

      # - name: Get Node version
      #   id: get-node-version
      #   run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      # - name: Cache dependencies
      #   id: cache-dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ~/.cache/yarn
      #       node_modules
      #     key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      # - name: Chmod test
      #   run: sudo chmod -R go-w /opt /usr /home

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Run contract tests
        run: yarn test:contract

      - name: Run Pact publish
        run: yarn pact:publish
        # env_variable_name: PACT_BROKER_BASIC_AUTH_PASSWORD
        env:
          PACT_BROKER_BASIC_AUTH_USERNAME: pact-broker
          PACT_BROKER_BASE_URL: https://dev.va.gov/_vfs/pact-broker/

      # - name: Publish test results
      #   if: ${{ always() }}
      #   uses: mikepenz/action-junit-report@v2
      #   with:
      #     check_name: 'Unit Tests Summary'
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     report_paths: 'test-results/unit-tests.xml'