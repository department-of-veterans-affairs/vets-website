name: CI Test Workflow

on:
  push:
    branches:
      - debug-scd-tests-fails
    tags-ignore:
      - '**'

jobs:
  build:
    name: Build
    runs-on: ubuntu-16-cores-latest
    outputs:
      entry_names: ${{ steps.get-changed-apps.outputs.entry_names }}
      continuous_deployment: ${{ steps.get-changed-apps.outputs.continuous_deployment }}

    strategy:
      fail-fast: false
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]

    steps:
      - name: Checkout
        uses: actions/checkout@cd7d8d697e10461458bc61a30d094dc601a8b017
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        if: ${{ matrix.buildtype == 'vagovprod' }}
        uses: ./.github/workflows/configure-aws-credentials
        with:
          aws_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-gov-west-1
              
      - name: Install dependencies
        uses: ./.github/workflows/install
        timeout-minutes: 30
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Get changed applications
        id: get-changed-apps
        uses: ./.github/workflows/get-changed-apps
        with:
          delimiter: ','
          output-type: 'entry_name, continuous_deployment'

      - name: Get Mapbox Token
        if: ${{ matrix.buildtype == 'vagovprod' }}
        uses: ./.github/workflows/inject-secrets
        with:
          ssm_parameter: /dsva-vagov/vets-website/dev/mapbox_token
          env_variable_name: MAPBOX_TOKEN

      - name: Build
        run: yarn build --verbose --buildtype=${{ matrix.buildtype }} ${ENTRY:+"--entry=$ENTRY"}
        timeout-minutes: 30
        env:
          ENTRY: ${{ steps.get-changed-apps.outputs.entry_names }}

      - name: Generate build details
        run: |
          cat > build/${{ matrix.buildtype }}/BUILD.txt << EOF
          BUILDTYPE=${{ matrix.buildtype }}
          NODE_ENV=production
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          CHANGE_TARGET=null
          RUN_ID=${{ github.run_id }}
          RUN_NUMBER=${{ github.run_number }}
          REF=${{ github.sha }}
          BUILDTIME=$(date +%s)
          EOF

      - name: Compress and archive build
        run: tar -C build/${{ matrix.buildtype }} -cjf ${{ matrix.buildtype }}.tar.bz2 .

      - name: Upload build artifact
        uses: ./.github/workflows/upload-artifact
        with:
          name: ${{ matrix.buildtype }}.tar.bz2
          path: ${{ matrix.buildtype }}.tar.bz2
          retention-days: 1

  fetch-allow-lists:
    name: Fetch Test Stability Allow Lists
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@cd7d8d697e10461458bc61a30d094dc601a8b017

      - name: Configure AWS credentials
        uses: ./.github/workflows/configure-aws-credentials
        with:
          aws_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-gov-west-1
          

      - name: Get va-vsp-bot token
        uses: ./.github/workflows/inject-secrets
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Init Dashboard Data Repo
        uses: ./.github/workflows/init-data-repo

      - name: Set Up BigQuery Creds
        uses: ./.github/workflows/configure-bigquery

      - name: Fetch E2E Test Stability Allow List
        run: yarn get-allow-list
        working-directory: qa-standards-dashboard-data
        env:
          TEST_TYPE: e2e

      - name: Fetch Unit Test Stability Allow List
        run: yarn get-allow-list
        working-directory: qa-standards-dashboard-data
        env:
          TEST_TYPE: unit_test

      - name: Archive E2E Test Stability Allow List
        if: ${{ always() }}
        uses: ./.github/workflows/upload-artifact
        with:
          name: e2e-allow-list
          path: qa-standards-dashboard-data/e2e_allow_list.json

      - name: Archive Unit Test Stability Allow List
        if: ${{ always() }}
        uses: ./.github/workflows/upload-artifact
        with:
          name: unit-test-allow-list
          path: qa-standards-dashboard-data/unit_test_allow_list.json

  tests-prep:
    name: Tests Prep
    needs: [fetch-allow-lists]
    runs-on: ubuntu-22.04
    outputs:
      app_folders: ${{ steps.get-changed-apps.outputs.folders }}
      apps-to-stress-test: ${{ steps.apps-to-stress-test.outputs.apps_to_test }}
      unit-tests-to-stress-test: ${{ steps.unit-tests-to-stress-test.outputs.tests }}
      changed-files: ${{ steps.get-changed-apps.outputs.changed_files }}
      disallowed-tests: ${{ steps.disallowed-tests.outputs.tests }}
      cypress-tests: ${{ steps.cypress-tests.outputs.selected }}
      cypress-tests-to-stress-test: ${{ steps.cypress-tests-to-stress-test.outputs.tests }}
      app_urls: ${{ steps.get-changed-apps.outputs.urls }}
      num_containers: ${{ steps.containers.outputs.num }}
      ci_node_index: ${{ steps.matrix.outputs.ci_node_index }}
      changed_file_paths: ${{ steps.get-changed-apps.outputs.changed_files }}
      tests_ran: ${{ steps.tests-ran.outputs.tests_ran }}
      e2e_count: ${{ steps.e2e-count.outputs.count }}
      changed_unit_tests: ${{ steps.unit-tests-changed.outputs.changed_unit_tests }}

    steps:
      - name: Checkout
        uses: actions/checkout@cd7d8d697e10461458bc61a30d094dc601a8b017
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/workflows/install
        timeout-minutes: 30
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Get changed applications
        id: get-changed-apps
        uses: ./.github/workflows/get-changed-apps
        with:
          delimiter: ','
          output-type: 'entry_name, url, folder'

      - name: Download Unit Test Stability Allow List
        uses: ./.github/workflows/download-artifact
        with:
          name: unit-test-allow-list
          path: .

      - name: Download E2E Test Stability Allow List
        uses: ./.github/workflows/download-artifact
        with:
          name: e2e-allow-list
          path: .

      - name: Select E2E Tests
        run: node script/github-actions/select-e2e-tests.js
        env:
          RUN_FULL_SUITE: false
          CHANGED_FILE_PATHS: ${{ steps.get-changed-apps.outputs.changed_files }}
          APP_URLS: ${{ steps.get-changed-apps.outputs.urls }}
          APP_ENTRIES: ${{ steps.get-changed-apps.outputs.entry_names }}
          TEST_TYPE: e2e

      - name: Select Unit Tests
        run: node script/github-actions/select-unit-tests.js
        env:
          CHANGED_FILES: ${{ steps.get-changed-apps.outputs.changed_files }}

      - name: Set output of TESTS_RAN
        if: ${{ always() }}
        id: tests-ran
        run: echo "tests_ran=$TESTS_RAN" >> $GITHUB_OUTPUT

      - name: Set output of DISALLOWED_TESTS
        if: ${{ always() }}
        id: disallowed-tests
        run: echo "tests=$DISALLOWED_TESTS" >> $GITHUB_OUTPUT

      - name: Set output of UNIT_TESTS_TO_STRESS_TEST
        if: ${{ always() }}
        id: unit-tests-to-stress-test
        run: echo "tests=$UNIT_TESTS_TO_STRESS_TEST" >> $GITHUB_OUTPUT

      - name: Set output of UNIT_TESTS_CHANGED
        if: ${{ always() }}
        id: unit-tests-changed
        run: echo "changed_unit_tests=$UNIT_TESTS_CHANGED" >> $GITHUB_OUTPUT

      - name: Upload artifact of Unit Tests to Stress Test
        if: ${{ steps.unit-tests-to-stress-test.outputs.tests == 'true' }}
        uses: ./.github/workflows/upload-artifact
        with:
          name: unit-tests-to-stress-test
          path: unit_tests_to_stress_test.json

      - name: Upload artifact of Unit Tests Changed
        if: ${{ steps.unit-tests-changed.outputs.changed_unit_tests == 'true' }}
        uses: ./.github/workflows/upload-artifact
        with:
          name: changed-unit-tests
          path: changed_unit_tests.json

      - name: Set output of APPS_TO_STRESS_TEST
        if: ${{ always() }}
        id: apps-to-stress-test
        run: echo "apps_to_test=$APPS_TO_STRESS_TEST" >> $GITHUB_OUTPUT
      
      - name: Set output of TESTS
        id: cypress-tests
        run: echo selected=$TESTS >> $GITHUB_OUTPUT

      - name: Upload artifact of Cypress Tests to Test
        if: ${{ steps.cypress-tests.outputs.selected == 'true' }}
        uses: ./.github/workflows/upload-artifact
        with:
          name: e2e-tests-to-test
          path: e2e_tests_to_test.json

      - name: Count Cypress specs
        id: e2e-count
        run: |
          COUNT=$(node -e "console.log(require('./e2e_tests_to_test.json').length)")
          echo "count=$COUNT" >> $GITHUB_OUTPUT

      - name: Set output of CYPRESS_TESTS_TO_STRESS_TEST
        id: cypress-tests-to-stress-test
        run: echo tests=$CYPRESS_TESTS_TO_STRESS_TEST >> $GITHUB_OUTPUT

      - name: Upload artifact of Cypress Tests to Stress Test
        if: ${{ steps.cypress-tests-to-stress-test.outputs.tests == 'true' }}
        uses: ./.github/workflows/upload-artifact
        with:
          name: e2e-tests-to-stress-test
          path: e2e_tests_to_stress_test.json

      - name: Set output of NUM_CONTAINERS
        id: containers
        run: echo num=$NUM_CONTAINERS >> $GITHUB_OUTPUT

      - name: Set output of CI_NODE_INDEX
        id: matrix
        run: echo ci_node_index=$CI_NODE_INDEX >> $GITHUB_OUTPUT

  archive:
    name: Archive
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]

    # needs: [build, tests-prep, cypress-tests, unit-tests, security-audit, linting]
    needs: [build, tests-prep]
    env:
      IS_SINGLE_APP_BUILD: ${{ needs.build.outputs.entry_names != '' }}
    if: always()
    # if: |
    #   always() &&
    #   (needs.cypress-tests.result == 'success' || needs.cypress-tests.result == 'skipped') &&
    #   needs.build.result == 'success' &&
    #   (needs.unit-tests.result == 'success' || needs.unit-tests.result == 'skipped') &&
    #   needs.security-audit.result == 'success' &&
    #   (needs.linting.result == 'success' || needs.linting.result == 'skipped')

    steps:
      - name: Checkout
        uses: actions/checkout@cd7d8d697e10461458bc61a30d094dc601a8b017

      - name: Download build artifact
        uses: ./.github/workflows/download-artifact
        with:
          name: ${{ matrix.buildtype }}.tar.bz2

      - name: Extract build artifact
        if: env.IS_SINGLE_APP_BUILD == 'true'
        run: |
          mkdir -p build/${{ matrix.buildtype }}
          tar -C build/${{ matrix.buildtype }} -xjvf ${{ matrix.buildtype }}.tar.bz2
          rm ${{ matrix.buildtype }}.tar.bz2

      - name: Remove global assets from build
        if: env.IS_SINGLE_APP_BUILD == 'true'
        run: ./script/github-actions/remove-global-assets.sh
        env:
          ENTRY_NAMES: ${{ needs.build.outputs.entry_names }}
          APP_DIRS: ${{ needs.tests-prep.outputs.app_folders }}
          BUILD_DIR: build/${{ matrix.buildtype }}

      - name: Generate build details
        run: |
          cat > BUILD_ARTIFACT.txt << EOF
          IS_SINGLE_APP_BUILD=${{ env.IS_SINGLE_APP_BUILD }}
          IS_CONTINUOUS_DEPLOYMENT_ENABLED=${{ needs.build.outputs.continuous_deployment == 'true' }}
          REF=${{ github.sha }}
          EOF

      - name: Compress and archive single/grouped app build
        if: env.IS_SINGLE_APP_BUILD == 'true'
        run: tar -C build/${{ matrix.buildtype }} -cjf ${{ matrix.buildtype }}.tar.bz2 .

      - name: Configure AWS credentials (1)
        uses: ./.github/workflows/configure-aws-credentials
        with:
          aws_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-gov-west-1
          

      - name: Get AWS IAM role
        uses: ./.github/workflows/inject-secrets
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: ./.github/workflows/configure-aws-credentials
        with:
          aws_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-gov-west-1
          role: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role_duration: 900
          session_name: vsp-frontendteam-githubaction
          

      - name: Upload build
        run: |
          aws s3 cp ${{ matrix.buildtype }}.tar.bz2 s3://vetsgov-website-builds-s3-upload/$GITHUB_SHA/${{ matrix.buildtype }}.tar.bz2 --acl public-read --region us-gov-west-1
          aws s3 cp BUILD_ARTIFACT.txt s3://vetsgov-website-builds-s3-upload-test/build-artifacts/$GITHUB_SHA.txt --acl public-read --region us-gov-west-1

  set-deploy-environments:
    name: Set Environments to Deploy
    needs: [archive, build]
    # if: always() && github.ref == 'refs/heads/main' && needs.archive.result == 'success'
    if: always() && needs.archive.result == 'success'

    runs-on: ubuntu-22.04
    outputs:
      environments: ${{ steps.set-environments.outputs.environments }}
    env:
      DEPLOY_TO_PRODUCTION: true # Enables production deployments for apps on the allowlist when set to true
      DEV: "{
        \\\"environment\\\": \\\"vagovdev\\\",
        \\\"bucket\\\": \\\"dev.va.gov\\\",
        \\\"asset_bucket\\\": \\\"dev-va-gov-assets\\\",
        \\\"iam_role\\\": \\\"AWS_FRONTEND_NONPROD_ROLE\\\"
        }"
      STAGING: "{
        \\\"environment\\\": \\\"vagovstaging\\\",
        \\\"bucket\\\": \\\"staging.va.gov\\\",
        \\\"asset_bucket\\\": \\\"staging-va-gov-assets\\\",
        \\\"iam_role\\\": \\\"AWS_FRONTEND_NONPROD_ROLE\\\"
        }"
    steps:
      - name: Dump outputs as JSON
        run: echo '${{ toJSON(needs.build.outputs) }}'
      - name: Set environments for deploy matrix
        id: set-environments
        run: echo environments={\"include\":[${{env.DEV}},${{env.STAGING}}]} >> $GITHUB_OUTPUT
        
      - name: Debug CD gating values
        run: |
          echo "entry_names=${{ needs.build.outputs.entry_names }}"
          echo "continuous_deployment=${{ needs.build.outputs.continuous_deployment }}"

  cd-prod-deploy:
    name: CD Production Deploy
    runs-on: ubuntu-22.04
    needs: [build, set-deploy-environments]
    if: ${{ needs.build.outputs.entry_names != '' && needs.build.outputs.continuous_deployment == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@cd7d8d697e10461458bc61a30d094dc601a8b017
        with:
          fetch-depth: 0
      - name: Debug job conditions
        run: |
          echo "=== Raw outputs ==="
          echo "needs.build.outputs.entry_names = '${{ needs.build.outputs.entry_names }}'"
          echo "needs.build.outputs.continuous_deployment = '${{ needs.build.outputs.continuous_deployment }}'"
          echo "needs.archive.result = '${{ needs.archive.result }}'"

          echo "=== Condition evaluations ==="
          echo "entry_names != '' => ${{ needs.build.outputs.entry_names != '' }}"
          echo "continuous_deployment == 'true' => ${{ needs.build.outputs.continuous_deployment == 'true' }}"
          echo "continuous_deployment truthy => ${{ needs.build.outputs.continuous_deployment }}"
          echo "archive succeeded => ${{ needs.archive.result == 'success' }}"

          echo "=== Full combined condition ==="
          echo "entry_names != '' && continuous_deployment == 'true' && archive succeeded => ${{ needs.build.outputs.entry_names != '' && needs.build.outputs.continuous_deployment == 'true' && needs.archive.result == 'success' }}"
      - name: Install dependencies
        uses: ./.github/workflows/install
        timeout-minutes: 30
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Get Slack channel
        id: get-slack-channel
        uses: ./.github/workflows/get-changed-apps
        with:
          output-type: 'slack_channel'

      - name: Determine Slack channel
        id: determine-channel
        shell: bash
        run: |
          entries="${{ needs.build.outputs.entry_names }}"
          channel="${{ steps.get-slack-channel.outputs.slack_channels }}"
          if [[ "$entries" == *","* ]]; then
            echo "channel=" >> $GITHUB_OUTPUT
          else
            echo "channel=$channel" >> $GITHUB_OUTPUT
          fi

      - name: Debug CD gating values
        run: |
          echo "entry_names=${{ needs.build.outputs.entry_names }}"
          echo "continuous_deployment=${{ needs.build.outputs.continuous_deployment }}"
          echo "slack_channel=${{ steps.determine-channel.outputs.channel }}"
          echo "== 'true'? ${{ needs.build.outputs.continuous_deployment == 'true' }}"
          echo "== true? ${{ needs.build.outputs.continuous_deployment == true }}"
          echo "empty? ${{ needs.build.outputs.continuous_deployment == '' }}"

      - name: Dispatch Event to Next Workflow
        run: |
          echo ${{ github.ref }}
          echo ${{ needs.build.outputs.entry_names }}
          echo ${{ steps.determine-channel.outputs.channel }}
          echo ${{ steps.build.outputs.continuous_deployment }}
      # - name: Dispatch Event to Next Workflow
      #   run: |
      #     curl -X POST \
      #     -H "Accept: application/vnd.github.v3+json" \
      #     -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #     https://api.github.com/repos/${{ github.repository }}/dispatches \
      #     -d "$(jq -n --arg sha \"${{ github.sha }}\" \
      #     --arg ref \"${{ github.ref }}\" \
      #     --arg entry \"${{ needs.build.outputs.entry_names }}\" \
      #     --arg slack_channel \"${{ steps.determine-channel.outputs.channel }}\" \
      #     '{event_type: \"cd-production-deploy\", client_payload: {github_sha: $sha, github_ref: $ref, entry_app: $entry, slack_channel: $slack_channel}}')"
                         

  