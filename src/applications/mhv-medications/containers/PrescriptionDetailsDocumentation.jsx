import React, { useCallback, useEffect, useState, useRef } from 'react';
import { useParams } from 'react-router-dom-v5-compat';
import { useSelector } from 'react-redux';
import FEATURE_FLAG_NAMES from '@department-of-veterans-affairs/platform-utilities/featureFlagNames';
import PageNotFound from '@department-of-veterans-affairs/platform-site-wide/PageNotFound';
import { updatePageTitle } from '@department-of-veterans-affairs/mhv/exports';
import { focusElement } from '@department-of-veterans-affairs/platform-utilities/ui';
import ApiErrorNotification from '../components/shared/ApiErrorNotification';
import {
  dateFormat,
  generateTextFile,
  generateMedicationsPDF,
  convertHtmlForDownload,
  pharmacyPhoneNumber,
} from '../util/helpers';
import PrintDownload from '../components/shared/PrintDownload';
import { buildMedicationInformationPDF } from '../util/pdfConfigs';
import { DOWNLOAD_FORMAT } from '../util/constants';
import { pageType } from '../util/dataDogConstants';
import BeforeYouDownloadDropdown from '../components/shared/BeforeYouDownloadDropdown';
import CallPharmacyPhone from '../components/shared/CallPharmacyPhone';
import { useGetPrescriptionDocumentationQuery } from '../api/prescriptionsApi';
import usePrescriptionData from '../hooks/usePrescriptionData';

const PrescriptionDetailsDocumentation = () => {
  const { prescriptionId } = useParams();
  const contentRef = useRef();

  const { isDisplayingDocumentation, dob, userName } = useSelector(state => ({
    isDisplayingDocumentation:
      state.featureToggles[
        FEATURE_FLAG_NAMES.mhvMedicationsDisplayDocumentationContent
      ],
    userName: state.user.profile.userFullName,
    dob: state.user.profile.dob,
  }));

  const [isSuccess, setIsSuccess] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const {
    data: htmlContent,
    isLoading: isLoadingDoc,
    error: hasDocApiError,
  } = useGetPrescriptionDocumentationQuery(prescriptionId);

  const {
    prescription,
    error: hasPrescriptionApiError,
    isLoading: isLoadingRx,
  } = usePrescriptionData(prescriptionId);

  const pharmacyPhone = pharmacyPhoneNumber(prescription);

  const buildMedicationInformationTxt = useCallback(
    information => {
      return (
        `${"\nIf you're ever in crisis and need to talk with someone right away, call the Veterans Crisis Line at 988. Then select 1.\n\n\n" +
          `Information: ${prescription.prescriptionName}\n`}${
          userName.first
            ? `${userName.last}, ${userName.first}`
            : userName.last || ' '
        }\n` +
        `We're providing this content from our trusted health care information partner, WebMD, to help you learn more about the medications you're taking. WebMD content is reviewed and approved by medical experts. But this content isn't directly reviewed by VA health care providers and isn't personalized to your use of the medications. If you have any questions about your medications and your specific needs, ask your VA health care team.\n\n\n\n` +
        `Date of birth: ${dateFormat(dob, 'MMMM D, YYYY')}\n\n` +
        `Report generated by My HealtheVet on VA.gov on ${dateFormat(
          Date.now(),
          'MMMM D, YYYY',
        )}\n\n---------------------------------------------------------------------------------\n\n\n` +
        `${information}`
      );
    },
    [userName, dob, prescription],
  );

  useEffect(() => {
    updatePageTitle(`More about this medication | Veteran Affairs`);
  }, []);

  const downloadFile = async format => {
    setIsLoading(true);
    try {
      const formattedText = await convertHtmlForDownload(
        htmlContent,
        format === DOWNLOAD_FORMAT.PDF ? DOWNLOAD_FORMAT.PDF : undefined,
      );

      if (format === DOWNLOAD_FORMAT.PDF) {
        const pdfData = buildMedicationInformationPDF(formattedText);
        const setup = {
          subject: 'Medication Information',
          headerBanner: [
            {
              text:
                'If you’re ever in crisis and need to talk with someone right away, call the Veterans Crisis Line at ',
            },
            {
              text: '988',
              weight: 'bold',
            },
            {
              text: '. Then select 1.',
            },
          ],
          footerRight: 'Page %PAGE_NUMBER% of %TOTAL_PAGES%',
          title: `Medication information: ${prescription?.prescriptionName}`,
          preface: [
            {
              value: `We're providing this content from our trusted health care information partner, WebMD, to help you learn more about the medications you're taking. WebMD content is reviewed and approved by medical experts. But this content isn't directly reviewed by VA health care providers and isn't personalized to your use of the medications. If you have any questions about your medications and your specific needs, ask your VA health care team.`,
            },
          ],
          results: [{ list: [pdfData] }],
        };
        await generateMedicationsPDF(
          'medications',
          `medication-information-${prescription.prescriptionName}-${dateFormat(
            Date.now(),
            'M-D-YYYY',
          ).replace(/\./g, '')}`,
          setup,
        );
      } else {
        const textData = buildMedicationInformationTxt(formattedText);
        generateTextFile(
          textData,
          `medication-information-${prescription.prescriptionName}-${
            userName.first
              ? `${userName.first}-${userName.last}`
              : userName.last
          }-${dateFormat(Date.now(), 'M-D-YYYY').replace(/\./g, '')}`,
        );
      }
      setIsSuccess(true);
    } finally {
      setIsLoading(false);
    }
  };

  const printPage = () => window.print();

  useEffect(
    () => {
      if (!isLoadingDoc && !hasDocApiError && !isLoadingRx) {
        contentRef.current.innerHTML = htmlContent || '';
      }
      focusElement(document.querySelector('h1'));
    },
    [isLoadingDoc, isLoadingRx, hasDocApiError, htmlContent],
  );

  if (!isDisplayingDocumentation) {
    return <PageNotFound />;
  }
  if (hasDocApiError || hasPrescriptionApiError) {
    return (
      <div>
        <h1
          className="vads-u-margin-bottom--2p5"
          data-testid="medication-information-title"
        >
          Medication information
        </h1>
        <ApiErrorNotification
          errorType="access"
          content="medication information"
        />
      </div>
    );
  }
  const introContent = () =>
    htmlContent ? (
      <div>
        <h1 data-testid="medication-information-title" data-dd-privacy="mask">
          Medication information: {prescription?.prescriptionName}
        </h1>
        <PrintDownload
          onPrint={printPage}
          onDownload={downloadFile}
          isSuccess={isSuccess}
          isLoading={isLoading}
        />
        <BeforeYouDownloadDropdown page={pageType.DOCUMENTATION} />
        <div className="no-print rx-page-total-info vads-u-border-bottom--2px vads-u-border-color--gray-lighter vads-u-margin-y--5" />
        <va-on-this-page />
        <p data-testid="medication-information-warning">
          We’re providing this content from our trusted health care information
          partner, WebMD, to help you learn more about the medications you’re
          taking. WebMD content is reviewed and approved by medical experts. But
          this content isn’t directly reviewed by VA health care providers and
          isn’t personalized to your use of the medications. If you have any
          questions about your medications and your specific needs, ask your VA
          health care team.
        </p>
      </div>
    ) : (
      <>
        <h1
          className="vads-u-margin-bottom--2p5"
          data-testid="medication-information-title"
        >
          Medication information
        </h1>
        <div
          data-testid="medication-information-no-info"
          className="vads-u-background-color--gray-lightest vads-u-padding-y--2 vads-u-padding-x--3 vads-u-border-color"
        >
          <h2 className="vads-u-margin--0">
            We’re sorry. We don’t have any information about this medication.
          </h2>
          <p className="vads-u-margin-y--3">
            If you have questions about your prescription, call your VA pharmacy
            <CallPharmacyPhone
              cmopDivisionPhone={pharmacyPhone}
              page={pageType.DETAILS}
            />
            {`${pharmacyPhone ? '.' : ''}`}
          </p>
        </div>
      </>
    );

  return (
    <>
      {isLoadingDoc || isLoadingRx ? (
        <va-loading-indicator
          message="Loading information..."
          set-focus
          data-testid="loading-indicator"
        />
      ) : (
        introContent()
      )}
      {/* NOTE: The HTML content comes from a reliable source (MHV API/Krames API) */}
      <article className="vads-u-padding-bottom--0">
        <div ref={contentRef} />
      </article>
    </>
  );
};

export default PrescriptionDetailsDocumentation;
