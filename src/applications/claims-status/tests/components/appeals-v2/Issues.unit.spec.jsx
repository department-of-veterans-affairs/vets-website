import React from 'react';
import { expect } from 'chai';
import { render } from '@testing-library/react';
import { shallow, mount } from 'enzyme';
import set from 'platform/utilities/data/set';

import Issues from '../../../components/appeals-v2/Issues';
import { addStatusToIssues } from '../../../utils/appeals-v2-helpers';
import { mockData } from '../../../utils/helpers';

describe('<Issues/>', () => {
  const emptyIssues = { issues: addStatusToIssues([]), appealType: 'appeal' };
  const oneOpenIssue = {
    issues: addStatusToIssues(mockData.data[1].attributes.issues),
    appealType: 'legacy appeal',
  };
  const oneClosedIssue = {
    issues: addStatusToIssues([mockData.data[2].attributes.issues[3]]),
    appealType: 'appeal',
  };
  const manyIssues = {
    issues: addStatusToIssues(mockData.data[2].attributes.issues),
    appealType: 'appeal',
  };

  const nonAppealIssues = {
    issues: addStatusToIssues([]),
    appealType: 'supplemental claim',
  };
  const appealIssuesWithoutDescription = {
    issues: addStatusToIssues([
      { lastAction: null, description: '' },
      { lastAction: null, description: null },
      { lastAction: null, description: null },
      { lastAction: 'field_grant', description: null },
      { lastAction: 'field_grant', description: 'Valid description' },
    ]),
    appealType: 'appeal',
  };
  const higherLevelReviewIssuesWithoutDescription = {
    issues: addStatusToIssues([
      { lastAction: 'denied', description: null },
      { lastAction: 'denied', description: 'Valid description' },
    ]),
    appealType: 'higher-level review',
  };

  it('should render', () => {
    const wrapper = shallow(<Issues {...emptyIssues} />);
    expect(wrapper.type()).to.equal('div');
    wrapper.unmount();
  });
  it('should render explanation text', () => {
    const { getByText } = render(<Issues {...emptyIssues} />);
    getByText(
      'The wording of the issues listed on this page is generated by our system. It may look different than the way you identified the issues on your Board Appeal request (VA Form 10182). The ultimate determination of which issues are properly on appeal will be made by a Veterans Law Judge based on careful review of the record and those issues will be clearly identified in the Board decision on your appeal.',
    );
  });
  it('should not render explanation text when it is not appeal', () => {
    const { queryByText } = render(<Issues {...nonAppealIssues} />);
    expect(
      queryByText(
        'The wording of the issues listed on this page is generated by our system. It may look different than the way you identified the issues on your Board Appeal request (VA Form 10182). The ultimate determination of which issues are properly on appeal will be made by a Veterans Law Judge based on careful review of the record and those issues will be clearly identified in the Board decision on your appeal.',
      ),
    ).to.not.exist;
  });
  it('should render no panels when no issues passed in', () => {
    // Note: this probably isn't possible in real-world usage
    const wrapper = shallow(<Issues {...emptyIssues} />);
    expect(wrapper.find('va-accordion-item').length).to.equal(0);
    wrapper.unmount();
  });

  it('should render one panel when only an open issue is passed in', () => {
    const wrapper = shallow(<Issues {...oneOpenIssue} />);
    const openPanel = wrapper.find('va-accordion-item').find('h3');
    const panelName = openPanel.text();
    expect(panelName).to.equal('Currently on appeal');
    wrapper.unmount();
  });

  it('should render one panel when only a closed issue is passed in', () => {
    const wrapper = shallow(<Issues {...oneClosedIssue} />);
    const closedPanel = wrapper.find('va-accordion-item').find('h3');
    const panelName = closedPanel.text();
    expect(panelName).to.equal('Closed');
    wrapper.unmount();
  });

  it('should render two panels when both open *AND* closed issues are passed in', () => {
    const wrapper = shallow(<Issues {...manyIssues} />);
    expect(wrapper.find('va-accordion-item').length).to.equal(2);
    wrapper.unmount();
  });

  it('should render a list of open items when open items exist', () => {
    const props = {
      issues: [{ status: 'open', description: 'test open issue' }],
      appealType: 'appeal',
    };
    const wrapper = mount(<Issues {...props} />);
    const panel = wrapper.find('va-accordion-item');
    expect(panel.find('h3').text()).to.contain('Currently on appeal');
    // no need to click, panel should be auto-expanded
    // open items are in the first ul within the first accordion's content
    const openContentList = panel.find('ul');
    expect(openContentList.find('li').length).to.equal(props.issues.length);
    wrapper.unmount();
  });

  it('should render a list of closed items when items exist', () => {
    const props = {
      issues: [{ status: 'granted', description: 'test closed issue' }],
    };
    const wrapper = mount(<Issues {...props} />);
    const panel = wrapper.find('va-accordion-item');
    expect(panel.find('h3').text()).to.contain('Closed');
    // no need to click, panel should be auto-expanded
    // closed items are in accordion > div > ul > li
    const remandDiv = wrapper.find('va-accordion-item > div');
    expect(remandDiv.find('ul > li').length).to.equal(props.issues.length);
    wrapper.unmount();
  });

  it('should pass auto-expand prop to active panel when both active and closed panels present', () => {
    const wrapper = shallow(<Issues {...manyIssues} />);
    const activePanel = wrapper.find('va-accordion-item').first();
    expect(activePanel.find('h3').text()).to.equal('Currently on appeal');
    expect(activePanel.props().open).to.be.true;
    wrapper.unmount();
  });

  it('should pass auto-expand prop to active panel when only active panel present', () => {
    const wrapper = shallow(<Issues {...oneOpenIssue} />);
    const activePanel = wrapper.find('va-accordion-item');
    expect(activePanel.find('h3').text()).to.equal('Currently on appeal');
    expect(activePanel.props().open).to.be.true;
    wrapper.unmount();
  });

  it('should pass auto-expand prop to closed panel when no active panel present', () => {
    const wrapper = shallow(<Issues {...oneClosedIssue} />);
    const closedPanel = wrapper.find('va-accordion-item').first();
    expect(closedPanel.find('h3').text()).to.equal('Closed');
    expect(closedPanel.props().open).to.be.true;
    wrapper.unmount();
  });

  it('should not pass auto-expand prop to closed panel when active panel present', () => {
    const wrapper = shallow(<Issues {...manyIssues} />);
    const closedPanel = wrapper.find('va-accordion-item').at(1);
    expect(closedPanel.find('h3').text()).to.equal('Closed');
    expect(closedPanel.props().open).to.be.false;
    wrapper.unmount();
  });

  it('should use the word "review" if a Supplemental Claim or Higher-Level Review', () => {
    const props = set('appealType', 'supplemental claim', oneOpenIssue);
    const wrapper = shallow(<Issues {...props} />);
    const activePanel = wrapper.find('va-accordion-item');
    expect(activePanel.find('h3').text()).to.equal('Currently on review');
    wrapper.unmount();
  });

  it('should should mask Issue details in DataDog (no PII)', () => {
    const wrapper = shallow(<Issues {...oneOpenIssue} />);
    expect(wrapper.find('.issue-item').props()['data-dd-privacy']).to.equal(
      'mask',
    );
    wrapper.unmount();
  });

  context('when there are issues without a description', () => {
    context('when the appeal type is appeal', () => {
      it('should render a list item for issues without a description in the necessary section and with the correct appeal type', () => {
        const wrapper = mount(<Issues {...appealIssuesWithoutDescription} />);
        // Should render a list item for 3 issues without description in the open section
        const openPanel = wrapper.find('va-accordion-item').first();
        expect(
          openPanel
            .find('li')
            .last()
            .text(),
        ).to.equal("We're unable to show 3 issues on appeal");
        // Should render a list item for 1 issue without a description in the granted section
        const closedPanel = wrapper.find('va-accordion-item').at(1);
        expect(
          closedPanel
            .find('li')
            .last()
            .text(),
        ).to.equal("We're unable to show 1 issue on appeal");

        wrapper.unmount();
      });
    });
    context('when the appeal type is higher-level review', () => {
      it('should render a list item for issues without a description in the necessary section and with the correct appeal type', () => {
        const wrapper = shallow(
          <Issues {...higherLevelReviewIssuesWithoutDescription} />,
        );
        // Should render a list item for 1 issue without description in the open section
        const openPanel = wrapper.find('va-accordion-item').first();
        expect(
          openPanel
            .find('li')
            .last()
            .text(),
        ).to.equal("We're unable to show 1 issue on your Higher-Level Review");

        wrapper.unmount();
      });
    });
  });
});
