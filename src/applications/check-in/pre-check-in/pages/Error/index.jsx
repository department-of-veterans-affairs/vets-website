import React, { useMemo } from 'react';
import { useSelector } from 'react-redux';
import { Trans, useTranslation } from 'react-i18next';
import { subDays } from 'date-fns';

import fs from 'fs';

import { phoneNumbers } from '../../../utils/appConstants';
import PreCheckInAccordionBlock from '../../../components/PreCheckInAccordionBlock';
import HowToLink from '../../../components/HowToLink';

import { makeSelectVeteranData, makeSelectError } from '../../../selectors';

import Wrapper from '../../../components/layout/Wrapper';

import { getFirstCanceledAppointment } from '../../../utils/appointment';

import './registerStaticFiles';

const PDFDocument = require('pdfkit').default;
const blobStream = require('blob-stream');

const downloadPdf = async () => {
  const doc = new PDFDocument({
    pdfVersion: '1.5',
    lang: 'en-US',
    tagged: true,
    displayTitle: true,
    autoFirstPage: false,
    bufferPages: true,
  });
  const stream = doc.pipe(blobStream());

  // Set some meta data
  doc.info.Title = 'Test Document';
  doc.info.Author = 'Devon Govett';

  // Initialise document logical structure
  const struct = doc.struct('Document');
  doc.addStructure(struct);

  // Register a font name for use later

  let request;
  let font;

  request = await fetch('/generated/bitterboldb64.ttf');
  font = await request.text();
  fs.writeFileSync('bitter-bold.ttf', font);
  doc.registerFont('Bitter-Bold', 'bitter-bold.ttf');

  request = await fetch('/generated/ssp-regb64.ttf');
  font = await request.text();
  fs.writeFileSync('ssp-regular.ttf', font);
  doc.registerFont('Sans', 'ssp-regular.ttf');

  request = await fetch('/generated/ssp-boldb64.ttf');
  font = await request.text();
  fs.writeFileSync('ssp-bold.ttf', font);
  doc.registerFont('Sans-Bold', 'ssp-bold.ttf');

  doc.addPage({
    margin: 50,
  });

  struct.add(
    doc.struct('H1', () => {
      doc
        .font('Bitter-Bold')
        .fontSize(20)
        .text('Lab and test results: Complete blood count on April 18, 2023', {
          paragraphGap: 10,
        });
    }),
  );

  const message =
    "If your results are outside the standard range, this doesn't automatically mean you have a health problem. Your provider will explain what your results mean for your health. If you have questions about your results, contact your VA care team.";
  struct.add(
    doc.struct('P', () => {
      doc
        .font('Sans')
        .fontSize(12)
        .text(message, { paragraphGap: 10 });
    }),
  );

  struct.add(
    doc.struct('H2', () => {
      doc
        .font('Bitter-Bold')
        .fontSize(16)
        .text('Details about this test', { paragraphGap: 10 });
    }),
  );

  const detailsList = doc.struct('L');
  struct.add(detailsList);

  const detailsListItem = doc.struct('LI');
  struct.add(detailsListItem);

  detailsListItem.add(
    doc.struct('Lbl', () => {
      doc.font('Sans-Bold', 12).text('Provider notes', { indent: 10 });
    }),
  );

  detailsListItem.add(
    doc.struct('LBody', () => {
      doc.font('Sans', 12).text('None noted', { indent: 10 });
    }),
  );

  const details = [
    { label: 'Type of test', data: 'Chemistry and hematology' },
    { label: 'Sample tested', data: 'Serum' },
    { label: 'Ordered by', data: 'Beth M. Smith' },
    {
      label: 'Ordering location',
      data: 'DAYTON, OH VAMC 4100 W. THIRD STREE, DAYTON, OH 45428',
    },
    {
      label: 'Collecting location',
      data: 'DAYTON, OH VAMC 4100 W. THIRD STREE, DAYTON, OH 45428',
    },
  ];

  details.forEach(item => {
    struct.add(
      doc.struct('LI', () => {
        doc
          .font('Sans-Bold', 12)
          .lineGap(5)
          .text(`${item.label}: `, { continued: true, indent: 10 })
          .font('Sans', 12)
          .text(item.data, { indent: 50 });
      }),
    );
  });

  detailsList.end();

  // Global Edits to All Pages (Header/Footer, etc)
  const pages = doc.bufferedPageRange();
  for (let i = 0; i < pages.count; i += 1) {
    doc.switchToPage(i);

    // Header: Add page number
    const oldTopMargin = doc.page.margins.top;
    doc.page.margins.top = 0; // Dumb: Have to remove top margin in order to write into it
    doc.text(
      'Roberts, Jesse',
      50,
      oldTopMargin - 30, // Centered vertically in top margin
      { align: 'left' },
    );
    doc.text(
      `Page: ${i + 1} of ${pages.count}`,
      0,
      oldTopMargin - 30, // Centered vertically in top margin
      { align: 'right' },
    );
    doc.page.margins.top = oldTopMargin; // ReProtect top margin

    // Footer: Add page number
    const oldBottomMargin = doc.page.margins.bottom;
    doc.page.margins.bottom = 0; // Dumb: Have to remove bottom margin in order to write into it
    doc.text(
      'Report generated by My HealtheVet and VA on May 1, 2023',
      50,
      doc.page.height - oldBottomMargin / 2, // Centered vertically in bottom margin
      { align: 'left' },
    );
    doc.text(
      `Page: ${i + 1} of ${pages.count}`,
      50,
      doc.page.height - oldBottomMargin / 2, // Centered vertically in bottom margin
      { align: 'right' },
    );
    doc.page.margins.bottom = oldBottomMargin; // ReProtect bottom margin
  }

  doc.end();

  stream.on('finish', () => {
    const pdfUrl = stream.toBlobURL('application/pdf');
    window.open(pdfUrl);
  });
};

const appointmentAccordion = appointments => {
  return (
    <PreCheckInAccordionBlock
      key="accordion"
      errorPage
      appointments={appointments}
    />
  );
};

const Error = () => {
  const selectError = useMemo(makeSelectError, []);
  const { error } = useSelector(selectError);

  // Get appointment dates if available.
  const selectVeteranData = useMemo(makeSelectVeteranData, []);
  const { appointments } = useSelector(selectVeteranData);

  const { t } = useTranslation();

  let header = '';

  let apptType = '';
  if (appointments && appointments.length > 0) {
    apptType = appointments[0]?.kind ?? 'clinic';
  }

  let accordion = null;
  let alertType = '';
  let messageText = '';
  let showHowToLink = false;

  const mixedPhoneAndInPersonMessage = (
    <div>
      <div>
        <span className="fas fa-chevron-right vads-u-margin-left--neg0p5" />
        <span className="appointment-type-label vads-u-margin-left--0p5 vads-u-font-weight--bold">
          {t('in-person-appointment')}
        </span>
      </div>
      <div className="vads-u-margin-top--2">
        {t(
          'you-can-still-check-in-with-your-phone-on-the-day-of-your-appointment',
        )}
      </div>
      <div className="vads-u-margin-top--2">
        <span className="fas fa-chevron-right vads-u-margin-left--neg0p5" />
        <span className="appointment-type-label vads-u-margin-left--0p5 vads-u-font-weight--bold">
          {t('telephone-appointment')}
        </span>
      </div>
      <div className="vads-u-margin-top--2">
        {t('your-provider-will-call-you-at-your-appointment-time')}
      </div>
    </div>
  );

  switch (error) {
    case 'max-validation':
      alertType = 'error';
      header = t('sorry-we-cant-complete-pre-check-in');
      messageText = (
        <>
          <div className="vads-u-margin-bottom--2">
            {t('were-sorry-we-couldnt-match-your-information-to-our-records')}
          </div>
          {mixedPhoneAndInPersonMessage}
        </>
      );
      showHowToLink = false;
      break;
    case 'pre-check-in-post-error':
    case 'error-completing-pre-check-in':
      alertType = 'info';
      header = t('sorry-we-cant-complete-pre-check-in');
      messageText = (
        <>
          <div>
            {t('were-sorry-something-went-wrong-on-our-end-please-try-again')}
          </div>
          <div data-testid="date-message">
            {t('you-can-pre-check-in-online-until-date', {
              date: subDays(new Date(appointments[0].startTime), 1),
            })}
          </div>
        </>
      );
      showHowToLink = apptType === 'clinic';
      break;
    case 'appointment-canceled': {
      alertType = 'info';
      header = t('sorry-pre-check-in-is-no-longer-available');
      // get first appointment that was cancelled?
      const canceledAppointment = getFirstCanceledAppointment(appointments);
      const appointmentDateTime = new Date(canceledAppointment.startTime);
      messageText = (
        <div>
          <p className="vads-u-margin-top--0">
            {t('your-appointment-at-on-is-cancelled', {
              day: appointmentDateTime,
              time: appointmentDateTime,
            })}
          </p>
          <p className="vads-u-margin-top--2">
            <Trans
              i18nKey="if-you-have-questions-please-call-us-were-here-24-7"
              components={[
                <va-telephone
                  contact={phoneNumbers.mainInfo}
                  key={phoneNumbers.mainInfo}
                />,
                <va-telephone contact="711" tty key="711" />,
              ]}
            />
          </p>
          {canceledAppointment?.kind === 'phone' ? (
            ''
          ) : (
            <p className="vads-u-margin-top--2 vads-u-margin-bottom--0">
              {t('or-talk-to-a-staff-member-if-youre-at-a-va-facility')}
            </p>
          )}
        </div>
      );
      showHowToLink = false;
      accordion = appointmentAccordion(appointments);
      break;
    }
    case 'pre-check-in-past-appointment':
      alertType = 'info';
      header = t('sorry-pre-check-in-is-no-longer-available');
      messageText = t('pre-check-in-no-longer-available--info-message');
      showHowToLink = false;
      accordion = appointmentAccordion(appointments);
      break;
    case 'pre-check-in-expired':
      alertType = 'info';
      header = t('sorry-pre-check-in-is-no-longer-available');
      messageText =
        apptType === 'clinic'
          ? t('you-can-still-check-in-once-you-arrive')
          : t('your-provider-will-call-you-at-your-appointment-time');
      accordion = appointmentAccordion(appointments);
      showHowToLink = true;
      break;
    case 'uuid-not-found':
      // Shown when POST sessions returns 404.
      alertType = 'info';
      header = t('were-sorry-this-link-has-expired');
      messageText = mixedPhoneAndInPersonMessage;
      showHowToLink = false;
      break;
    case 'session-error':
    case 'bad-token':
    case 'no-token':
    case 'reload-data-error':
    case 'possible-canceled-appointment':
      // This is considered our generic error message
      alertType = 'info';
      header = t('sorry-we-cant-complete-pre-check-in');
      messageText = mixedPhoneAndInPersonMessage;
      showHowToLink = false;
      break;
    default:
      // should never get here but if it does show the minimum
      alertType = 'error';
      header = t('sorry-we-cant-complete-pre-check-in');
      messageText = (
        <div>
          {t('were-sorry-something-went-wrong-on-our-end-please-try-again')}
        </div>
      );
      showHowToLink = false;
      break;
  }

  return (
    <Wrapper pageTitle={header}>
      <va-alert
        background-only
        show-icon
        status={alertType}
        data-testid="error-message"
      >
        <div>{messageText}</div>
      </va-alert>
      <button
        type="button"
        className="usa-button usa-button-big vads-u-font-size--md"
        onClick={downloadPdf}
        data-testid="download-in-button"
      >
        Print my Error
      </button>
      {showHowToLink && <HowToLink apptType={apptType} />}
      {accordion && <div className="vads-u-margin-top--3">{accordion}</div>}
    </Wrapper>
  );
};

export default Error;
