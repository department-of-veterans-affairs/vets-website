/**
 * This uiSchema is modeled after how addresses are handled in the Profile application, and makes the same pattern
 * available for use inside forms generated by the platform's form system.
 */

import React from 'react';
import AdditionalInfo from '@department-of-veterans-affairs/formation-react/AdditionalInfo';
import ADDRESS_DATA from 'platform/forms/address/data';
import get from 'platform/utilities/data/get';
import {
  countries,
  states50AndDC,
  militaryCities,
} from 'vets-json-schema/dist/constants.json';

/**
 * CONSTANTS:
 * 1. MILITARY_STATES - contains military state codes and names.
 * 2. USA - references USA value and label
 * 3. MilitaryBaseInfo - React component. Wrapped in AdditionalInfo component and used as description
 */

// Corresponding working form schema:
export const addressSchema = {
  type: 'object',
  properties: {
    isMilitary: {
      type: 'boolean',
    },
    'view:livesOnMilitaryBaseInfo': {
      type: 'object',
      properties: {},
    },
    country: {
      type: 'string',
      enum: countries.map(country => country.value),
      enumNames: countries.map(country => country.label),
    },
    addressLine1: {
      type: 'string',
      minLength: 1,
      maxLength: 100,
      pattern: '^.*\\S.*',
    },
    addressLine2: {
      type: 'string',
      minLength: 1,
      maxLength: 100,
      pattern: '^.*\\S.*',
    },
    addressLine3: {
      type: 'string',
      minLength: 1,
      maxLength: 100,
      pattern: '^.*\\S.*',
    },
    city: {
      type: 'string',
    },
    state: {
      type: 'string',
    },
    postalCode: {
      type: 'string',
    },
  },
};
const MILITARY_STATES = Object.entries(ADDRESS_DATA.states).reduce(
  (militaryStates, [stateCode, stateName]) => {
    if (ADDRESS_DATA.militaryStates.includes(stateCode)) {
      return {
        ...militaryStates,
        [stateCode]: stateName,
      };
    }
    return militaryStates;
  },
  {},
);

const USA = {
  value: 'USA',
  label: 'United States',
};

const MilitaryBaseInfo = () => (
  <div className="vads-u-padding-x--2p5">
    <AdditionalInfo
      status="info"
      triggerText="Learn more about military base addresses"
    >
      <span>
        The United States is automatically chosen as your country if you live on
        a military base outside of the country.
      </span>
    </AdditionalInfo>
  </div>
);

/**
 * @param {string} path - path to the address in formData, may contain [INDEX] as part of it, which needs to be handled using insertArrayIndex
 * @param {string} checkBoxTitle - Visual label for the military base checkbox. Ex: "I live on a United States military base outside of the U.S."
 * @param {function} callback - slots into ui:required for the necessary fields
 *
 * Conventions:
 * 1. formDataPath - path to entire address property in formData, after accounting for potential array nesting. Derived from the path parameter
 * 2. get(formDataPath, formData) - returns the address property, often destructured with const {country, isMilitary} = get(formDataPath, formData)
 *
 * Examples:
 * 1. Path to Address nested in array - childrenToAdd[INDEX].childAddressInfo.address
 */

export const addressUiSchema = (path, checkBoxTitle, callback) => {
  // Used when addresses are nested in an array and need to be assessible.
  const insertArrayIndex = (key, index) => key.replace('[INDEX]', `[${index}]`);
  // the address is nested in an array, handle index
  const getPath = (pathToData, index) =>
    typeof index === 'number'
      ? insertArrayIndex(pathToData, index)
      : pathToData;

  return (function returnAddressUI() {
    return {
      isMilitary: {
        'ui:title': checkBoxTitle,
      },
      'view:livesOnMilitaryBaseInfo': {
        'ui:description': MilitaryBaseInfo,
      },
      country: {
        'ui:required': callback,
        'ui:title': 'Country',
        'ui:options': {
          updateSchema: (formData, schema, uiSchema, index) => {
            const formDataPath = getPath(path, index);
            const countryUI = uiSchema;
            const addressFormData = get(formDataPath, formData);
            const { isMilitary } = addressFormData;
            // if isMilitary === true, auto select United States and disable the field
            if (isMilitary) {
              countryUI['ui:disabled'] = true;
              addressFormData.country = USA.value;
              return {
                enum: [USA.value],
                enumNames: [USA.label],
                default: USA.value,
              };
            }
            // default to regular country select dropdown
            countryUI['ui:disabled'] = false;
            return {
              type: 'string',
              enum: countries.map(country => country.value),
              enumNames: countries.map(country => country.label),
            };
          },
        },
      },
      addressLine1: {
        'ui:required': callback,
        'ui:title': 'Street',
        'ui:errorMessages': {
          required: 'Street address is required',
          pattern: 'Street address must be under 100 characters',
        },
      },
      addressLine2: {
        'ui:title': 'Line 2',
      },
      addressLine3: {
        'ui:title': 'Line 3',
      },
      city: {
        'ui:required': callback,
        'ui:errorMessages': {
          required: 'City is required',
          pattern: 'City must be under 100 characters',
        },
        'ui:options': {
          replaceSchema: (formData, schema, uiSchema, index) => {
            const formDataPath = getPath(path, index);
            const { isMilitary } = get(formDataPath, formData);
            if (isMilitary) {
              return {
                type: 'string',
                title: 'APO/FPO/DPO',
                enum: militaryCities.map(city => city.value),
                enumNames: militaryCities.map(city => city.label),
              };
            }
            return {
              type: 'string',
              title: 'City',
              minLength: 1,
              maxLength: 100,
              pattern: '^.*\\S.*',
            };
          },
        },
      },
      state: {
        'ui:required': (formData, index) => {
          // Only required if the country is the United States;
          const formDataPath = getPath(path, index);
          const { country } = get(formDataPath, formData);
          return country && country === USA.value;
        },
        'ui:errorMessages': {
          required: 'Please enter a valid State, Province, or Region',
        },
        'ui:options': {
          replaceSchema: (formData, schema, uiSchema, index) => {
            const formDataPath = getPath(path, index);
            const { country, isMilitary } = get(formDataPath, formData);
            if (isMilitary) {
              return {
                type: 'string',
                title: 'State',
                enum: Object.keys(MILITARY_STATES),
                enumNames: Object.values(MILITARY_STATES),
              };
            } else if (!isMilitary && country === 'USA') {
              return {
                type: 'string',
                title: 'State',
                enum: states50AndDC.map(state => state.value),
                enumNames: states50AndDC.map(state => state.label),
              };
            } else {
              return {
                type: 'string',
                title: 'State/Province/Region',
              };
            }
          },
        },
      },
      postalCode: {
        'ui:required': callback,
        'ui:title': 'Postal Code',
        'ui:errorMessages': {
          required: 'Postal code is required',
          pattern: 'Please enter a valid US zip code',
        },
        'ui:options': {
          widgetClassNames: 'usa-input-medium',
          replaceSchema: (formData, schema, uiSchema, index) => {
            const formDataPath = getPath(path, index);
            const { country, isMilitary } = get(formDataPath, formData);
            if (isMilitary || country === 'USA') {
              return {
                type: 'string',
                pattern: '(\\d{5})(?:[-](\\d{4}))?$',
              };
            } else {
              return {
                type: 'string',
              };
            }
          },
        },
      },
    };
  })();
};
