import React, { useEffect } from 'react';
import PropTypes from 'prop-types';
import { useDispatch, useSelector } from 'react-redux';
import { useParams } from 'react-router-dom';
import { generatePdf } from '@department-of-veterans-affairs/platform-pdf/exports';
import moment from 'moment';
import { dateFormat, processList } from '../util/helpers';
import ItemList from '../components/shared/ItemList';
import { getConditionDetails } from '../actions/conditions';
import { setBreadcrumbs } from '../actions/breadcrumbs';
import PrintHeader from '../components/shared/PrintHeader';
import PrintDownload from '../components/shared/PrintDownload';

const ConditionDetails = () => {
  const conditionDetails = useSelector(
    state => state.mr.conditions.conditionDetails,
  );
  const { conditionId } = useParams();
  const dispatch = useDispatch();

  useEffect(
    () => {
      if (conditionId) dispatch(getConditionDetails(conditionId));
    },
    [conditionId, dispatch],
  );
  const formattedDate = dateFormat(
    conditionDetails?.date,
    'MMMM D, YYYY [at] h:mm z',
  );

  useEffect(
    () => {
      if (conditionDetails?.name) {
        dispatch(
          setBreadcrumbs(
            [
              {
                url: '/my-health/medical-records/health-conditions',
                label: 'Conditions',
              },
            ],
            {
              url: `/my-health/medical-records/health-conditions/${conditionId}`,
              label: conditionDetails?.name,
            },
          ),
        );
      }
    },
    [conditionDetails, dispatch],
  );

  const generateConditionDetails = async () => {
    const pdfData = {
      headerLeft: 'Roberts, Jesse',
      headerRight: 'Date of birth: January 1, 1970',
      footerLeft: `Report generated by My HealtheVet and VA on ${moment().format(
        'LL',
      )}`,
      footerRight: 'Page %PAGE_NUMBER% of %TOTAL_PAGES%',
      title: `Conditions: ${conditionDetails.name} on ${formattedDate}`,
      subject: 'VA Medical Record',
      preface:
        'Your VA conditions list may not be complete. If you have any questions about your information, visit the FAQs or contact your VA Health care team.',
      results: {
        items: [
          {
            items: [
              {
                title: 'Date',
                value:
                  moment(conditionDetails.date).format('MMMM Do YYYY') || ' ',
                inline: true,
              },
              {
                title: 'Provider',
                value: conditionDetails.provider || ' ',
                inline: true,
              },
              {
                title: 'Provider Notes',
                value: conditionDetails.comments.length
                  ? processList(conditionDetails.comments)
                  : 'none noted',
                inline: !conditionDetails.comments.length,
              },
              {
                title: 'Status of health condition',
                value: conditionDetails.active ? 'active' : 'inactive',
                inline: true,
              },
              {
                title: 'Location',
                value: conditionDetails.facility || ' ',
                inline: true,
              },
              {
                title: 'SNOMED Clinical term',
                value: conditionDetails.name || ' ',
                inline: true,
              },
            ],
          },
        ],
      },
    };

    try {
      await generatePdf('medicalRecords', 'conditions_report', pdfData);
    } catch (error) {
      // Error logging/presentation goes here...
    }
  };

  const download = () => {
    generateConditionDetails();
  };

  const content = () => {
    if (conditionDetails) {
      return (
        <>
          <PrintHeader />
          <h1 className="vads-u-margin-bottom--0">
            {conditionDetails.name.split(' (')[0]}
          </h1>
          <section className="set-width-486">
            <div className="condition-subheader vads-u-margin-bottom--3">
              <div className="time-header">
                <h2 className="vads-u-font-size--base vads-u-font-family--sans">
                  Date and time entered:{' '}
                  <span className="vads-u-font-weight--normal">
                    {formattedDate}
                  </span>
                </h2>
              </div>
              <PrintDownload list download={download} />
            </div>
            <div className="condition-details max-80">
              <h2 className="vads-u-font-size--base vads-u-font-family--sans">
                Status of health condition
              </h2>
              <p>{conditionDetails.active ? 'Active' : 'Inactive'}</p>
              <h2 className="vads-u-font-size--base vads-u-font-family--sans">
                Provider
              </h2>
              <p>{conditionDetails.provider}</p>
              <h2 className="vads-u-font-size--base vads-u-font-family--sans">
                Location
              </h2>
              <p>
                {conditionDetails.facility ||
                  'There is no facility reported at this time'}
              </p>
              <h2 className="vads-u-font-size--base vads-u-font-family--sans">
                SNOMED Clinical term
              </h2>
              <p>{conditionDetails.name}</p>
              <h2 className="vads-u-margin-bottom--0">Provider notes</h2>
              <ItemList list={conditionDetails.comments} />
            </div>
          </section>
        </>
      );
    }

    return (
      <va-loading-indicator
        message="Loading..."
        setFocus
        data-testid="loading-indicator"
        class="loading-indicator"
      />
    );
  };

  return (
    <div className="vads-l-grid-container vads-u-padding-x--0 vads-u-margin-bottom--5">
      {content()}
    </div>
  );
};

export default ConditionDetails;

ConditionDetails.propTypes = {
  print: PropTypes.func,
};
