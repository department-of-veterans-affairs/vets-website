import React from 'react';
import PropTypes from 'prop-types';
import { formatDateLong } from '@department-of-veterans-affairs/platform-utilities/exports';
import { generatePdf } from '@department-of-veterans-affairs/platform-pdf/exports';
import moment from 'moment';
import { useSelector } from 'react-redux';
import PrintHeader from '../shared/PrintHeader';
import { mhvUrl } from '~/platform/site-wide/mhv/utilities';
import { isAuthenticatedWithSSOe } from '~/platform/user/authentication/selectors';
import PrintDownload from '../shared/PrintDownload';
import { nameFormat, dateFormat, sendErrorToSentry } from '../../util/helpers';

const PathologyDetails = props => {
  const { record, fullState } = props;
  const formattedDate = formatDateLong(record?.date);
  const user = useSelector(state => state.user.profile);
  const name = nameFormat(user.userFullName);
  const dob = dateFormat(user.dob, 'LL');

  const generatePathologyPdf = async () => {
    const pdfData = {
      headerLeft: name,
      headerRight: `Date of birth: ${dob}`,
      headerBanner: [
        {
          text:
            'If you’re ever in crisis and need to talk with someone right away, call the Veterans Crisis line at 988. Then select 1.',
        },
      ],
      footerLeft: `Report generated by My HealtheVet and VA on ${moment().format(
        'LL',
      )}`,
      footerRight: 'Page %PAGE_NUMBER% of %TOTAL_PAGES%',
      title: `Lab and test results: Pathology on ${dateFormat(
        record.date,
        'LLL',
      )}`,
      subject: 'VA Medical Record',
      preface:
        'If you have any questions about these results, send a secure message to your care team.',
      results: {
        sectionSeparators: false,
        items: [
          {
            header: 'Details about this test',
            items: [
              {
                title: 'Sample tested',
                value: record.sampleFrom || ' ',
                inline: true,
              },
              {
                title: 'Lab location',
                value: record.labLocation || ' ',
                inline: true,
              },
              {
                title: 'Date completed',
                value: moment(record.date).format('LL') || ' ',
                inline: true,
              },
            ],
          },
          {
            header: 'Results',
            items: [
              {
                title: '',
                value: record.results,
                inline: true,
              },
            ],
          },
        ],
      },
    };

    try {
      await generatePdf('medicalRecords', 'Pathology_report', pdfData);
    } catch (error) {
      sendErrorToSentry(error, 'Pathology details');
    }
  };

  const content = () => {
    if (record) {
      return (
        <>
          <PrintHeader />
          <h1 className="vads-u-margin-bottom--0">{record.name}</h1>
          <section className="set-width-486">
            <div className="time-header">
              <h2 className="vads-u-font-size--base vads-u-font-family--sans">
                Date:{' '}
                <span className="vads-u-font-weight--normal">
                  {formattedDate}
                </span>
              </h2>
            </div>
            <div className="no-print">
              <PrintDownload list download={generatePathologyPdf} />
              <va-additional-info trigger="What to know about downloading records">
                <ul>
                  <li>
                    <strong>If you’re on a public or shared computer,</strong>{' '}
                    print your records instead of downloading. Downloading will
                    save a copy of your records to the public computer.
                  </li>
                  <li>
                    <strong>If you use assistive technology,</strong> a Text
                    file (.txt) may work better for technology such as screen
                    reader, screen enlargers, or Braille displays.
                  </li>
                </ul>
              </va-additional-info>
            </div>
            <div className="test-details-container max-80">
              <h4>Details about this test</h4>
              <h3 className="vads-u-font-size--base vads-u-font-family--sans">
                Sample tested
              </h3>
              <p>{record.sampleTested}</p>
              <h3 className="vads-u-font-size--base vads-u-font-family--sans">
                Lab location
              </h3>
              <p>{record.labLocation}</p>
              <h3 className="vads-u-font-size--base vads-u-font-family--sans">
                Date completed
              </h3>
              <p>{formattedDate}</p>
            </div>
            <div className="test-results-container">
              <h4>Results</h4>
              <va-additional-info
                trigger="Need help understanding your results?"
                class="no-print"
              >
                <p>
                  Your provider will review your results and explain what they
                  mean for your health. To ask a question now, send a secure
                  message to your care team.
                </p>
                <p>
                  <a
                    href={mhvUrl(
                      isAuthenticatedWithSSOe(fullState),
                      'secure-messaging',
                    )}
                    target="_blank"
                    rel="noreferrer"
                  >
                    Start a new message
                  </a>
                </p>
              </va-additional-info>
              <p>{record.results}</p>
            </div>
          </section>
        </>
      );
    }
    return <></>;
  };

  return (
    <div className="vads-l-grid-container vads-u-padding-x--0 vads-u-margin-bottom--5">
      {content()}
    </div>
  );
};

export default PathologyDetails;

PathologyDetails.propTypes = {
  fullState: PropTypes.object,
  record: PropTypes.object,
};
