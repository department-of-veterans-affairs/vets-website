import { expect } from 'chai';
import sinon from 'sinon';
import { pdfPrinter, txtPrinter } from '../../util/printHelper';
import * as pdfHelpers from '../../util/pdfHelpers/labsAndTests';
import * as helpers from '../../util/helpers';

// Mock dependencies
const mockUser = {
  dob: '1980-01-01',
  userFullName: {
    first: 'John',
    last: 'Doe',
  },
};

const mockRecord = {
  name: 'Lab Test',
  date: '2025-04-10',
  testCode: '12345',
  sampleTested: 'Blood',
  bodySite: 'Arm',
  orderedBy: 'Dr. Smith',
  location: 'VA Hospital',
  comments: 'No issues',
  result: 'Positive',
  observations: [
    {
      testCode: 'Observation 1',
      value: { text: '5.0' },
      referenceRange: '4.0-6.0',
      status: 'Normal',
      bodySite: 'Leg',
      sampleTested: 'Urine',
      comments: 'All good',
    },
  ],
};

// TODO: more detailed tests when requirements are ironed how what to display with not data
describe('printHelper', () => {
  describe('pdfPrinter', () => {
    it('should generate PDF data with correct structure', () => {
      const generateLabsIntroStub = sinon
        .stub(pdfHelpers, 'generateLabsIntro')
        .returns({
          title: 'Lab Report',
          subject: 'Lab Details',
          subtitles: ['Subtitle 1'],
        });
      const generatePdfScaffoldStub = sinon
        .stub(pdfHelpers, 'generatePdfScaffold')
        .returns({
          header: 'Header',
          footer: 'Footer',
        });
      const generateGenericContentStub = sinon
        .stub(pdfHelpers, 'generateGenericContent')
        .returns({
          content: 'Generic Content',
        });

      const result = pdfPrinter({ record: mockRecord, user: mockUser });
      // get todays date formated as Month, Day, Year
      const today = new Date();
      const options = {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      };
      const formattedDate = today.toLocaleDateString('en-US', options);
      const formattedFooter = `Report generated by My HealtheVet on VA.gov on ${formattedDate}`;

      expect(result.title).to.include('VA-labs-and-tests-details-John-Doe-');
      expect(result.body).to.deep.equal({
        headerLeft: 'Doe, John',
        headerRight: 'Date of birth: January 1, 1980',
        headerBanner: [
          {
            text:
              'If youâ€™re ever in crisis and need to talk with someone right away, call the Veterans Crisis Line at ',
          },
          {
            text: '988',
            weight: 'bold',
          },
          {
            text: '. Then select 1.',
          },
        ],
        footerLeft: formattedFooter,
        footerRight: 'Page %PAGE_NUMBER% of %TOTAL_PAGES%',
        title: 'Lab Report',
        subject: 'Lab Details',
        subtitles: ['Subtitle 1'],
        content: 'Generic Content',
      });

      generateLabsIntroStub.restore();
      generatePdfScaffoldStub.restore();
      generateGenericContentStub.restore();
    });
  });

  describe('txtPrinter', () => {
    it('should generate TXT data with correct structure', () => {
      const formatNameFirstLastStub = sinon
        .stub(helpers, 'formatNameFirstLast')
        .returns('John Doe');
      const formatUserDobStub = sinon
        .stub(helpers, 'formatUserDob')
        .returns('01/01/1980');
      const getNameDateAndTimeStub = sinon
        .stub(helpers, 'getNameDateAndTime')
        .returns('2025-04-10');

      const result = txtPrinter({ record: mockRecord, user: mockUser });

      expect(result.title).to.include('VA-labs-and-tests-details');
      expect(result.body).to.include('Lab Test');
      expect(result.body).to.include('John Doe');
      expect(result.body).to.include('Date of birth');
      expect(result.body).to.include('Results:');
      expect(result.body).to.include('Observation 1');
      expect(result.body).to.include('5.0');

      formatNameFirstLastStub.restore();
      formatUserDobStub.restore();
      getNameDateAndTimeStub.restore();
    });
  });
});
