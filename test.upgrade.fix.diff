diff --git a/src/applications/facility-locator/actions/index.js b/src/applications/facility-locator/actions/index.js
index f66ac600f..8bb90a52e 100644
--- a/src/applications/facility-locator/actions/index.js
+++ b/src/applications/facility-locator/actions/index.js
@@ -24,7 +24,7 @@ import environments from '../../../platform/utilities/environment';
 */
 let mbxClient;
 
-if (environments.isStaging()) {
+if (true) {
   const mbxGeo = require('@mapbox/mapbox-sdk/services/geocoding');
   mbxClient = mbxGeo(mapboxClient);
 } else {
@@ -211,12 +211,12 @@ export const genBBoxFromAddress = query => {
     /**
       New sdk requires types to be an array otherwise string
      */
-    let types = environments.isStaging()
+    let types = true
       ? ['place', 'region', 'postcode', 'locality']
       : 'place,region,postcode,locality';
     // check for postcode search
     if (query.searchString.match(/^\s*\d{5}\s*$/)) {
-      if (environments.isStaging()) {
+      if (true) {
         types = ['postcode'];
       } else {
         types = 'postcode';
@@ -226,7 +226,7 @@ export const genBBoxFromAddress = query => {
     /**
      * New SDk uses forwardGeocode fn to make the API call(promise)
      */
-    if (environments.isStaging()) {
+    if (true) {
       mbxClient
         .forwardGeocode({
           countries: ['us', 'pr', 'ph', 'gu', 'as', 'mp'],
diff --git a/src/applications/facility-locator/components/MapboxClient.js b/src/applications/facility-locator/components/MapboxClient.js
index ebdb6f765..5227dab47 100644
--- a/src/applications/facility-locator/components/MapboxClient.js
+++ b/src/applications/facility-locator/components/MapboxClient.js
@@ -13,7 +13,7 @@ import environments from '../../../platform/utilities/environment';
  MapboxClient1 : New SDK
  MapboxClient2 : Current SDK
 */
-export const mapboxClient = environments.isStaging()
+export const mapboxClient = true
   ? new MapboxClient1({ accessToken: mapboxToken })
   : new MapboxClient2(mapboxToken);
 
diff --git a/src/applications/facility-locator/containers/VAMap.jsx b/src/applications/facility-locator/containers/VAMap.jsx
index e290b7fcf..7ea8dfddd 100644
--- a/src/applications/facility-locator/containers/VAMap.jsx
+++ b/src/applications/facility-locator/containers/VAMap.jsx
@@ -37,7 +37,7 @@ import environments from '../../../platform/utilities/environment';
  */
 let mbxClient;
 
-if (environments.isStaging()) {
+if (true) {
   const mbxGeo = require('@mapbox/mapbox-sdk/services/geocoding');
   mbxClient = mbxGeo(mapboxClient);
 } else {
@@ -297,13 +297,13 @@ class VAMap extends Component {
    *  @param position Has shape: `{latitude: x, longitude: y}`
    */
   genBBoxFromCoords = position => {
-    if (environments.isStaging()) {
+    if (true) {
       /**
        * New SDk uses forwardGeocode fn to make the API call(promise)
        */
       mbxClient
-        .forwardGeocode({
-          position,
+        .reverseGeocode({
+          query: [position.longitude, position.latitude],
           types: ['address'],
         })
         .send()
@@ -593,7 +593,6 @@ class VAMap extends Component {
       currentQuery.facilityType === LocationType.CC_PROVIDER
         ? urgentCareLink
         : otherToolsLink;
-
     return (
       <div className="desktop-container">
         <div>
diff --git a/src/applications/facility-locator/utils/mapHelpers.js b/src/applications/facility-locator/utils/mapHelpers.js
index 4f7a18fe0..9dfe26e18 100644
--- a/src/applications/facility-locator/utils/mapHelpers.js
+++ b/src/applications/facility-locator/utils/mapHelpers.js
@@ -7,7 +7,7 @@ import environments from '../../../platform/utilities/environment';
  */
 let mbxClient;
 
-if (environments.isStaging()) {
+if (true) {
   const mbxGeo = require('@mapbox/mapbox-sdk/services/geocoding');
   mbxClient = mbxGeo(mapboxClient);
 } else {
@@ -63,25 +63,21 @@ export const reverseGeocode = async (lon, lat) => {
   /**
    * New sdk requires types to be an array otherwise string
    */
-  const types = environments.isStaging()
-    ? ['address', 'postcode']
-    : 'address,postcode';
+  const types = true ? ['address', 'postcode'] : 'address,postcode';
 
   /**
    * New SDk uses reverseGeocode fn
    * //https://github.com/mapbox/mapbox-sdk-js/blob/master/docs/services.md#reversegeocode
    * current SDK geocodeReverse fn
    */
-  if (environments.isStaging()) {
+  if (true) {
     const response = await mbxClient
       .reverseGeocode({ query: [lon, lat], types })
       .send()
       .catch();
     const {
-      entity: {
-        features: {
-          0: { place_name: placeName },
-        },
+      features: {
+        0: { place_name: placeName },
       },
     } = response.body;
 
