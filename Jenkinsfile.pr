def envNames = ['development', 'staging', 'production']

def isReviewable = {
  env.BRANCH_NAME != 'production' &&
    env.BRANCH_NAME != 'master'
}

env.CONCURRENCY = 10

def isDeployable = {
  (env.BRANCH_NAME == 'master' ||
    env.BRANCH_NAME == 'production') &&
    !env.CHANGE_TARGET
}

def buildDetails = { vars ->
  """
    BUILDTYPE=${vars['buildtype']}
    NODE_ENV=production
    BRANCH_NAME=${env.BRANCH_NAME}
    CHANGE_TARGET=${env.CHANGE_TARGET}
    BUILD_ID=${env.BUILD_ID}
    BUILD_NUMBER=${env.BUILD_NUMBER}
  """.stripIndent()
}

def notify = { message, color='good' ->
    
}

node('docker') {
  def dockerImage, args

  // Checkout source, create output directories, build container

  stage('Setup') {
    try {
      checkout scm

      sh "mkdir -p build"
      sh "mkdir -p logs/selenium"
      sh "mkdir -p coverage"

      def imageTag = java.net.URLDecoder.decode(env.BUILD_TAG).replaceAll("[^A-Za-z0-9\\-\\_]", "-")

      dockerImage = docker.build("vets-website:${imageTag}")
      args = "-v ${pwd()}/build:/application/build -v ${pwd()}/logs:/application/logs -v ${pwd()}/coverage:/application/coverage"
    } catch (error) {
      notify("vets-website ${env.BRANCH_NAME} branch CI failed in setup stage!", 'danger')
      throw error
    }
  }

  // Check package.json for known vulnerabilities

  stage('Security') {
    try {
      dockerImage.inside(args) {
        sh "export HOME=/home/jenkins ; cd /application && nsp check"
      }
    } catch (error) {
      notify("vets-website ${env.BRANCH_NAME} branch CI failed in security stage!", 'danger')
      throw error
    }
  }

  // Check source for syntax issues

  stage('Lint') {
    try {
      dockerImage.inside(args) {
        sh "export HOME=/home/jenkins; cd /application && npm --no-color run lint"
      }
    } catch (error) {
      notify("vets-website ${env.BRANCH_NAME} branch CI failed in lint stage!", 'danger')
      throw error
    }
  }

  stage('Unit') {
    try {
      dockerImage.inside(args) {
        sh "export HOME=/home/jenkins; cd /application && npm --no-color run test:coverage"
        sh "export HOME=/home/jenkins; cd /application && CODECLIMATE_REPO_TOKEN=fe4a84c212da79d7bb849d877649138a9ff0dbbef98e7a84881c97e1659a2e24 codeclimate-test-reporter < ./coverage/lcov.info"
      }
    } catch (error) {
      notify("vets-website ${env.BRANCH_NAME} branch CI failed in unit stage!", 'danger')
      throw error
    }
  }

  // Perform a build for each required build type

  stage('Build') {
    try {
      def buildList = ['production']

      if (env.BRANCH_NAME == 'master') {
        buildList << 'staging'
        buildList << 'development'
      }

      def builds = [:]

      for (int i=0; i<envNames.size(); i++) {
        def envName = envNames.get(i)

        if (buildList.contains(envName)) {
          builds[envName] = {
            dockerImage.inside(args) {
              sh "export HOME=/home/jenkins; cd /application && npm --no-color run build -- --buildtype=${envName}"
              sh "export HOME=/home/jenkins; cd /application && echo \"${buildDetails('buildtype': envName)}\" > build/${envName}/BUILD.txt"
            }
          }
        } else {
          builds[envName] = {
            println "Build '${envName}' not required, skipped."
          }
        }
      }
  
      parallel builds
    } catch (error) {
      notify("vets-website ${env.BRANCH_NAME} branch CI failed in build stage!", 'danger')
      throw error
    }
  }

  // Run E2E and accessibility tests

  stage('Integration') {

    try {
      parallel (
        e2e: {
          dockerImage.inside(args + " -e BUILDTYPE=production") {
            sh "export HOME=/home/jenkins; Xvfb :99 & cd /application && DISPLAY=:99 npm --no-color run test:e2e"
          }
        },

        accessibility: {
          dockerImage.inside(args + " -e BUILDTYPE=production") {
            sh "export HOME=/home/jenkins; Xvfb :98 & cd /application && DISPLAY=:98 npm --no-color run test:accessibility"
          }
        }
      )
    } catch (error) {
      notify("vets-website ${env.BRANCH_NAME} branch CI failed in integration stage!", 'danger')
      throw error
    } finally {
      step([$class: 'JUnitResultArchiver', testResults: 'logs/nightwatch/**/*.xml'])
    }
  }
}
