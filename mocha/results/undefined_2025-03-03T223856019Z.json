{
  "stats": {
    "suites": 27,
    "tests": 47,
    "passes": 46,
    "pending": 1,
    "failures": 0,
    "start": "2025-03-03T22:38:56.074Z",
    "end": "2025-03-03T22:38:56.341Z",
    "duration": 267,
    "testsRegistered": 47,
    "passPercent": 100,
    "pendingPercent": 2.127659574468085,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6efa5ff8-27fe-4abc-a913-78c37b541ad4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook: beforeEach in \"{root}\"",
          "fullTitle": "\"before each\" hook: beforeEach in \"{root}\"",
          "timedOut": false,
          "duration": 2,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cov_5fzq6lsur().f[20]++;\ncov_5fzq6lsur().s[70]++;\nsetupJSDom();\ncov_5fzq6lsur().s[71]++;\nresetFetch();\ncov_5fzq6lsur().s[72]++;\ncleanupStorage();\ncov_5fzq6lsur().s[73]++;\nif (isStressTest == 'false') {\n  cov_5fzq6lsur().b[12][0]++;\n  cov_5fzq6lsur().s[74]++;\n  checkAllowList(this);\n} else {\n  cov_5fzq6lsur().b[12][1]++;\n}\ncov_5fzq6lsur().s[75]++;\nif ((cov_5fzq6lsur().b[14][0]++, process.env.CI) || (cov_5fzq6lsur().b[14][1]++, ['trace', 'debug'].includes(process.env.LOG_LEVEL))) {\n  cov_5fzq6lsur().b[13][0]++;\n  cov_5fzq6lsur().s[76]++;\n  console.log('running: ', this.currentTest.file.slice(this.currentTest.file.indexOf('src')));\n} else {\n  cov_5fzq6lsur().b[13][1]++;\n}",
          "err": {},
          "uuid": "1e1bc726-bded-4518-8fc0-53193e2cbf1c",
          "parentUUID": "6efa5ff8-27fe-4abc-a913-78c37b541ad4",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook: afterEach in \"{root}\"",
          "fullTitle": "\"after each\" hook: afterEach in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cov_5fzq6lsur().f[21]++;\ncov_5fzq6lsur().s[77]++;\ncleanupStorage();\ncov_5fzq6lsur().s[78]++;\nflushPromises();",
          "err": {},
          "uuid": "bcdf7fe2-7ee1-4cbf-aace-f3fe704e0f7b",
          "parentUUID": "6efa5ff8-27fe-4abc-a913-78c37b541ad4",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "(0, _pure.cleanup)();",
          "err": {},
          "uuid": "5cf2f25c-7819-492b-9e69-4f72d4b3e327",
          "parentUUID": "6efa5ff8-27fe-4abc-a913-78c37b541ad4",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "5a216f6d-e021-4483-9517-e32d39e80da2",
          "title": "getScheduledDowntime",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/actions.unit.spec.js",
          "file": "/src/platform/monitoring/DowntimeNotification/tests/actions.unit.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getScheduledDowntime\"",
              "fullTitle": "getScheduledDowntime \"before each\" hook in \"getScheduledDowntime\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "global.window.dataLayer = [];\n(0, _helpers.mockFetch)();",
              "err": {},
              "uuid": "1cb20855-519b-44fa-8c17-197d9ccf037e",
              "parentUUID": "5a216f6d-e021-4483-9517-e32d39e80da2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getScheduledDowntime\"",
              "fullTitle": "getScheduledDowntime \"after each\" hook in \"getScheduledDowntime\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dispatch.reset();",
              "err": {},
              "uuid": "bf296516-f8ee-4bed-a7c5-e3f43d553019",
              "parentUUID": "5a216f6d-e021-4483-9517-e32d39e80da2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "dispatches the correct actions and maps the data correctly",
              "fullTitle": "getScheduledDowntime dispatches the correct actions and maps the data correctly",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var actionCreator = (0, _actions.getScheduledDowntime)();\nvar description = 'This is a description';\nvar startTime = new Date().toISOString();\nvar endTime = new Date(new Date().valueOf() + 24 * 60 * 24 * 1000).toISOString();\nvar raw = {\n  data: [{\n    id: '139',\n    type: 'maintenance_windows',\n    attributes: {\n      externalService: 'appeals',\n      description: description,\n      startTime: startTime,\n      endTime: endTime\n    }\n  }, {\n    id: '139',\n    type: 'maintenance_windows',\n    attributes: {\n      externalService: 'mhv',\n      description: description,\n      startTime: startTime,\n      endTime: endTime\n    }\n  }]\n};\nvar state = {};\n(0, _helpers.setFetchJSONResponse)(global.fetch, raw);\nactionCreator(dispatch, state).then(function () {\n  var _dispatch$args = _slicedToArray(dispatch.args, 2),\n    firstArgs = _dispatch$args[0],\n    secondArgs = _dispatch$args[1];\n  var firstAction = firstArgs[0];\n  var secondAction = secondArgs[0];\n  (0, _chai.expect)(firstAction.type).to.be.equal(_actions.RETRIEVE_SCHEDULED_DOWNTIME, 'RETRIEVE_SCHEDULED_DOWNTIME was dispatched');\n  (0, _chai.expect)(secondAction.type).to.be.equal(_actions.RECEIVE_SCHEDULED_DOWNTIME, 'RECEIVE_SCHEDULED_DOWNTIME was dispatched');\n}).then(done, done);",
              "err": {},
              "uuid": "59d800b1-9a8f-41b5-a9a7-820100c01add",
              "parentUUID": "5a216f6d-e021-4483-9517-e32d39e80da2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59d800b1-9a8f-41b5-a9a7-820100c01add"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b7c9b2c7-cc2f-4142-a7d6-2e454da81a96",
          "title": "<Down>",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/Down.unit.spec.jsx",
          "file": "/src/platform/monitoring/DowntimeNotification/tests/Down.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<Down> should render",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(\"div\", null, /*#__PURE__*/_react.default.createElement(_Down.default, {\n    appType: \"test\",\n    headerLevel: 2\n  }))),\n  container = _render.container;\nvar header = (0, _index.$)('h2', container);\n(0, _chai.expect)(header).to.exist;\n(0, _chai.expect)(header.textContent).to.eq('This test is down for maintenance');\n(0, _chai.expect)((0, _index.$)('p', container).textContent).to.contain('We’re making some updates to this test to help make it');",
              "err": {},
              "uuid": "b944a3d1-f550-48bd-8718-9cb472d474ed",
              "parentUUID": "b7c9b2c7-cc2f-4142-a7d6-2e454da81a96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render new appType & headerLevel",
              "fullTitle": "<Down> should render new appType & headerLevel",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(\"div\", null, /*#__PURE__*/_react.default.createElement(_Down.default, {\n    appType: \"foo\",\n    headerLevel: 1\n  }))),\n  container = _render2.container;\nvar header = (0, _index.$)('h1', container);\n(0, _chai.expect)(header).to.exist;\n(0, _chai.expect)(header.textContent).to.eq('This foo is down for maintenance');\n(0, _chai.expect)((0, _index.$)('h2', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('p', container).textContent).to.contain('We’re making some updates to this foo to help make it');",
              "err": {},
              "uuid": "a9a353ae-979d-4701-a3d9-5ff60b581923",
              "parentUUID": "b7c9b2c7-cc2f-4142-a7d6-2e454da81a96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b944a3d1-f550-48bd-8718-9cb472d474ed",
            "a9a353ae-979d-4701-a3d9-5ff60b581923"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b6612ba7-a257-475f-93c9-44691c8752bc",
          "title": "mapStateToProps",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
          "file": "/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set shouldSendRequest to true when scheduled downtime is not ready and a request is not pending",
              "fullTitle": "mapStateToProps should set shouldSendRequest to true when scheduled downtime is not ready and a request is not pending",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var scheduledDowntime = {\n  isReady: false,\n  isPending: false,\n  dismissedDowntimeWarnings: []\n};\nvar ownProps = {\n  appTitle: 'test app',\n  dependencies: ['Service A']\n};\nvar props = (0, _DowntimeNotification.mapStateToProps)({\n  scheduledDowntime: scheduledDowntime\n}, ownProps);\n(0, _chai.expect)(props.shouldSendRequest).to.be.true;\n(0, _chai.expect)(props.status).to.be.undefined;",
              "err": {},
              "uuid": "1d220055-79fc-4096-badc-201f00e42865",
              "parentUUID": "b6612ba7-a257-475f-93c9-44691c8752bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have properties of a downtime object if downtime is found",
              "fullTitle": "mapStateToProps should have properties of a downtime object if downtime is found",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var serviceMap = (0, _helpers.createServiceMap)([{\n  attributes: {\n    externalService: 'myservice',\n    startTime: (0, _moment.default)().toISOString(),\n    endTime: (0, _moment.default)().add(1, 'day').toISOString()\n  }\n}]);\nvar scheduledDowntime = {\n  isReady: true,\n  isPending: false,\n  dismissedDowntimeWarnings: [],\n  serviceMap: serviceMap\n};\nvar ownProps = {\n  appTitle: 'My app',\n  dependencies: ['myservice']\n};\nvar props = (0, _DowntimeNotification.mapStateToProps)({\n  scheduledDowntime: scheduledDowntime\n}, ownProps);\n(0, _chai.expect)(props).to.include.all.keys(['externalService', 'status', 'startTime', 'endTime']);",
              "err": {},
              "uuid": "7443534b-de6d-4027-b273-95c790908d9f",
              "parentUUID": "b6612ba7-a257-475f-93c9-44691c8752bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d220055-79fc-4096-badc-201f00e42865",
            "7443534b-de6d-4027-b273-95c790908d9f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7694f49d-9fef-4b4f-8465-156a3a1906e1",
          "title": "<DowntimeNotification/>",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
          "file": "/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "calls getGlobalDowntime and getScheduledDowntime when rendered",
              "fullTitle": "<DowntimeNotification/> calls getGlobalDowntime and getScheduledDowntime when rendered",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  dependencies: [],\n  getScheduledDowntime: _sinon.default.spy(),\n  getGlobalDowntime: _sinon.default.spy()\n};\ngetComponent(props);\n// expect(props.getGlobalDowntime.calledOnce).to.be.true;\n(0, _chai.expect)(props.getScheduledDowntime.calledOnce).to.be.true;",
              "err": {},
              "uuid": "5dbbbccb-c775-4dd7-8cce-5558798827bf",
              "parentUUID": "7694f49d-9fef-4b4f-8465-156a3a1906e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "1ebd196b-3d45-469d-8b56-815a55804837",
              "title": "No impending downtime",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
              "file": "/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render the children components when there are no dependencies",
                  "fullTitle": "<DowntimeNotification/> No impending downtime should render the children components when there are no dependencies",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var wrapper = getComponent();\nwrapper.setProps({\n  isReady: true\n});\n(0, _chai.expect)(wrapper.text()).to.contain(innerText, 'The message was rendered.');",
                  "err": {},
                  "uuid": "8ed7f02e-131b-4f72-b296-41f7c446d599",
                  "parentUUID": "1ebd196b-3d45-469d-8b56-815a55804837",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render the children components when dependencies have no downtime",
                  "fullTitle": "<DowntimeNotification/> No impending downtime should render the children components when dependencies have no downtime",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var wrapper = getComponent([_index.externalServices.mvi]);\nwrapper.setProps({\n  isReady: true\n});\n(0, _chai.expect)(wrapper.text()).to.contain(innerText, 'The message was rendered.');",
                  "err": {},
                  "uuid": "ea66f2f1-30fc-4f4c-b838-b75fb4804a46",
                  "parentUUID": "1ebd196b-3d45-469d-8b56-815a55804837",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ed7f02e-131b-4f72-b296-41f7c446d599",
                "ea66f2f1-30fc-4f4c-b838-b75fb4804a46"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ae2182eb-9c08-4c79-96ab-4da0e8c5de0c",
              "title": "Approaching downtime",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
              "file": "/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render the children and a Modal when downtime is approaching",
                  "fullTitle": "<DowntimeNotification/> Approaching downtime should render the children and a Modal when downtime is approaching",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var wrapper = getComponent({\n  dependencies: [_index.externalServices.mhv]\n});\nwrapper.setProps({\n  isReady: true,\n  initializeDowntimeWarnings: function initializeDowntimeWarnings() {},\n  startTime: (0, _moment.default)(),\n  endTime: (0, _moment.default)(),\n  status: _index.externalServiceStatus.downtimeApproaching\n});\nvar downtimeApproaching = wrapper.find('DowntimeApproaching').dive();\nvar innerWrapper = downtimeApproaching.find('DowntimeNotificationWrapper').dive();\n(0, _chai.expect)(innerWrapper.text()).to.contain(innerText, 'The message was rendered');\n(0, _chai.expect)(innerWrapper.find(\"[data-status=\\\"\".concat(_index.externalServiceStatus.downtimeApproaching, \"\\\"]\"))).to.have.lengthOf(1, 'The correct status was rendered');\n(0, _chai.expect)(innerWrapper.find(_reactBindings.VaModal)).to.have.lengthOf(1, 'Authenticated users will see a modal');",
                  "err": {},
                  "uuid": "109fb843-ee02-4bca-b100-35a8f4d871a1",
                  "parentUUID": "ae2182eb-9c08-4c79-96ab-4da0e8c5de0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "109fb843-ee02-4bca-b100-35a8f4d871a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d0d96bfb-75a0-4462-8890-34d18797c65c",
              "title": "In downtime",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
              "file": "/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not render the children when we are in downtime and instead show an AlertBox",
                  "fullTitle": "<DowntimeNotification/> In downtime should not render the children when we are in downtime and instead show an AlertBox",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "2b53a5af-0b2e-4d78-a8af-6ab4ee1ef788",
                  "parentUUID": "d0d96bfb-75a0-4462-8890-34d18797c65c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "2b53a5af-0b2e-4d78-a8af-6ab4ee1ef788"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "3bda1724-182b-4b75-acfe-3b91d3df3066",
              "title": "custom render",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
              "file": "/src/platform/monitoring/DowntimeNotification/tests/DowntimeNotification.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "allows a custom render property",
                  "fullTitle": "<DowntimeNotification/> custom render allows a custom render property",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var render = function render(downtime, children) {\n  return /*#__PURE__*/_react.default.createElement(\"div\", null, /*#__PURE__*/_react.default.createElement(\"h1\", null, \"Custom render for status \", downtime.status), children);\n};\nvar props = {\n  dependencies: [_index.externalServices.mhv],\n  render: render\n};\nvar wrapper = getComponent(props);\nwrapper.setProps({\n  isReady: true,\n  status: _index.externalServiceStatus.down\n});\nvar text = wrapper.text();\n(0, _chai.expect)(text).to.contain(\"Custom render for status \".concat(_index.externalServiceStatus.down), 'Custom render works');\n(0, _chai.expect)(text).to.contain(innerText, 'Custom render passes children nodes');",
                  "err": {},
                  "uuid": "606ee073-8402-496a-bb12-56251f404016",
                  "parentUUID": "3bda1724-182b-4b75-acfe-3b91d3df3066",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "606ee073-8402-496a-bb12-56251f404016"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "5dbbbccb-c775-4dd7-8cce-5558798827bf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d171ea02-06a7-4e8a-b33e-b32aa9ae3df5",
          "title": "getStatusForTimeframe",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/helpers.unit.spec.js",
          "file": "/src/platform/monitoring/DowntimeNotification/tests/helpers.unit.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "assigns a status according to timeframe",
              "fullTitle": "getStatusForTimeframe assigns a status according to timeframe",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _chai.expect)(downtimeHelpers.getStatusForTimeframe(pastDowntime.attributes.startTime, pastDowntime.attributes.endTime)).to.equal(_externalServiceStatus.default.ok);\n(0, _chai.expect)(downtimeHelpers.getStatusForTimeframe(activeDowntime.attributes.startTime, activeDowntime.attributes.endTime)).to.equal(_externalServiceStatus.default.down);\n(0, _chai.expect)(downtimeHelpers.getStatusForTimeframe(approachingDowntime.attributes.startTime, approachingDowntime.attributes.endTime)).to.equal(_externalServiceStatus.default.downtimeApproaching);\n(0, _chai.expect)(downtimeHelpers.getStatusForTimeframe(lessUrgentApproachingDowntime.attributes.startTime, lessUrgentApproachingDowntime.attributes.endTime)).to.equal(_externalServiceStatus.default.downtimeApproaching);\n(0, _chai.expect)(downtimeHelpers.getStatusForTimeframe(distantFutureDowntime.attributes.startTime, distantFutureDowntime.attributes.endTime)).to.equal(_externalServiceStatus.default.ok);",
              "err": {},
              "uuid": "00cd5f7a-9722-418d-8c89-bf3e5aa754b0",
              "parentUUID": "d171ea02-06a7-4e8a-b33e-b32aa9ae3df5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00cd5f7a-9722-418d-8c89-bf3e5aa754b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "97aa5b59-576c-486c-a276-ac708cb3976a",
          "title": "createGlobalMaintenanceWindow",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/helpers.unit.spec.js",
          "file": "/src/platform/monitoring/DowntimeNotification/tests/helpers.unit.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "generates a \"/maintenance_windows\" response for each downed service",
              "fullTitle": "createGlobalMaintenanceWindow generates a \"/maintenance_windows\" response for each downed service",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var globalMaintWindow = downtimeHelpers.createGlobalMaintenanceWindow({\n  startTime: startTime,\n  endTime: endTime,\n  externalServices: {\n    mvi: 'mvi'\n  }\n});\n(0, _chai.expect)(globalMaintWindow.length).to.eql(2);\n(0, _chai.expect)(globalMaintWindow[0]).to.eql(globalWindow);\n(0, _chai.expect)(globalMaintWindow[1]).to.eql({\n  attributes: {\n    externalService: 'mvi',\n    startTime: startTime,\n    endTime: endTime\n  }\n});",
              "err": {},
              "uuid": "7705e361-0ce2-45c6-812f-cc1c09cbbf96",
              "parentUUID": "97aa5b59-576c-486c-a276-ac708cb3976a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "uses the default external services when none are provided",
              "fullTitle": "createGlobalMaintenanceWindow uses the default external services when none are provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var globalMaintWindow = downtimeHelpers.createGlobalMaintenanceWindow({\n  startTime: startTime,\n  endTime: endTime\n});\n// The +1 is to account for the global service\n(0, _chai.expect)(globalMaintWindow.length).to.eql(Object.keys(_externalServices.default).length + 1);",
              "err": {},
              "uuid": "7b43eb67-99d7-440b-a2b3-d41333305453",
              "parentUUID": "97aa5b59-576c-486c-a276-ac708cb3976a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7705e361-0ce2-45c6-812f-cc1c09cbbf96",
            "7b43eb67-99d7-440b-a2b3-d41333305453"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "1931ea2e-3629-45e1-9438-5a7917ce1317",
          "title": "createServiceMap",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/helpers.unit.spec.js",
          "file": "/src/platform/monitoring/DowntimeNotification/tests/helpers.unit.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "creates a map using the attributes.externalService property as keys",
              "fullTitle": "createServiceMap creates a map using the attributes.externalService property as keys",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var serviceMap = downtimeHelpers.createServiceMap(maintenanceWindows);\nvar evss = serviceMap.get('evss');\nvar vic = serviceMap.get('vic');\nvar mvi = serviceMap.get('mvi');\nvar appeals = serviceMap.get('appeals');\n(0, _chai.expect)(evss.status).to.equal(_externalServiceStatus.default.down);\n(0, _chai.expect)(vic.status).to.equal(_externalServiceStatus.default.ok);\n(0, _chai.expect)(mvi.status).to.equal(_externalServiceStatus.default.downtimeApproaching);\n(0, _chai.expect)(appeals.status).to.equal(_externalServiceStatus.default.downtimeApproaching);",
              "err": {},
              "uuid": "e0fbc267-4576-488d-8243-7bff00e1b469",
              "parentUUID": "1931ea2e-3629-45e1-9438-5a7917ce1317",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e0fbc267-4576-488d-8243-7bff00e1b469"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7245c038-cbfd-445a-b16a-9f4c80112f46",
          "title": "getMostUrgentDowntime",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/helpers.unit.spec.js",
          "file": "/src/platform/monitoring/DowntimeNotification/tests/helpers.unit.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"getMostUrgentDowntime\"",
              "fullTitle": "getMostUrgentDowntime \"before all\" hook in \"getMostUrgentDowntime\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "serviceMap = downtimeHelpers.createServiceMap(maintenanceWindows);",
              "err": {},
              "uuid": "1a45ec21-f97e-47c5-acb5-33c12aa76948",
              "parentUUID": "7245c038-cbfd-445a-b16a-9f4c80112f46",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns null when all services are ok",
              "fullTitle": "getMostUrgentDowntime returns null when all services are ok",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _chai.expect)(downtimeHelpers.getSoonestDowntime(serviceMap, ['dslogon', 'vic'])).to.be.null;",
              "err": {},
              "uuid": "34ef9c7a-edb9-4984-85ef-3021fcf9f5f4",
              "parentUUID": "7245c038-cbfd-445a-b16a-9f4c80112f46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns the status with the soonest startTime and endTime that is not in the past",
              "fullTitle": "getMostUrgentDowntime returns the status with the soonest startTime and endTime that is not in the past",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var evss = downtimeHelpers.getSoonestDowntime(serviceMap, ['dslogon', 'evss', 'vic', 'mvi']);\n(0, _chai.expect)(evss.status).to.equal(_externalServiceStatus.default.down);\n(0, _chai.expect)(evss.externalService).to.equal('evss');\nvar mvi = downtimeHelpers.getSoonestDowntime(serviceMap, ['dslogon', 'vic', 'mvi', 'appeals']);\n(0, _chai.expect)(mvi.status).to.equal(_externalServiceStatus.default.downtimeApproaching);\n(0, _chai.expect)(mvi.externalService).to.equal('mvi');\nvar appeals = downtimeHelpers.getSoonestDowntime(serviceMap, ['dslogon', 'vic', 'appeals']);\n(0, _chai.expect)(appeals.status).to.equal(_externalServiceStatus.default.downtimeApproaching);\n(0, _chai.expect)(appeals.externalService).to.equal('appeals');",
              "err": {},
              "uuid": "7fc1f95b-b3d2-4607-9b66-0ad0d4956328",
              "parentUUID": "7245c038-cbfd-445a-b16a-9f4c80112f46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34ef9c7a-edb9-4984-85ef-3021fcf9f5f4",
            "7fc1f95b-b3d2-4607-9b66-0ad0d4956328"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "093b34d0-e98a-4e84-a26c-112ae3cb1b97",
          "title": "getCurrentGlobalDowntime",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/helpers.unit.spec.js",
          "file": "/src/platform/monitoring/DowntimeNotification/tests/helpers.unit.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getCurrentGlobalDowntime\"",
              "fullTitle": "getCurrentGlobalDowntime \"before each\" hook in \"getCurrentGlobalDowntime\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.mockFetch)();",
              "err": {},
              "uuid": "665e4102-5255-4066-8ad9-08f52f3fb1aa",
              "parentUUID": "093b34d0-e98a-4e84-a26c-112ae3cb1b97",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns downtime when in the middle of a downtime",
              "fullTitle": "getCurrentGlobalDowntime returns downtime when in the middle of a downtime",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "6f2d87fc-0c58-4204-ae6f-9a3372e3e60f",
              "parentUUID": "093b34d0-e98a-4e84-a26c-112ae3cb1b97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns null when not within any downtimes",
              "fullTitle": "getCurrentGlobalDowntime returns null when not within any downtimes",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "b41999c9-780c-4770-908d-e1fdb8409893",
              "parentUUID": "093b34d0-e98a-4e84-a26c-112ae3cb1b97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns null when there are no downtimes",
              "fullTitle": "getCurrentGlobalDowntime returns null when there are no downtimes",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "c9f4751f-f25d-4de4-aa0b-df0445525da5",
              "parentUUID": "093b34d0-e98a-4e84-a26c-112ae3cb1b97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns null when failing to get downtimes",
              "fullTitle": "getCurrentGlobalDowntime returns null when failing to get downtimes",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "744014e3-1457-428e-9011-7603d2501e2b",
              "parentUUID": "093b34d0-e98a-4e84-a26c-112ae3cb1b97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6f2d87fc-0c58-4204-ae6f-9a3372e3e60f",
            "b41999c9-780c-4770-908d-e1fdb8409893",
            "c9f4751f-f25d-4de4-aa0b-df0445525da5",
            "744014e3-1457-428e-9011-7603d2501e2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a2e2da49-8758-46bd-9d77-4ff8ee86049b",
          "title": "Downtime Notification Reducer",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/reducer.unit.spec.js",
          "file": "/src/platform/monitoring/DowntimeNotification/tests/reducer.unit.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9d7e90ff-19bd-42fc-b786-9512eedc0f32",
              "title": "scheduledDowntime",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/reducer.unit.spec.js",
              "file": "/src/platform/monitoring/DowntimeNotification/tests/reducer.unit.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns the initial state",
                  "fullTitle": "Downtime Notification Reducer scheduledDowntime returns the initial state",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _reducer.default)(undefined, {\n  type: 'SHOULD_NOT_MATTER'\n});\n(0, _chai.expect)(result).to.have.all.keys(scheduledDowntimeInterface);",
                  "err": {},
                  "uuid": "63e0b66e-ef47-48d9-a1f9-33cd7ae9f225",
                  "parentUUID": "9d7e90ff-19bd-42fc-b786-9512eedc0f32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "flips the isReady flag and sets value when RECEIVE_SCHEDULED_DOWNTIME is dispatched",
                  "fullTitle": "Downtime Notification Reducer scheduledDowntime flips the isReady flag and sets value when RECEIVE_SCHEDULED_DOWNTIME is dispatched",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = {\n  type: _actions.RECEIVE_SCHEDULED_DOWNTIME,\n  data: []\n};\nvar result = (0, _reducer.default)(undefined, action);\n(0, _chai.expect)(result).to.have.all.keys(scheduledDowntimeInterface);\n(0, _chai.expect)(result.serviceMap).to.be.instanceof(Map);",
                  "err": {},
                  "uuid": "c2ca6663-be02-4ee6-8ac3-3cee1efa69de",
                  "parentUUID": "9d7e90ff-19bd-42fc-b786-9512eedc0f32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "657c79e8-6be0-4219-9c5c-607a01f77514",
                  "title": "globalDowntime",
                  "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/DowntimeNotification/tests/reducer.unit.spec.js",
                  "file": "/src/platform/monitoring/DowntimeNotification/tests/reducer.unit.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "updates global downtime when received",
                      "fullTitle": "Downtime Notification Reducer scheduledDowntime globalDowntime updates global downtime when received",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var state = (0, _reducer.default)(undefined, {\n  type: _actions.RECEIVE_GLOBAL_DOWNTIME,\n  downtime: downtime\n});\n(0, _chai.expect)(state.globalDowntime.startTime).to.equal(downtime.startTime);\n(0, _chai.expect)(state.globalDowntime.endTime).to.equal(downtime.endTime);",
                      "err": {},
                      "uuid": "0e2290bb-1d80-4c6d-84ac-870f0769a3d4",
                      "parentUUID": "657c79e8-6be0-4219-9c5c-607a01f77514",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "updates global downtime independently of scheduled downtime",
                      "fullTitle": "Downtime Notification Reducer scheduledDowntime globalDowntime updates global downtime independently of scheduled downtime",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var initialState = {\n  globalDowntime: null,\n  isPending: false,\n  isReady: false,\n  serviceMap: null\n};\nvar state = (0, _reducer.default)(initialState, {\n  type: _actions.RECEIVE_GLOBAL_DOWNTIME,\n  downtime: downtime\n});\n(0, _chai.expect)(state.isPending).to.be.false;\n(0, _chai.expect)(state.isReady).to.be.false;\n(0, _chai.expect)(state.serviceMap).to.be.null;",
                      "err": {},
                      "uuid": "499b36f9-e863-4ced-8b73-fb00409b1c32",
                      "parentUUID": "657c79e8-6be0-4219-9c5c-607a01f77514",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0e2290bb-1d80-4c6d-84ac-870f0769a3d4",
                    "499b36f9-e863-4ced-8b73-fb00409b1c32"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [
                "63e0b66e-ef47-48d9-a1f9-33cd7ae9f225",
                "c2ca6663-be02-4ee6-8ac3-3cee1efa69de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7bc44b0b-1d0c-4fea-b229-ce9b5c6e9c46",
          "title": "External services actions",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/external-services/tests/actions.unit.spec.js",
          "file": "/src/platform/monitoring/external-services/tests/actions.unit.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ab838292-c296-4d7d-8f93-4520ecbae80c",
              "title": "getBackendStatuses",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/external-services/tests/actions.unit.spec.js",
              "file": "/src/platform/monitoring/external-services/tests/actions.unit.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle a success response",
                  "fullTitle": "External services actions getBackendStatuses should handle a success response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = {\n  data: {\n    attributes: {\n      statuses: [{\n        service: 'Master Veterans Index (MVI)',\n        serviceId: 'mvi',\n        status: 'active',\n        lastIncidentTimestamp: '2019-07-09T07:00:40.000-04:00'\n      }]\n    }\n  }\n};\n(0, _helpers.mockApiRequest)(response);\nvar dispatch = _sinon.default.spy();\nreturn (0, _actions.getBackendStatuses)()(dispatch).then(function () {\n  (0, _chai.expect)(dispatch.firstCall.args[0].type).to.equal(_actions.LOADING_BACKEND_STATUSES);\n  (0, _chai.expect)(dispatch.secondCall.args[0]).to.eql({\n    type: _actions.FETCH_BACKEND_STATUSES_SUCCESS,\n    data: response.data\n  });\n});",
                  "err": {},
                  "uuid": "959e3793-e137-43cb-8697-a92903f3fc73",
                  "parentUUID": "ab838292-c296-4d7d-8f93-4520ecbae80c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle an error response",
                  "fullTitle": "External services actions getBackendStatuses should handle an error response",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = {\n  data: {\n    attributes: {\n      code: 400\n    }\n  }\n};\n(0, _helpers.mockApiRequest)(response, false);\nvar dispatch = _sinon.default.spy();\nreturn (0, _actions.getBackendStatuses)()(dispatch).then(function () {\n  (0, _chai.expect)(dispatch.firstCall.args[0].type).to.equal(_actions.LOADING_BACKEND_STATUSES);\n  (0, _chai.expect)(dispatch.secondCall.args[0].type).to.equal(_actions.FETCH_BACKEND_STATUSES_FAILURE);\n});",
                  "err": {},
                  "uuid": "9ce0c5e9-bb60-403a-baa3-c607c4f2c612",
                  "parentUUID": "ab838292-c296-4d7d-8f93-4520ecbae80c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "959e3793-e137-43cb-8697-a92903f3fc73",
                "9ce0c5e9-bb60-403a-baa3-c607c4f2c612"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "df68f104-a951-48dc-b117-a172320fc20f",
          "title": "<ExternalServicesError>",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/external-services/tests/ExternalServiceError.unit.spec.jsx",
          "file": "/src/platform/monitoring/external-services/tests/ExternalServiceError.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get backend statuses when mounted",
              "fullTitle": "<ExternalServicesError> should get backend statuses when mounted",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.mount)(/*#__PURE__*/_react.default.createElement(_ExternalServicesError.ExternalServicesError, _extends({}, props, {\n  shouldGetBackendStatuses: true\n})));\n(0, _chai.expect)(props.getBackendStatuses.calledOnce).to.be.true;\nwrapper.unmount();",
              "err": {},
              "uuid": "359a073c-ca93-445b-aec8-408d64488cdb",
              "parentUUID": "df68f104-a951-48dc-b117-a172320fc20f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render anything when services are up",
              "fullTitle": "<ExternalServicesError> should not render anything when services are up",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var onRender = _sinon.default.spy();\nvar dependencies = ['mvi'];\nvar statuses = [{\n  serviceId: 'mvi',\n  status: 'active'\n}];\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_ExternalServicesError.ExternalServicesError, _extends({}, props, {\n  dependencies: dependencies,\n  statuses: statuses,\n  onRender: onRender\n}), /*#__PURE__*/_react.default.createElement(\"div\", {\n  id: \"error-message\"\n})));\n(0, _chai.expect)(wrapper.find('#error-message').exists()).to.be.false;\n(0, _chai.expect)(onRender.calledOnce).to.be.false;\nwrapper.unmount();",
              "err": {},
              "uuid": "5a7e0b89-94b0-4e50-b02f-1064724e70d2",
              "parentUUID": "df68f104-a951-48dc-b117-a172320fc20f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5905642c-7790-44a8-b866-f2411ddeddc6",
              "title": "when services are down",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/external-services/tests/ExternalServiceError.unit.spec.jsx",
              "file": "/src/platform/monitoring/external-services/tests/ExternalServiceError.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render anything",
                  "fullTitle": "<ExternalServicesError> when services are down should render anything",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_ExternalServicesError.ExternalServicesError, _extends({}, props, {\n  dependencies: ['mvi'],\n  statuses: [{\n    serviceId: 'mvi',\n    status: 'down'\n  }]\n}), /*#__PURE__*/_react.default.createElement(\"div\", {\n  id: \"error-message\"\n})));\n(0, _chai.expect)(wrapper.find('#error-message').exists()).to.be.true;\nwrapper.unmount();",
                  "err": {},
                  "uuid": "8fc080dc-7500-46bc-8991-466c42cf7915",
                  "parentUUID": "5905642c-7790-44a8-b866-f2411ddeddc6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trigger a callback",
                  "fullTitle": "<ExternalServicesError> when services are down should trigger a callback",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var onRender = _sinon.default.spy();\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_ExternalServicesError.ExternalServicesError, _extends({}, props, {\n  dependencies: ['mvi'],\n  statuses: [{\n    serviceId: 'mvi',\n    status: 'down'\n  }],\n  onRender: onRender\n}), /*#__PURE__*/_react.default.createElement(\"div\", {\n  id: \"error-message\"\n})));\n(0, _chai.expect)(onRender.calledOnce).to.be.true;\nwrapper.unmount();",
                  "err": {},
                  "uuid": "cc124de8-928c-4d65-ba61-24971a063fcf",
                  "parentUUID": "5905642c-7790-44a8-b866-f2411ddeddc6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8fc080dc-7500-46bc-8991-466c42cf7915",
                "cc124de8-928c-4d65-ba61-24971a063fcf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "359a073c-ca93-445b-aec8-408d64488cdb",
            "5a7e0b89-94b0-4e50-b02f-1064724e70d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e1dc0e89-3c8e-4ed4-8b54-8af8e547d1aa",
          "title": "mapStateToProps",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/external-services/tests/ExternalServiceError.unit.spec.jsx",
          "file": "/src/platform/monitoring/external-services/tests/ExternalServiceError.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c8a51096-562a-4f47-b030-4aca89e979f0",
              "title": "shouldGetBackendStatuses",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/external-services/tests/ExternalServiceError.unit.spec.jsx",
              "file": "/src/platform/monitoring/external-services/tests/ExternalServiceError.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get backend statuses by default",
                  "fullTitle": "mapStateToProps shouldGetBackendStatuses should get backend statuses by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)((0, _ExternalServicesError.mapStateToProps)({\n  externalServiceStatuses: {\n    loading: false,\n    statuses: null\n  }\n}).shouldGetBackendStatuses).to.be.true;",
                  "err": {},
                  "uuid": "8cf05deb-bc17-4180-8ad3-edf64213f27e",
                  "parentUUID": "c8a51096-562a-4f47-b030-4aca89e979f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not get backend statuses if a request is in progress",
                  "fullTitle": "mapStateToProps shouldGetBackendStatuses should not get backend statuses if a request is in progress",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)((0, _ExternalServicesError.mapStateToProps)({\n  externalServiceStatuses: {\n    loading: true,\n    statuses: null\n  }\n}).shouldGetBackendStatuses).to.be.false;",
                  "err": {},
                  "uuid": "934d8727-c9be-4f96-9019-e5ae7be7b3a9",
                  "parentUUID": "c8a51096-562a-4f47-b030-4aca89e979f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not get backend statuses if statuses have already been fetched",
                  "fullTitle": "mapStateToProps shouldGetBackendStatuses should not get backend statuses if statuses have already been fetched",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)((0, _ExternalServicesError.mapStateToProps)({\n  externalServiceStatuses: {\n    loading: false,\n    statuses: [{\n      serviceId: 'mvi',\n      status: 'active'\n    }]\n  }\n}).shouldGetBackendStatuses).to.be.false;",
                  "err": {},
                  "uuid": "d3f166d8-f37a-43d5-b19c-a012ed87c173",
                  "parentUUID": "c8a51096-562a-4f47-b030-4aca89e979f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cf05deb-bc17-4180-8ad3-edf64213f27e",
                "934d8727-c9be-4f96-9019-e5ae7be7b3a9",
                "d3f166d8-f37a-43d5-b19c-a012ed87c173"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "26c48df6-2b6b-4607-951f-f16368d199ab",
          "title": "External service statuses reducer",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/external-services/tests/reducer.unit.spec.js",
          "file": "/src/platform/monitoring/external-services/tests/reducer.unit.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should have a default state",
              "fullTitle": "External service statuses reducer should have a default state",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _reducer.default)(undefined, {});\n(0, _chai.expect)(state.loading).to.be.false;\n(0, _chai.expect)(state.statuses).to.be.null;",
              "err": {},
              "uuid": "6d185917-031e-4926-9164-0788ae2379cd",
              "parentUUID": "26c48df6-2b6b-4607-951f-f16368d199ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle in progress requests for backend statuses",
              "fullTitle": "External service statuses reducer should handle in progress requests for backend statuses",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _reducer.default)(undefined, {\n  type: _actions.LOADING_BACKEND_STATUSES\n});\n(0, _chai.expect)(state.loading).to.be.true;",
              "err": {},
              "uuid": "e3e799a9-78fb-4391-81be-6419a0479b25",
              "parentUUID": "26c48df6-2b6b-4607-951f-f16368d199ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle failed requests for backend statuses",
              "fullTitle": "External service statuses reducer should handle failed requests for backend statuses",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _reducer.default)(undefined, {\n  type: _actions.FETCH_BACKEND_STATUSES_FAILURE\n});\n(0, _chai.expect)(state.loading).to.be.false;",
              "err": {},
              "uuid": "c79e251b-d137-4e30-8620-07efffb2866c",
              "parentUUID": "26c48df6-2b6b-4607-951f-f16368d199ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle successful requests for backend statuses",
              "fullTitle": "External service statuses reducer should handle successful requests for backend statuses",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var statuses = [{\n  service: 'Master Veterans Index (MVI)',\n  serviceId: 'mvi',\n  status: 'active',\n  lastIncidentTimestamp: '2019-07-09T07:00:40.000-04:00'\n}, {\n  service: 'My Healthe Vet (MHV)',\n  serviceId: 'mhv',\n  status: 'active',\n  lastIncidentTimestamp: '2019-07-10T22:06:56.000-04:00'\n}, {\n  service: 'search.gov',\n  serviceId: 'search',\n  status: 'active',\n  lastIncidentTimestamp: '2019-07-10T14:44:54.000-04:00'\n}];\nvar state = (0, _reducer.default)(undefined, {\n  type: _actions.FETCH_BACKEND_STATUSES_SUCCESS,\n  data: {\n    attributes: {\n      statuses: statuses\n    }\n  }\n});\n(0, _chai.expect)(state.loading).to.be.false;\n(0, _chai.expect)(state.statuses).to.eql(statuses);",
              "err": {},
              "uuid": "84dc8512-af63-4d26-ba04-bf76dcf33575",
              "parentUUID": "26c48df6-2b6b-4607-951f-f16368d199ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6d185917-031e-4926-9164-0788ae2379cd",
            "e3e799a9-78fb-4391-81be-6419a0479b25",
            "c79e251b-d137-4e30-8620-07efffb2866c",
            "84dc8512-af63-4d26-ba04-bf76dcf33575"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "1b998236-4b4d-415f-b4fe-7b4bcf772762",
          "title": "recordEvent",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/tests/record-event.unit.spec.js",
          "file": "/src/platform/monitoring/tests/record-event.unit.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"recordEvent\"",
              "fullTitle": "recordEvent \"before each\" hook in \"recordEvent\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "oldWindow = global.window;\nglobal.window = Object.create(global.window);\nObject.assign(global.window, {\n  dataLayer: [],\n  // eslint-disable-next-line camelcase\n  google_tag_manager: true,\n  test: 'test'\n});",
              "err": {},
              "uuid": "ee9b2f3f-a62e-4bc8-8a05-11f84b933846",
              "parentUUID": "1b998236-4b4d-415f-b4fe-7b4bcf772762",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"recordEvent\"",
              "fullTitle": "recordEvent \"after each\" hook in \"recordEvent\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "global.window = oldWindow;",
              "err": {},
              "uuid": "6d69aae1-f537-42a6-865c-173580e184c6",
              "parentUUID": "1b998236-4b4d-415f-b4fe-7b4bcf772762",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should record events to the data layer",
              "fullTitle": "recordEvent should record events to the data layer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var e = {\n  event: 'foo-bar',\n  contextualData: 'text'\n};\n(0, _recordEvent.default)(e);\n(0, _chai.expect)(global.window.dataLayer).to.eql([e]);",
              "err": {},
              "uuid": "2c9474ce-d7d0-45c9-be50-e01a333e0504",
              "parentUUID": "1b998236-4b4d-415f-b4fe-7b4bcf772762",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the eventCallback in the event that google_tag_manager is undefiend",
              "fullTitle": "recordEvent should return the eventCallback in the event that google_tag_manager is undefiend",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// eslint-disable-next-line camelcase\nglobal.window.google_tag_manager = undefined;\nvar testString = 'callbackfired';\nvar e = {\n  event: 'foo-bar',\n  contextualData: 'text',\n  eventCallback: function eventCallback() {\n    return testString;\n  }\n};\nvar response = (0, _recordEvent.default)(e);\n(0, _chai.expect)(response).to.equal(testString);",
              "err": {},
              "uuid": "37dd7c19-65a7-40fc-8f8d-c9f6957f6ccf",
              "parentUUID": "1b998236-4b4d-415f-b4fe-7b4bcf772762",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c9474ce-d7d0-45c9-be50-e01a333e0504",
            "37dd7c19-65a7-40fc-8f8d-c9f6957f6ccf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e0289868-0c87-4c8f-bee2-4d41003d00d8",
          "title": "recordEventOnce",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/tests/record-event.unit.spec.js",
          "file": "/src/platform/monitoring/tests/record-event.unit.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"recordEventOnce\"",
              "fullTitle": "recordEventOnce \"before each\" hook in \"recordEventOnce\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "window.oldDataLayer = _data.default.cloneDeep(window.dataLayer);\nwindow.dataLayer = [];",
              "err": {},
              "uuid": "940e6c4a-4510-408c-baa1-8a8bc3beb6a0",
              "parentUUID": "e0289868-0c87-4c8f-bee2-4d41003d00d8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"recordEventOnce\"",
              "fullTitle": "recordEventOnce \"after each\" hook in \"recordEventOnce\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "window.dataLayer = _data.default.cloneDeep(window.oldDataLayer);\ndelete window.oldDataLayer;",
              "err": {},
              "uuid": "61befd55-e6ac-46ed-913a-9f85b51fde69",
              "parentUUID": "e0289868-0c87-4c8f-bee2-4d41003d00d8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should record event if not already in dataLayer",
              "fullTitle": "recordEventOnce should record event if not already in dataLayer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// sanity check to ensure that setup worked\n(0, _chai.expect)(window.dataLayer.length).to.equal(0);\n(0, _recordEvent.recordEventOnce)(testEvent, testKey);\n(0, _chai.expect)(window.dataLayer.length).to.equal(1);",
              "err": {},
              "uuid": "040d7d82-c90c-4cf5-a131-9714461d5ddb",
              "parentUUID": "e0289868-0c87-4c8f-bee2-4d41003d00d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not record duplicate events",
              "fullTitle": "recordEventOnce should not record duplicate events",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// sanity check to ensure that setup worked\n(0, _chai.expect)(window.dataLayer.length).to.equal(0);\n(0, _recordEvent.recordEventOnce)(testEvent, testKey);\n(0, _recordEvent.recordEventOnce)(testEvent, testKey);\n(0, _chai.expect)(window.dataLayer.length).to.equal(1);",
              "err": {},
              "uuid": "8cf4a56c-8fbb-49d4-8625-40589d17b3fb",
              "parentUUID": "e0289868-0c87-4c8f-bee2-4d41003d00d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "040d7d82-c90c-4cf5-a131-9714461d5ddb",
            "8cf4a56c-8fbb-49d4-8625-40589d17b3fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c009ee89-59cf-45c4-8a23-cd3a4204e8a3",
          "title": "recordWebVitalsEvent",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/tests/web-vitals.unit.spec.js",
          "file": "/src/platform/monitoring/tests/web-vitals.unit.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"recordWebVitalsEvent\"",
              "fullTitle": "recordWebVitalsEvent \"before each\" hook in \"recordWebVitalsEvent\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "recordEventStub = sandbox.stub(recordEventModule, 'default');",
              "err": {},
              "uuid": "6931968d-1fbf-40ca-99c9-ad06d9593ccb",
              "parentUUID": "c009ee89-59cf-45c4-8a23-cd3a4204e8a3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"recordWebVitalsEvent\"",
              "fullTitle": "recordWebVitalsEvent \"after each\" hook in \"recordWebVitalsEvent\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "4b7840ca-6c65-4a28-9460-8485fb61bd06",
              "parentUUID": "c009ee89-59cf-45c4-8a23-cd3a4204e8a3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should record a web vitals event with correct properties for CLS",
              "fullTitle": "recordWebVitalsEvent should record a web vitals event with correct properties for CLS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var event = {\n  name: 'CLS',\n  delta: 0.123,\n  id: 'v1'\n};\n(0, _webVitals.recordWebVitalsEvent)(event);\n(0, _chai.expect)(recordEventStub.calledOnce).to.be.true;\nvar recordedEvent = recordEventStub.getCall(0).args[0];\n(0, _chai.expect)(recordedEvent).to.deep.equal({\n  event: 'web_vitals',\n  web_vital_type: 'CLS',\n  latency_ms: 123,\n  web_vital_id: 'v1',\n  app_name: 'unknown'\n});",
              "err": {},
              "uuid": "805d8322-adce-4013-baca-fbacd8fee2b4",
              "parentUUID": "c009ee89-59cf-45c4-8a23-cd3a4204e8a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should record a web vitals event with correct properties for non-CLS events",
              "fullTitle": "recordWebVitalsEvent should record a web vitals event with correct properties for non-CLS events",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var event = {\n  name: 'LCP',\n  delta: 2500,\n  id: 'v2'\n};\n(0, _webVitals.recordWebVitalsEvent)(event);\n(0, _chai.expect)(recordEventStub.calledOnce).to.be.true;\nvar recordedEvent = recordEventStub.getCall(0).args[0];\n(0, _chai.expect)(recordedEvent).to.deep.equal({\n  event: 'web_vitals',\n  web_vital_type: 'LCP',\n  latency_ms: 2500,\n  web_vital_id: 'v2',\n  app_name: 'unknown'\n});",
              "err": {},
              "uuid": "4e649ee2-c3e2-44e3-acd5-fb022ea4a424",
              "parentUUID": "c009ee89-59cf-45c4-8a23-cd3a4204e8a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use window.appName if available",
              "fullTitle": "recordWebVitalsEvent should use window.appName if available",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "window.appName = 'testApp';\nvar event = {\n  name: 'TTFB',\n  delta: 100,\n  id: 'v3'\n};\n(0, _webVitals.recordWebVitalsEvent)(event);\n(0, _chai.expect)(recordEventStub.calledOnce).to.be.true;\nvar recordedEvent = recordEventStub.getCall(0).args[0];\n(0, _chai.expect)(recordedEvent).to.deep.equal({\n  event: 'web_vitals',\n  web_vital_type: 'TTFB',\n  latency_ms: 100,\n  web_vital_id: 'v3',\n  app_name: 'testApp'\n});\ndelete window.appName;",
              "err": {},
              "uuid": "44000024-e28d-4204-8b66-abd3d76184f4",
              "parentUUID": "c009ee89-59cf-45c4-8a23-cd3a4204e8a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "805d8322-adce-4013-baca-fbacd8fee2b4",
            "4e649ee2-c3e2-44e3-acd5-fb022ea4a424",
            "44000024-e28d-4204-8b66-abd3d76184f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b955543f-ee18-43c7-9312-3382cbac01e6",
          "title": "trackWebVitals",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/platform/monitoring/tests/web-vitals.unit.spec.js",
          "file": "/src/platform/monitoring/tests/web-vitals.unit.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"trackWebVitals\"",
              "fullTitle": "trackWebVitals \"after each\" hook in \"trackWebVitals\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "92c7c26f-5e19-41c5-b391-26c61e9e3ce4",
              "parentUUID": "b955543f-ee18-43c7-9312-3382cbac01e6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true 1% of the time when sampling events",
              "fullTitle": "trackWebVitals should return true 1% of the time when sampling events",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.stub(Math, 'random').returns(0.005);\n(0, _chai.expect)((0, _webVitals.trackWebVitals)({\n  sampleEvents: true\n})).to.be.true;",
              "err": {},
              "uuid": "f746aeb4-3587-4eeb-bab1-eeea61014d00",
              "parentUUID": "b955543f-ee18-43c7-9312-3382cbac01e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false 99% of the time when sampling events",
              "fullTitle": "trackWebVitals should return false 99% of the time when sampling events",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.stub(Math, 'random').returns(0.02);\n(0, _chai.expect)((0, _webVitals.trackWebVitals)({\n  sampleEvents: true\n})).to.be.false;",
              "err": {},
              "uuid": "ec9e87ff-e0cf-454d-a1e7-8bc32e41c402",
              "parentUUID": "b955543f-ee18-43c7-9312-3382cbac01e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f746aeb4-3587-4eeb-bab1-eeea61014d00",
            "ec9e87ff-e0cf-454d-a1e7-8bc32e41c402"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "undefined_2025-03-03T223856019Z",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "min",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "consoleReporter": "min",
        "reportDir": "mocha/results",
        "reportFilename": "undefined_2025-03-03T223856019Z",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}