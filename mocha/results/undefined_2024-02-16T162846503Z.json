{
  "stats": {
    "suites": 25,
    "tests": 42,
    "passes": 42,
    "pending": 0,
    "failures": 0,
    "start": "2024-02-16T16:28:46.552Z",
    "end": "2024-02-16T16:28:46.745Z",
    "duration": 193,
    "testsRegistered": 42,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0fc67b75-bde1-4e28-94fe-4fe0f7f7e28e",
      "title": "",
      "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
      "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
      "beforeHooks": [
        {
          "title": "\"before each\" hook: beforeEach in \"{root}\"",
          "fullTitle": "\"before each\" hook: beforeEach in \"{root}\"",
          "timedOut": false,
          "duration": 2,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "setupJSDom();\nresetFetch();\ncleanupStorage();\nif (isStressTest == 'false') {\n  checkAllowList(this);\n}\nconsole.log('running: ', this.currentTest.file.slice(this.currentTest.file.indexOf('src')));",
          "err": {},
          "uuid": "906c7dea-ebf3-4ab4-860d-4de6762eaf78",
          "parentUUID": "0fc67b75-bde1-4e28-94fe-4fe0f7f7e28e",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook: afterEach in \"{root}\"",
          "fullTitle": "\"after each\" hook: afterEach in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cleanupStorage();",
          "err": {},
          "uuid": "74e81136-2e9a-4b07-8a57-861841a4118a",
          "parentUUID": "0fc67b75-bde1-4e28-94fe-4fe0f7f7e28e",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "ac7bfece-cfd3-4d5e-8dfa-7339e255de97",
          "title": "actionCreators",
          "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
          "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"actionCreators\"",
              "fullTitle": "actionCreators \"before each\" hook in \"actionCreators\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "originalFetch = global.fetch;\nglobal.fetch = function (url, options) {\n  if (url === \"\".concat(_config.api.url, \"/institutions/1234\")) {\n    return Promise.resolve({\n      ok: true,\n      json: function json() {\n        return Promise.resolve(mockData);\n      },\n      overwriteRoutes: true\n    });\n  }\n  return originalFetch(url, options);\n};",
              "err": {},
              "uuid": "2de04264-e87f-4632-9f28-48468241026d",
              "parentUUID": "ac7bfece-cfd3-4d5e-8dfa-7339e255de97",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"actionCreators\"",
              "fullTitle": "actionCreators \"after each\" hook in \"actionCreators\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "global.fetch = originalFetch;",
              "err": {},
              "uuid": "423c33b1-0ce6-486a-a308-5ea91db32f01",
              "parentUUID": "ac7bfece-cfd3-4d5e-8dfa-7339e255de97",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should dispatch GEOCODE_LOCATION_FAILED when navigator.geolocation.getCurrentPosition is not available",
              "fullTitle": "actionCreators should dispatch GEOCODE_LOCATION_FAILED when navigator.geolocation.getCurrentPosition is not available",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var dispatch = _sinon.default.spy();\nglobal.navigator = {};\nactions.geolocateUser()(dispatch);\n(0, _chai.expect)(dispatch.calledOnce).to.be.true;\n(0, _chai.expect)(dispatch.firstCall.args[0]).to.have.property('type', 'GEOCODE_LOCATION_FAILED');\n(0, _chai.expect)(dispatch.firstCall.args[0]).to.have.property('code', -1);",
              "err": {},
              "uuid": "309d666e-53c4-4029-834f-a6d1210ebb8f",
              "parentUUID": "ac7bfece-cfd3-4d5e-8dfa-7339e255de97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "creates FETCH_PROFILE_FAILED when fetching profile has failed",
              "fullTitle": "actionCreators creates FETCH_PROFILE_FAILED when fetching profile has failed",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var fetchStub = _sinon.default.stub(global, 'fetch');\nvar errorMessage = 'Not Found';\nvar response = new Response(null, {\n  status: 404,\n  statusText: errorMessage\n});\nfetchStub.returns(Promise.resolve(response));\nvar expectedActions = [{\n  type: 'FETCH_PROFILE_STARTED'\n}, {\n  type: 'FETCH_PROFILE_FAILED',\n  payload: errorMessage\n}];\nvar store = mockStore({\n  constants: {\n    constants: {\n      AVGVABAH: '',\n      AVGDODBAH: ''\n    }\n  }\n});\nreturn store.dispatch(actions.fetchProfile('http://example.com/profile')).then(function () {\n  (0, _chai.expect)(store.getActions()).to.eql(expectedActions);\n}).catch(function () {});",
              "err": {},
              "uuid": "3c7a7b76-2610-48c6-81db-5311ae153fcd",
              "parentUUID": "ac7bfece-cfd3-4d5e-8dfa-7339e255de97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filterBeforeResults should create an action to filter before results",
              "fullTitle": "actionCreators filterBeforeResults should create an action to filter before results",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var expectedAction = {\n  type: actions.FILTER_BEFORE_RESULTS\n};\n(0, _chai.expect)(actions.filterBeforeResultFlag()).to.deep.equal(expectedAction);",
              "err": {},
              "uuid": "e6e011e7-7ef7-4049-8da9-be84ec2068ba",
              "parentUUID": "ac7bfece-cfd3-4d5e-8dfa-7339e255de97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dispatches FETCH_BAH_FAILED when server returns an error",
              "fullTitle": "actionCreators dispatches FETCH_BAH_FAILED when server returns an error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var store = mockStore({});\nvar fetchStub = _sinon.default.stub(global, 'fetch');\nvar mockErrorResponse = {\n  errors: [{\n    title: 'Invalid ZIP Code'\n  }]\n};\nvar mockResponse = new Response(JSON.stringify(mockErrorResponse), {\n  status: 422,\n  headers: {\n    'Content-type': 'application/json'\n  }\n});\nfetchStub.returns(Promise.resolve(mockResponse));\nreturn store.dispatch(actions.beneficiaryZIPCodeChanged('12345'));",
              "err": {},
              "uuid": "ed6a84ab-f67a-40db-b8bc-7316aff2e41f",
              "parentUUID": "ac7bfece-cfd3-4d5e-8dfa-7339e255de97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "creates FETCH_CONSTANTS_STARTED when fetching profile has failed",
              "fullTitle": "actionCreators creates FETCH_CONSTANTS_STARTED when fetching profile has failed",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var fetchStub = _sinon.default.stub(global, 'fetch');\nvar errorMessage = 'Not Found';\nvar response = new Response(null, {\n  status: 404,\n  statusText: errorMessage\n});\nfetchStub.returns(Promise.resolve(response));\nvar expectedActions = [{\n  type: 'FETCH_CONSTANTS_STARTED'\n}, {\n  type: 'FETCH_PROFILE_FAILED',\n  payload: errorMessage\n}];\nvar store = mockStore({\n  constants: {\n    constants: {\n      AVGVABAH: '',\n      AVGDODBAH: ''\n    }\n  }\n});\nreturn store.dispatch(actions.fetchConstants('http://example.com/profile')).then(function () {\n  (0, _chai.expect)(store.getActions()).to.eql(expectedActions);\n}).catch(function () {});",
              "err": {},
              "uuid": "9521206d-5080-4aff-8323-645b541498f1",
              "parentUUID": "ac7bfece-cfd3-4d5e-8dfa-7339e255de97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "45dbe0c0-c57b-4c44-a0e6-dab14ffab636",
              "title": "hideModal functionr",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide Modal",
                  "fullTitle": "actionCreators hideModal functionr should hide Modal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = actions.hideModal();\n(0, _chai.expect)(result).to.deep.equal({\n  type: 'DISPLAY_MODAL',\n  modal: null\n});",
                  "err": {},
                  "uuid": "45986e62-8ce6-432b-93fc-ba333b2fa50e",
                  "parentUUID": "45dbe0c0-c57b-4c44-a0e6-dab14ffab636",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45986e62-8ce6-432b-93fc-ba333b2fa50e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6db3b4bf-1061-415c-bd39-ec148e8bd2b6",
              "title": "clearGeocodeError action creato",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should clear code error",
                  "fullTitle": "actionCreators clearGeocodeError action creato should clear code error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var expectedActions = [{\n  type: 'GEOCODE_CLEAR_ERROR'\n}];\nvar dispatchedActions = [];\nvar mockDispatch = function mockDispatch(action) {\n  return dispatchedActions.push(action);\n};\nactions.clearGeocodeError()(mockDispatch);\n(0, _chai.expect)(dispatchedActions).to.deep.equal(expectedActions);",
                  "err": {},
                  "uuid": "8cf5d03e-7bda-419b-96bf-e1c8cfd23853",
                  "parentUUID": "6db3b4bf-1061-415c-bd39-ec148e8bd2b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cf5d03e-7bda-419b-96bf-e1c8cfd23853"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5c040885-ccbf-44b2-847b-af8e7c26da2b",
              "title": "fetchSearchByLocationResults",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle geocode success",
                  "fullTitle": "actionCreators fetchSearchByLocationResults should handle geocode success",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "dcc5628e-574b-4e1d-bcbe-deb084345daf",
                  "parentUUID": "5c040885-ccbf-44b2-847b-af8e7c26da2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dcc5628e-574b-4e1d-bcbe-deb084345daf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "53fa7aca-b229-4d0d-a5dc-26a26e91ee59",
              "title": "removeCompareInstitution action creato",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should remove compare Institutio ",
                  "fullTitle": "actionCreators removeCompareInstitution action creato should remove compare Institutio ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var facilityCode = '000';\nvar expectedActions = [{\n  type: 'REMOVE_COMPARE_INSTITUTION',\n  payload: facilityCode\n}];\nvar dispatchedActions = [];\nvar mockDispatch = function mockDispatch(action) {\n  return dispatchedActions.push(action);\n};\nactions.removeCompareInstitution(facilityCode)(mockDispatch);\n(0, _chai.expect)(dispatchedActions).to.deep.equal(expectedActions);",
                  "err": {},
                  "uuid": "834fcf2d-773d-4d16-9408-c13354df0105",
                  "parentUUID": "53fa7aca-b229-4d0d-a5dc-26a26e91ee59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "834fcf2d-773d-4d16-9408-c13354df0105"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "54e46410-12b6-4049-8aa2-fbc50b23a7c9",
              "title": "ADD_COMPARE_INSTITUTION action",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should dispatch ADD_COMPARE_INSTITUTION with the correct payload",
                  "fullTitle": "actionCreators ADD_COMPARE_INSTITUTION action should dispatch ADD_COMPARE_INSTITUTION with the correct payload",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var institution = {\n  name: 'Harry Loe',\n  course: 'Test Course'\n};\nvar dispatch = function dispatch(action) {\n  (0, _chai.expect)(action.type).to.equal('ADD_COMPARE_INSTITUTION');\n  (0, _chai.expect)(action.payload).to.deep.equal(institution);\n};\nactions.addCompareInstitution(institution)(dispatch);",
                  "err": {},
                  "uuid": "9d4122f7-b5d2-424d-9917-8d1b58fd029a",
                  "parentUUID": "54e46410-12b6-4049-8aa2-fbc50b23a7c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d4122f7-b5d2-424d-9917-8d1b58fd029a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "61c19c3c-09e6-41b1-8cf3-e5970f87d1e3",
              "title": "fetchSearchByLocationCoords",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should dispatch SEARCH_FAILED on fetch error with error title",
                  "fullTitle": "actionCreators fetchSearchByLocationCoords should dispatch SEARCH_FAILED on fetch error with error title",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var mockFetch = _sinon.default.stub(global, 'fetch');\nvar mockDispatch = _sinon.default.spy();\nvar mockErrorResponse = {\n  ok: false,\n  json: _sinon.default.stub().returns(Promise.resolve({\n    errors: [{\n      title: 'Sample Error'\n    }]\n  }))\n};\nmockFetch.resolves(mockErrorResponse);\nreturn actions.fetchSearchByLocationCoords('sampleLocation', [0, 0], 10, {\n  filter1: 'value1',\n  excludedSchoolTypes: 'value2'\n}, 'version')(mockDispatch).then(function () {\n  (0, _chai.expect)(mockDispatch.calledWith({\n    type: 'SEARCH_FAILED',\n    payload: 'Some Error'\n  })).to.be.false;\n  mockFetch.restore();\n});",
                  "err": {},
                  "uuid": "aeafda97-df05-4003-aae4-3359ef086b71",
                  "parentUUID": "61c19c3c-09e6-41b1-8cf3-e5970f87d1e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should dispatch NAME_AUTOCOMPLETE_SUCCEEDED on successful fetch",
                  "fullTitle": "actionCreators fetchSearchByLocationCoords should dispatch NAME_AUTOCOMPLETE_SUCCEEDED on successful fetch",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var mockFetch = _sinon.default.stub(global, 'fetch');\nvar mockDispatch = _sinon.default.spy();\nvar mockResponse = {\n  ok: true,\n  json: _sinon.default.stub().returns(Promise.resolve({\n    filter1: 'value1',\n    excludedSchoolTypes: 'value2'\n  }))\n};\nmockFetch.resolves(mockResponse);\nreturn actions.fetchSearchByLocationCoords('sampleLocation', [0, 0], 10, {\n  filter1: 'value1',\n  excludedSchoolTypes: 'value2'\n}, 'version')(mockDispatch).then(function () {\n  (0, _chai.expect)(mockDispatch.calledWith({\n    type: 'NAME_AUTOCOMPLETE_SUCCEEDED',\n    payload: {\n      filter1: 'value1',\n      excludedSchoolTypes: 'value2'\n    }\n  })).to.be.false;\n  mockFetch.restore();\n});",
                  "err": {},
                  "uuid": "3c6778b8-f0ca-43f7-a8b0-1be6509f522e",
                  "parentUUID": "61c19c3c-09e6-41b1-8cf3-e5970f87d1e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should dispatch SEARCH_STARTED and SEARCH_FAILED on failed fetch",
                  "fullTitle": "actionCreators fetchSearchByLocationCoords should dispatch SEARCH_STARTED and SEARCH_FAILED on failed fetch",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "b8c57341-9ab4-4fa6-a3b0-876b2fbeba2c",
                  "parentUUID": "61c19c3c-09e6-41b1-8cf3-e5970f87d1e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should dispatch SEARCH_STARTED and SEARCH_BY_NAME_SUCCEEDED on successful fetch",
                  "fullTitle": "actionCreators fetchSearchByLocationCoords should dispatch SEARCH_STARTED and SEARCH_BY_NAME_SUCCEEDED on successful fetch",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "9d9b58b7-ce44-4489-8d1f-906a0ef8b1df",
                  "parentUUID": "61c19c3c-09e6-41b1-8cf3-e5970f87d1e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aeafda97-df05-4003-aae4-3359ef086b71",
                "3c6778b8-f0ca-43f7-a8b0-1be6509f522e",
                "b8c57341-9ab4-4fa6-a3b0-876b2fbeba2c",
                "9d9b58b7-ce44-4489-8d1f-906a0ef8b1df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "3a3a8a95-64b8-4c5e-a066-f45faded7383",
              "title": "showModal action creator",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "actionCreators showModal action creator should return the correct action object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var modal = true;\nvar expectedAction = {\n  type: 'DISPLAY_MODAL',\n  modal: modal\n};\nvar action = actions.showModal(modal);\n(0, _chai.expect)(action).to.deep.equal(expectedAction);",
                  "err": {},
                  "uuid": "0513a2de-64d1-4de3-8dca-96dc5fffe244",
                  "parentUUID": "3a3a8a95-64b8-4c5e-a066-f45faded7383",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0513a2de-64d1-4de3-8dca-96dc5fffe244"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c03e678f-a335-4ab6-a528-261f8c10aedc",
              "title": "calculatorInputChange",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should calculate input changes",
                  "fullTitle": "actionCreators calculatorInputChange should calculate input changes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var field = 'field';\nvar value = 'value';\nvar newFields = {\n  type: 'CALCULATOR_INPUTS_CHANGED',\n  value: value,\n  field: field\n};\nvar result = actions.calculatorInputChange(newFields);\n(0, _chai.expect)(result).to.deep.equal(newFields);",
                  "err": {},
                  "uuid": "7050ed6f-c9b8-4968-9571-46fb17ddc719",
                  "parentUUID": "c03e678f-a335-4ab6-a528-261f8c10aedc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7050ed6f-c9b8-4968-9571-46fb17ddc719"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "1ae3b71d-4f79-4fae-b9fa-58882a9fe323",
              "title": "enterPreviewMode action creator",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should beneficiaryZIPCodeChanged",
                  "fullTitle": "actionCreators enterPreviewMode action creator should beneficiaryZIPCodeChanged",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var store = mockStore({});\nvar beneficiaryZIP = 12345;\nvar action = store.dispatch(actions.beneficiaryZIPCodeChanged(beneficiaryZIP));\n(0, _chai.expect)(action === null || action === void 0 ? void 0 : action.type).to.eq(undefined);",
                  "err": {},
                  "uuid": "0774f1a2-10c1-457a-9b14-063ccc71ad76",
                  "parentUUID": "1ae3b71d-4f79-4fae-b9fa-58882a9fe323",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct action object",
                  "fullTitle": "actionCreators enterPreviewMode action creator should return the correct action object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var version = 'v1.0.0';\nvar expectedAction = {\n  type: 'ENTER_PREVIEW_MODE',\n  version: version\n};\nvar action = actions.enterPreviewMode(version);\n(0, _chai.expect)(action).to.deep.equal(expectedAction);",
                  "err": {},
                  "uuid": "85ffb7a9-347b-4781-9eef-4f70d32b912e",
                  "parentUUID": "1ae3b71d-4f79-4fae-b9fa-58882a9fe323",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should catch error beneficiaryZIPCodeChanged",
                  "fullTitle": "actionCreators enterPreviewMode action creator should catch error beneficiaryZIPCodeChanged",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var beneficiaryZIP = 'abc';\nvar action = actions.beneficiaryZIPCodeChanged(beneficiaryZIP);\n(0, _chai.expect)(action.type).to.eq('BENEFICIARY_ZIP_CODE_CHANGED');",
                  "err": {},
                  "uuid": "7e07bfc3-8d07-4722-bee9-0cba7671e6ce",
                  "parentUUID": "1ae3b71d-4f79-4fae-b9fa-58882a9fe323",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should exitPreviewMode",
                  "fullTitle": "actionCreators enterPreviewMode action creator should exitPreviewMode",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = actions.exitPreviewMode();\n(0, _chai.expect)(action.type).to.eq('EXIT_PREVIEW_MODE');",
                  "err": {},
                  "uuid": "48741964-c1c8-42ab-b42c-7a79ec8ff0d0",
                  "parentUUID": "1ae3b71d-4f79-4fae-b9fa-58882a9fe323",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0774f1a2-10c1-457a-9b14-063ccc71ad76",
                "85ffb7a9-347b-4781-9eef-4f70d32b912e",
                "7e07bfc3-8d07-4722-bee9-0cba7671e6ce",
                "48741964-c1c8-42ab-b42c-7a79ec8ff0d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "bd193815-b1ab-45ff-87e1-aec694dfed1d",
              "title": "setPageTitle action creator",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "actionCreators setPageTitle action creator should return the correct action object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var title = 'Page Title';\nvar expectedAction = {\n  type: 'SET_PAGE_TITLE',\n  title: title\n};\nvar action = actions.setPageTitle(title);\n(0, _chai.expect)(action).to.deep.equal(expectedAction);",
                  "err": {},
                  "uuid": "402367c3-4dc4-49a2-9792-e47cb284e1b7",
                  "parentUUID": "bd193815-b1ab-45ff-87e1-aec694dfed1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "402367c3-4dc4-49a2-9792-e47cb284e1b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "fa3141c2-cdac-4207-858a-523545016fcd",
              "title": "updateAutocompleteLocation",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should auto complete location",
                  "fullTitle": "actionCreators updateAutocompleteLocation should auto complete location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var location = 'New York';\nvar newFields = {\n  type: 'UPDATE_AUTOCOMPLETE_LOCATION',\n  payload: location\n};\nvar result = actions.updateAutocompleteLocation(location);\n(0, _chai.expect)(result).to.deep.equal(newFields);",
                  "err": {},
                  "uuid": "0e6e3b9c-19c3-40b0-b26f-5f5419743f96",
                  "parentUUID": "fa3141c2-cdac-4207-858a-523545016fcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e6e3b9c-19c3-40b0-b26f-5f5419743f96"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9e5ccda0-19e4-4a2e-b45a-f1e8473d2f27",
              "title": "fetchProfile action creator",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should dispatch FETCH_PROFILE_SUCCEEDED on successful fetch",
                  "fullTitle": "actionCreators fetchProfile action creator should dispatch FETCH_PROFILE_SUCCEEDED on successful fetch",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var mockFetch = _sinon.default.stub(global, 'fetch');\nvar mockDispatch = _sinon.default.spy();\nvar mockGetState = _sinon.default.stub().returns({\n  constants: {\n    constants: {\n      AVGVABAH: 'sampleValue1',\n      AVGDODBAH: 'sampleValue2'\n    }\n  }\n});\nvar mockResponse = {\n  ok: true,\n  json: _sinon.default.stub().returns(Promise.resolve({\n    sampleInstitutionDataKey: 'sampleInstitutionDataValue'\n  }))\n};\nmockFetch.resolves(mockResponse);\nreturn actions.fetchProfile('sampleFacilityCode')(mockDispatch, mockGetState).then(function () {\n  (0, _chai.expect)(mockDispatch.calledWith({\n    type: 'FETCH_PROFILE_SUCCEEDED',\n    payload: {\n      sampleInstitutionDataKey: 'sampleInstitutionDataValue',\n      AVGVABAH: 'sampleValue1',\n      AVGDODBAH: 'sampleValue2'\n    }\n  })).to.be.true;\n  mockFetch.restore();\n});",
                  "err": {},
                  "uuid": "605d8337-643e-4a64-86ce-01c749592f1a",
                  "parentUUID": "9e5ccda0-19e4-4a2e-b45a-f1e8473d2f27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fetches profile and dispatches FETCH_PROFILE_SUCCEEDED on success",
                  "fullTitle": "actionCreators fetchProfile action creator fetches profile and dispatches FETCH_PROFILE_SUCCEEDED on success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "73795dcc-c86c-45a0-ba14-7dc1e4c4e4be",
                  "parentUUID": "9e5ccda0-19e4-4a2e-b45a-f1e8473d2f27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "605d8337-643e-4a64-86ce-01c749592f1a",
                "73795dcc-c86c-45a0-ba14-7dc1e4c4e4be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "616d9660-9f0a-4c7e-8fdb-b35ad3deb60d",
              "title": "geolocateUser",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should dispatch GEOCODE_LOCATION_FAILED on geolocation failure",
                  "fullTitle": "actionCreators geolocateUser should dispatch GEOCODE_LOCATION_FAILED on geolocation failure",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "32b638ef-fbe9-4a73-af42-0117857bc7d8",
                  "parentUUID": "616d9660-9f0a-4c7e-8fdb-b35ad3deb60d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should dispatch GEOCODE_COMPLETE on successful geolocation",
                  "fullTitle": "actionCreators geolocateUser should dispatch GEOCODE_COMPLETE on successful geolocation",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "a47a0e4c-915b-434b-b9a8-398f7a8ff895",
                  "parentUUID": "616d9660-9f0a-4c7e-8fdb-b35ad3deb60d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32b638ef-fbe9-4a73-af42-0117857bc7d8",
                "a47a0e4c-915b-434b-b9a8-398f7a8ff895"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "eb2b4647-14c3-40d2-a9d7-c5ff896815f2",
              "title": "fetchNameAutocompleteSuggestions",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should dispatch NAME_AUTOCOMPLETE_SUCCEEDED with an empty payload if name is empty",
                  "fullTitle": "actionCreators fetchNameAutocompleteSuggestions should dispatch NAME_AUTOCOMPLETE_SUCCEEDED with an empty payload if name is empty",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var store = mockStore({});\nstore.dispatch(actions.fetchNameAutocompleteSuggestions(''));\nvar action = store.getActions();\n(0, _chai.expect)(action[0]).to.deep.equal({\n  type: 'NAME_AUTOCOMPLETE_SUCCEEDED',\n  payload: []\n});",
                  "err": {},
                  "uuid": "1de6893d-5191-474b-8e4d-07e74acee11d",
                  "parentUUID": "eb2b4647-14c3-40d2-a9d7-c5ff896815f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should dispatch AUTOCOMPLETE_STARTED on a successful fetch",
                  "fullTitle": "actionCreators fetchNameAutocompleteSuggestions should dispatch AUTOCOMPLETE_STARTED on a successful fetch",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "5214c24e-caed-4504-a314-f9f0f82ec993",
                  "parentUUID": "eb2b4647-14c3-40d2-a9d7-c5ff896815f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1de6893d-5191-474b-8e4d-07e74acee11d",
                "5214c24e-caed-4504-a314-f9f0f82ec993"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "3de71683-be23-4b10-b6b9-de51cddc3ec3",
              "title": "fetchLocationAutocompleteSuggestions",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fetchLocationAutocompleteSuggestions\"",
                  "fullTitle": "actionCreators fetchLocationAutocompleteSuggestions \"before each\" hook in \"fetchLocationAutocompleteSuggestions\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "dispatchSpy = _sinon.default.spy();",
                  "err": {},
                  "uuid": "a0b8ffa6-aed9-4493-8070-28dbaf96c62c",
                  "parentUUID": "3de71683-be23-4b10-b6b9-de51cddc3ec3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"fetchLocationAutocompleteSuggestions\"",
                  "fullTitle": "actionCreators fetchLocationAutocompleteSuggestions \"after each\" hook in \"fetchLocationAutocompleteSuggestions\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mbxClientStub.restore();",
                  "err": {},
                  "uuid": "8ffe5f35-0e5f-4df3-bf77-ad9e96192909",
                  "parentUUID": "3de71683-be23-4b10-b6b9-de51cddc3ec3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should dispatch LOCATION_AUTOCOMPLETE_SUCCEEDED with empty payload for empty location",
                  "fullTitle": "actionCreators fetchLocationAutocompleteSuggestions should dispatch LOCATION_AUTOCOMPLETE_SUCCEEDED with empty payload for empty location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = actions.fetchLocationAutocompleteSuggestions('');\n(0, _chai.expect)(action.type).to.equal('LOCATION_AUTOCOMPLETE_SUCCEEDED');\n(0, _chai.expect)(action.payload).to.deep.equal([]);",
                  "err": {},
                  "uuid": "440b0635-7656-4daf-bf63-20447fafb342",
                  "parentUUID": "3de71683-be23-4b10-b6b9-de51cddc3ec3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle geocode failure",
                  "fullTitle": "actionCreators fetchLocationAutocompleteSuggestions should handle geocode failure",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "fa529d42-b216-41a2-b243-a39e2ed7c379",
                  "parentUUID": "3de71683-be23-4b10-b6b9-de51cddc3ec3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle geocode success",
                  "fullTitle": "actionCreators fetchLocationAutocompleteSuggestions should handle geocode success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "923e4238-ff84-46a0-903f-ec876653896d",
                  "parentUUID": "3de71683-be23-4b10-b6b9-de51cddc3ec3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "440b0635-7656-4daf-bf63-20447fafb342",
                "fa529d42-b216-41a2-b243-a39e2ed7c379",
                "923e4238-ff84-46a0-903f-ec876653896d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8558d903-60d3-4de1-b2f3-1b8f40c7cead",
              "title": "changeSearchTab",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should auto complete location",
                  "fullTitle": "actionCreators changeSearchTab should auto complete location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tab = 2;\nvar newFields = {\n  type: 'UPDATE_CURRENT_TAB',\n  tab: tab\n};\nvar result = actions.changeSearchTab(tab);\n(0, _chai.expect)(result).to.deep.equal(newFields);",
                  "err": {},
                  "uuid": "52ad2f15-13a1-4da8-847d-ccc7f0c7edec",
                  "parentUUID": "8558d903-60d3-4de1-b2f3-1b8f40c7cead",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52ad2f15-13a1-4da8-847d-ccc7f0c7edec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "461497e4-9ad3-4803-9ecb-04063691ac02",
              "title": "fetchCompareDetails",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should dispatch UPDATE_COMPARE_DETAILS on successful fetch",
                  "fullTitle": "actionCreators fetchCompareDetails should dispatch UPDATE_COMPARE_DETAILS on successful fetch",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "433414cb-5e9d-4c27-b17a-7b1266ad58fa",
                  "parentUUID": "461497e4-9ad3-4803-9ecb-04063691ac02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should dispatch FETCH_COMPARE_FAILED on failed fetch",
                  "fullTitle": "actionCreators fetchCompareDetails should dispatch FETCH_COMPARE_FAILED on failed fetch",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "241f5c3a-9bc3-4c79-9fdd-0cf75514b775",
                  "parentUUID": "461497e4-9ad3-4803-9ecb-04063691ac02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "433414cb-5e9d-4c27-b17a-7b1266ad58fa",
                "241f5c3a-9bc3-4c79-9fdd-0cf75514b775"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "280da5b1-9ebe-4cc0-b02b-eb2d8d6d1ce6",
              "title": "filterChange",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action type and payload",
                  "fullTitle": "actionCreators filterChange should return the correct action type and payload",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var mockFields = {\n  field1: 'field one',\n  field2: 'field two'\n};\nvar newFields = {\n  type: 'FILTERS_CHANGED',\n  payload: _objectSpread({}, mockFields)\n};\nvar result = actions.filterChange(mockFields);\n(0, _chai.expect)(result).to.deep.equal(newFields);",
                  "err": {},
                  "uuid": "439e2ec0-39cc-4b14-9485-3bff9c78b80a",
                  "parentUUID": "280da5b1-9ebe-4cc0-b02b-eb2d8d6d1ce6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "439e2ec0-39cc-4b14-9485-3bff9c78b80a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "21093cd0-91d3-4f3e-9ba3-d53bfd9c4771",
              "title": "updateEstimatedBenefits",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update estimated benefits",
                  "fullTitle": "actionCreators updateEstimatedBenefits should update estimated benefits",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var estimatedBenefits = 300;\nvar newFields = {\n  type: 'UPDATE_ESTIMATED_BENEFITS',\n  estimatedBenefits: estimatedBenefits\n};\nvar result = actions.updateEstimatedBenefits(estimatedBenefits);\n(0, _chai.expect)(result).to.deep.equal(newFields);",
                  "err": {},
                  "uuid": "1d487bbf-a185-4d2f-9cef-50f9be875a2a",
                  "parentUUID": "21093cd0-91d3-4f3e-9ba3-d53bfd9c4771",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d487bbf-a185-4d2f-9cef-50f9be875a2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "48f9fe04-fc92-4e1b-9b9f-53baf32d4680",
              "title": "eligibilityChange",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action type and payload",
                  "fullTitle": "actionCreators eligibilityChange should return the correct action type and payload",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var mockFields = {\n  field1: 'field one',\n  field2: 'field two'\n};\nvar newFields = {\n  type: 'ELIGIBILITY_CHANGED',\n  payload: _objectSpread({}, mockFields)\n};\nvar result = actions.eligibilityChange(mockFields);\n(0, _chai.expect)(result).to.deep.equal(newFields);",
                  "err": {},
                  "uuid": "12fb11ba-a609-4c41-aa76-dcda0b943b78",
                  "parentUUID": "48f9fe04-fc92-4e1b-9b9f-53baf32d4680",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12fb11ba-a609-4c41-aa76-dcda0b943b78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "3f1c0159-4f22-44b8-9304-d366b37d6097",
              "title": "mapChanged action creato",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should map the changes",
                  "fullTitle": "actionCreators mapChanged action creato should map the changes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var mapState = {\n  value1: 'value1',\n  value2: 'value2'\n};\nvar expectedActions = [{\n  type: 'MAP_CHANGED',\n  payload: mapState\n}];\nvar dispatchedActions = [];\nvar mockDispatch = function mockDispatch(action) {\n  return dispatchedActions.push(action);\n};\nactions.mapChanged(mapState)(mockDispatch);\n(0, _chai.expect)(dispatchedActions).to.deep.equal(expectedActions);",
                  "err": {},
                  "uuid": "56c2606e-541c-4a84-8dee-d5df77e7c5ee",
                  "parentUUID": "3f1c0159-4f22-44b8-9304-d366b37d6097",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56c2606e-541c-4a84-8dee-d5df77e7c5ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ae6ac244-dc1a-41f2-9bf6-6c6c13278e57",
              "title": "updateAutocompleteName",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should auto complete name",
                  "fullTitle": "actionCreators updateAutocompleteName should auto complete name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var name = 'Jhon Doe';\nvar newFields = {\n  type: 'UPDATE_AUTOCOMPLETE_NAME',\n  payload: name\n};\nvar result = actions.updateAutocompleteName(name);\n(0, _chai.expect)(result).to.deep.equal(newFields);",
                  "err": {},
                  "uuid": "67ccf2fa-fd04-4029-9ab8-a562229eb163",
                  "parentUUID": "ae6ac244-dc1a-41f2-9bf6-6c6c13278e57",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67ccf2fa-fd04-4029-9ab8-a562229eb163"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "616c752e-52f2-4540-9178-2a4432ab3793",
              "title": "fetchConstants",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should dispatch FETCH_CONSTANTS_FAILED when the API call fails",
                  "fullTitle": "actionCreators fetchConstants should dispatch FETCH_CONSTANTS_FAILED when the API call fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "ffe0960d-dec6-46c5-b46b-fbb05bb7653a",
                  "parentUUID": "616c752e-52f2-4540-9178-2a4432ab3793",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should dispatch FETCH_CONSTANTS_SUCCEEDED when the API call is successful",
                  "fullTitle": "actionCreators fetchConstants should dispatch FETCH_CONSTANTS_SUCCEEDED when the API call is successful",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                  "err": {},
                  "uuid": "31a6cb84-84f3-48d2-8aa3-42a7f7c38fe5",
                  "parentUUID": "616c752e-52f2-4540-9178-2a4432ab3793",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ffe0960d-dec6-46c5-b46b-fbb05bb7653a",
                "31a6cb84-84f3-48d2-8aa3-42a7f7c38fe5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "a01a3741-20d4-4605-adc8-5ece59e2241a",
              "title": "updateEligibilityAndFilters",
              "fullFile": "/Users/fatmakhan/Documents/vets-website/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/gi/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should dispatch ELIGIBILITY_CHANGED and FILTERS_CHANGED actions with the correct payload",
                  "fullTitle": "actionCreators updateEligibilityAndFilters should dispatch ELIGIBILITY_CHANGED and FILTERS_CHANGED actions with the correct payload",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var mockEligibility = {\n  eligibilityField: 'eligibilityField'\n};\nvar mockFilters = {\n  filterField: 'filterField'\n};\nvar expectedActions = [{\n  type: 'ELIGIBILITY_CHANGED',\n  payload: mockEligibility\n}, {\n  type: 'FILTERS_CHANGED',\n  payload: mockFilters\n}];\nvar dispatchedActions = [];\nvar mockDispatch = function mockDispatch(action) {\n  return dispatchedActions.push(action);\n};\nactions.updateEligibilityAndFilters(mockEligibility, mockFilters)(mockDispatch);\n(0, _chai.expect)(dispatchedActions).to.deep.equal(expectedActions);",
                  "err": {},
                  "uuid": "79528eae-ccb1-4221-9e1d-6d63b142061f",
                  "parentUUID": "a01a3741-20d4-4605-adc8-5ece59e2241a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79528eae-ccb1-4221-9e1d-6d63b142061f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "309d666e-53c4-4029-834f-a6d1210ebb8f",
            "3c7a7b76-2610-48c6-81db-5311ae153fcd",
            "e6e011e7-7ef7-4049-8da9-be84ec2068ba",
            "ed6a84ab-f67a-40db-b8bc-7316aff2e41f",
            "9521206d-5080-4aff-8323-645b541498f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "undefined_2024-02-16T162846503Z",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "min",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "consoleReporter": "min",
        "reportDir": "mocha/results",
        "reportFilename": "undefined_2024-02-16T162846503Z",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}