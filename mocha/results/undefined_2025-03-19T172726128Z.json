{
  "stats": {
    "suites": 26,
    "tests": 48,
    "passes": 48,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-19T17:27:26.172Z",
    "end": "2025-03-19T17:27:29.460Z",
    "duration": 3288,
    "testsRegistered": 48,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "73ff2d96-1516-4e7e-ad84-dbe4a325a6c0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook: beforeEach in \"{root}\"",
          "fullTitle": "\"before each\" hook: beforeEach in \"{root}\"",
          "timedOut": false,
          "duration": 2,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cov_qaw57qkz8().f[20]++;\ncov_qaw57qkz8().s[70]++;\nsetupJSDom();\ncov_qaw57qkz8().s[71]++;\nresetFetch();\ncov_qaw57qkz8().s[72]++;\ncleanupStorage();\ncov_qaw57qkz8().s[73]++;\nif (isStressTest == 'false') {\n  cov_qaw57qkz8().b[12][0]++;\n  cov_qaw57qkz8().s[74]++;\n  checkAllowList(this);\n} else {\n  cov_qaw57qkz8().b[12][1]++;\n}\ncov_qaw57qkz8().s[75]++;\nif ((cov_qaw57qkz8().b[14][0]++, process.env.CI) || (cov_qaw57qkz8().b[14][1]++, ['trace', 'debug'].includes(process.env.LOG_LEVEL))) {\n  cov_qaw57qkz8().b[13][0]++;\n  cov_qaw57qkz8().s[76]++;\n  console.log('running: ', this.currentTest.file.slice(this.currentTest.file.indexOf('src')));\n} else {\n  cov_qaw57qkz8().b[13][1]++;\n}",
          "err": {},
          "uuid": "9b5c7e4c-0678-40fc-b149-b3bb9bd54994",
          "parentUUID": "73ff2d96-1516-4e7e-ad84-dbe4a325a6c0",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook: afterEach in \"{root}\"",
          "fullTitle": "\"after each\" hook: afterEach in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cov_qaw57qkz8().f[21]++;\ncov_qaw57qkz8().s[77]++;\ncleanupStorage();\ncov_qaw57qkz8().s[78]++;\nflushPromises();",
          "err": {},
          "uuid": "91f71a67-dce3-43e1-aa89-3877c3caa359",
          "parentUUID": "73ff2d96-1516-4e7e-ad84-dbe4a325a6c0",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 3,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "(0, _pure.cleanup)();",
          "err": {},
          "uuid": "58dacb92-cdf1-4bd1-9a64-3ec2bc4cf164",
          "parentUUID": "73ff2d96-1516-4e7e-ad84-dbe4a325a6c0",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "ee0b9b61-38e3-48c3-ab10-83a803e0bf09",
          "title": "Contact Information Page",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/contactInformation/contactInformationPage.unit.spec.jsx",
          "file": "/src/applications/ask-a-question/tests/unit/form/contactInformation/contactInformationPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should require full name",
              "fullTitle": "Contact Information Page should require full name",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_schemaformUtils.DefinitionTester, {\n    schema: _contactInformationPage.default.schema,\n    uiSchema: _contactInformationPage.default.uiSchema,\n    definitions: _form.default.defaultDefinitions\n  })),\n  getByText = _render.getByText;\nvar firstName = getByText(_fullName.default.first['ui:title'], {\n  exact: false\n});\nvar lastName = getByText(_fullName.default.last['ui:title'], {\n  exact: false\n});\n(0, _chai.expect)(firstName).to.contain.text('Required');\n(0, _chai.expect)(lastName).to.contain.text('Required');",
              "err": {},
              "uuid": "354d2ff6-8fed-485e-aac6-209b543de11a",
              "parentUUID": "ee0b9b61-38e3-48c3-ab10-83a803e0bf09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require preferred contact method",
              "fullTitle": "Contact Information Page should require preferred contact method",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_schemaformUtils.DefinitionTester, {\n    schema: _contactInformationPage.default.schema,\n    uiSchema: _contactInformationPage.default.uiSchema,\n    definitions: _form.default.defaultDefinitions\n  })),\n  getByText = _render2.getByText;\nvar preferredContactMethod = getByText(_labels.preferredContactMethodTitle, {\n  exact: false\n});\n(0, _chai.expect)(preferredContactMethod).to.contain.text('Required');",
              "err": {},
              "uuid": "50e50982-28de-4085-8243-8f5d318c51d5",
              "parentUUID": "ee0b9b61-38e3-48c3-ab10-83a803e0bf09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require country",
              "fullTitle": "Contact Information Page should require country",
              "timedOut": false,
              "duration": 89,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_schemaformUtils.DefinitionTester, {\n    schema: _contactInformationPage.default.schema,\n    uiSchema: _contactInformationPage.default.uiSchema,\n    definitions: _form.default.defaultDefinitions\n  })),\n  getByLabelText = _render3.getByLabelText;\nvar country = getByLabelText(address.country['ui:title'], {\n  exact: false\n});\n(0, _chai.expect)(country).to.have.property('required', true);",
              "err": {},
              "uuid": "cdc778cf-0a9b-45ba-ba68-eadc594a5eda",
              "parentUUID": "ee0b9b61-38e3-48c3-ab10-83a803e0bf09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require email when preferred contact method is email",
              "fullTitle": "Contact Information Page should require email when preferred contact method is email",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "c34d0501-90a4-4197-b6dd-9ec07e8c7ada",
              "parentUUID": "ee0b9b61-38e3-48c3-ab10-83a803e0bf09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require daytime phone when preferred contact method is phone",
              "fullTitle": "Contact Information Page should require daytime phone when preferred contact method is phone",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "3bf3242c-1301-4d25-9086-5213d6ee76ad",
              "parentUUID": "ee0b9b61-38e3-48c3-ab10-83a803e0bf09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require street, city, state, and zipCode when preferred contact method is US mail and United States is selected for country",
              "fullTitle": "Contact Information Page should require street, city, state, and zipCode when preferred contact method is US mail and United States is selected for country",
              "timedOut": false,
              "duration": 89,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "1d397f45-f3bf-4abb-92ba-dd13ac447838",
              "parentUUID": "ee0b9b61-38e3-48c3-ab10-83a803e0bf09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not require state if Aruba is selected from country",
              "fullTitle": "Contact Information Page should not require state if Aruba is selected from country",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "a45485d8-5cb7-42ed-96ba-b4c6d7513eaf",
              "parentUUID": "ee0b9b61-38e3-48c3-ab10-83a803e0bf09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "354d2ff6-8fed-485e-aac6-209b543de11a",
            "50e50982-28de-4085-8243-8f5d318c51d5",
            "cdc778cf-0a9b-45ba-ba68-eadc594a5eda",
            "c34d0501-90a4-4197-b6dd-9ec07e8c7ada",
            "3bf3242c-1301-4d25-9086-5213d6ee76ad",
            "1d397f45-f3bf-4abb-92ba-dd13ac447838",
            "a45485d8-5cb7-42ed-96ba-b4c6d7513eaf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 646,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "44d05de7-93a1-4c79-94ae-bec9e85b4fbf",
          "title": "Veteran Status UI",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
          "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Veteran Status UI\"",
              "fullTitle": "Veteran Status UI \"before each\" hook in \"Veteran Status UI\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "wrapper = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_schemaformUtils.DefinitionTester, {\n  schema: _inquiryPage.default.schema,\n  uiSchema: _inquiryPage.default.uiSchema,\n  definitions: _form.default.defaultDefinitions,\n  data: {\n    topic: {\n      levelOne: null,\n      levelTwo: null\n    },\n    veteranStatus: {\n      veteranStatus: null\n    }\n  }\n}));",
              "err": {},
              "uuid": "6580f744-66dd-41bc-be4a-34fa02a454b8",
              "parentUUID": "44d05de7-93a1-4c79-94ae-bec9e85b4fbf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Veteran Status UI\"",
              "fullTitle": "Veteran Status UI \"after each\" hook in \"Veteran Status UI\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "wrapper && wrapper.unmount();",
              "err": {},
              "uuid": "ca369e53-f99d-41e8-a347-6a1f3d3261b2",
              "parentUUID": "44d05de7-93a1-4c79-94ae-bec9e85b4fbf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "4479c1ff-d8b5-478f-bd6d-858c592d1ab2",
              "title": "when the veteran status is not general or vet",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
              "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "f592ca38-ed9e-4135-8dfd-5c0ee9d08764",
                  "title": "behalf of vet",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                  "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"behalf of vet\"",
                      "fullTitle": "Veteran Status UI when the veteran status is not general or vet behalf of vet \"before each\" hook in \"behalf of vet\"",
                      "timedOut": false,
                      "duration": 16,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "changeVeteranStatus(wrapper, veteranStatus);",
                      "err": {},
                      "uuid": "87122b9d-4ce2-4461-8548-e328fbc90fdf",
                      "parentUUID": "f592ca38-ed9e-4135-8dfd-5c0ee9d08764",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should require relationship to veteran",
                      "fullTitle": "Veteran Status UI when the veteran status is not general or vet behalf of vet should require relationship to veteran",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "expectRelationshipToVeteranToBeRequired(wrapper);",
                      "err": {},
                      "uuid": "6c0b0a79-7b21-41f8-b957-e744d89d7d76",
                      "parentUUID": "f592ca38-ed9e-4135-8dfd-5c0ee9d08764",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not display date of death when veteran is not deceased",
                      "fullTitle": "Veteran Status UI when the veteran status is not general or vet behalf of vet should not display date of death when veteran is not deceased",
                      "timedOut": false,
                      "duration": 96,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "expectVeteranIsDeceasedToBeRequired(wrapper);\n(0, _queryHelper.getRadioOption)(wrapper, 'No', 'veteranIsDeceased').click();\n(0, _chai.expect)(queryDateOfDeath()).to.be.null;",
                      "err": {},
                      "uuid": "e4a2eb4e-ec92-40d1-886d-9d041e7abb0d",
                      "parentUUID": "f592ca38-ed9e-4135-8dfd-5c0ee9d08764",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display date of death when veteran is deceased",
                      "fullTitle": "Veteran Status UI when the veteran status is not general or vet behalf of vet should display date of death when veteran is deceased",
                      "timedOut": false,
                      "duration": 73,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "expectVeteranIsDeceasedToBeRequired(wrapper);\n(0, _queryHelper.getRadioOption)(wrapper, 'Yes', 'veteranIsDeceased').click();\n(0, _chai.expect)(queryDateOfDeath()).not.to.be.null;",
                      "err": {},
                      "uuid": "bda7fa81-5089-4dd2-a8b8-a3919d571d63",
                      "parentUUID": "f592ca38-ed9e-4135-8dfd-5c0ee9d08764",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "c70072ef-1805-4bcd-aaca-0707ab611f3d",
                      "title": "deceased fields",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                      "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "6488c524-9d23-40a4-935c-e8e45433a478",
                          "title": "when relation to veteran is Veteran",
                          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                          "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should not show the deceased field",
                              "fullTitle": "Veteran Status UI when the veteran status is not general or vet behalf of vet deceased fields when relation to veteran is Veteran should not show the deceased field",
                              "timedOut": false,
                              "duration": 8,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "var relationship = wrapper.getByLabelText(/relationship to the veteran/i);\nchangeDropdownValue(wrapper, relationship, 'Veteran');\n(0, _chai.expect)(queryIsDeceased()).to.be.null;",
                              "err": {},
                              "uuid": "19331f02-e746-42ea-96c5-6256b3ce1290",
                              "parentUUID": "6488c524-9d23-40a4-935c-e8e45433a478",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should not require the deceased field",
                              "fullTitle": "Veteran Status UI when the veteran status is not general or vet behalf of vet deceased fields when relation to veteran is Veteran should not require the deceased field",
                              "timedOut": false,
                              "duration": 0,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// Q: Why are we not testing this through the UI?\n// A: if the field is required, its not visible in any way to the user\n//    and it just stops the form from going to the next chapter.\n//    In these tests, we don't know how to test that you go to the next chapter.\nvar isVeteranDeceasedRequired = _inquiryPage.default.uiSchema.veteranStatus.veteranIsDeceased['ui:required'];\nvar formState = {\n  veteranStatus: {\n    veteranStatus: veteranStatus,\n    relationshipToVeteran: 'Veteran'\n  }\n};\n(0, _chai.expect)(isVeteranDeceasedRequired(formState)).to.equal(false);",
                              "err": {},
                              "uuid": "df4efebe-966b-4965-916c-c5825b7f0093",
                              "parentUUID": "6488c524-9d23-40a4-935c-e8e45433a478",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should hide the date of death after selecting relationship=Veteran",
                              "fullTitle": "Veteran Status UI when the veteran status is not general or vet behalf of vet deceased fields when relation to veteran is Veteran should hide the date of death after selecting relationship=Veteran",
                              "timedOut": false,
                              "duration": 64,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "expectVeteranIsDeceasedToBeRequired(wrapper);\n(0, _queryHelper.getRadioOption)(wrapper, 'Yes', 'veteranIsDeceased').click();\n(0, _chai.expect)(queryDateOfDeath()).to.not.be.null;\nvar relationship = wrapper.getByLabelText(/relationship to the veteran/i);\nchangeDropdownValue(wrapper, relationship, 'Veteran');\n(0, _chai.expect)(queryDateOfDeath()).to.be.null;",
                              "err": {},
                              "uuid": "0cf8fbfa-6ef7-490f-94bf-e490d1acc7d6",
                              "parentUUID": "6488c524-9d23-40a4-935c-e8e45433a478",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "19331f02-e746-42ea-96c5-6256b3ce1290",
                            "df4efebe-966b-4965-916c-c5825b7f0093",
                            "0cf8fbfa-6ef7-490f-94bf-e490d1acc7d6"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 72,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 10000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [
                    "6c0b0a79-7b21-41f8-b957-e744d89d7d76",
                    "e4a2eb4e-ec92-40d1-886d-9d041e7abb0d",
                    "bda7fa81-5089-4dd2-a8b8-a3919d571d63"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 172,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "ada55e85-c1a9-4fe6-8276-fcbc5316e627",
                  "title": "dependent",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                  "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"dependent\"",
                      "fullTitle": "Veteran Status UI when the veteran status is not general or vet dependent \"before each\" hook in \"dependent\"",
                      "timedOut": false,
                      "duration": 15,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "changeVeteranStatus(wrapper, veteranStatus);",
                      "err": {},
                      "uuid": "58ff575d-2e24-4a76-9d16-2ff1bfd792fc",
                      "parentUUID": "ada55e85-c1a9-4fe6-8276-fcbc5316e627",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should require relationship to veteran",
                      "fullTitle": "Veteran Status UI when the veteran status is not general or vet dependent should require relationship to veteran",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "expectRelationshipToVeteranToBeRequired(wrapper);",
                      "err": {},
                      "uuid": "e7a2bfaa-dfa4-434e-87cb-d35dc48aadbf",
                      "parentUUID": "ada55e85-c1a9-4fe6-8276-fcbc5316e627",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not display date of death when veteran is not deceased",
                      "fullTitle": "Veteran Status UI when the veteran status is not general or vet dependent should not display date of death when veteran is not deceased",
                      "timedOut": false,
                      "duration": 45,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "expectVeteranIsDeceasedToBeRequired(wrapper);\n(0, _queryHelper.getRadioOption)(wrapper, 'No', 'veteranIsDeceased').click();\n(0, _chai.expect)(queryDateOfDeath()).to.be.null;",
                      "err": {},
                      "uuid": "cda719fe-3a43-4617-9708-a8d57ac6b19e",
                      "parentUUID": "ada55e85-c1a9-4fe6-8276-fcbc5316e627",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display date of death when veteran is deceased",
                      "fullTitle": "Veteran Status UI when the veteran status is not general or vet dependent should display date of death when veteran is deceased",
                      "timedOut": false,
                      "duration": 54,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "expectVeteranIsDeceasedToBeRequired(wrapper);\n(0, _queryHelper.getRadioOption)(wrapper, 'Yes', 'veteranIsDeceased').click();\n(0, _chai.expect)(queryDateOfDeath()).not.to.be.null;",
                      "err": {},
                      "uuid": "b10a6b7f-8677-405d-bf4a-5b4109045fdf",
                      "parentUUID": "ada55e85-c1a9-4fe6-8276-fcbc5316e627",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "e961f582-35a6-4c20-9d1c-546ba09541ff",
                      "title": "deceased fields",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                      "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "0fc18013-21ba-4952-b35e-a756eef21e5b",
                          "title": "when relation to veteran is Veteran",
                          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                          "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should not show the deceased field",
                              "fullTitle": "Veteran Status UI when the veteran status is not general or vet dependent deceased fields when relation to veteran is Veteran should not show the deceased field",
                              "timedOut": false,
                              "duration": 14,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "var relationship = wrapper.getByLabelText(/relationship to the veteran/i);\nchangeDropdownValue(wrapper, relationship, 'Veteran');\n(0, _chai.expect)(queryIsDeceased()).to.be.null;",
                              "err": {},
                              "uuid": "1acb6eb7-9d75-450d-8f54-3bf3ac758cce",
                              "parentUUID": "0fc18013-21ba-4952-b35e-a756eef21e5b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should not require the deceased field",
                              "fullTitle": "Veteran Status UI when the veteran status is not general or vet dependent deceased fields when relation to veteran is Veteran should not require the deceased field",
                              "timedOut": false,
                              "duration": 0,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// Q: Why are we not testing this through the UI?\n// A: if the field is required, its not visible in any way to the user\n//    and it just stops the form from going to the next chapter.\n//    In these tests, we don't know how to test that you go to the next chapter.\nvar isVeteranDeceasedRequired = _inquiryPage.default.uiSchema.veteranStatus.veteranIsDeceased['ui:required'];\nvar formState = {\n  veteranStatus: {\n    veteranStatus: veteranStatus,\n    relationshipToVeteran: 'Veteran'\n  }\n};\n(0, _chai.expect)(isVeteranDeceasedRequired(formState)).to.equal(false);",
                              "err": {},
                              "uuid": "666cf2a5-4a08-434b-af94-2839206176b9",
                              "parentUUID": "0fc18013-21ba-4952-b35e-a756eef21e5b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should hide the date of death after selecting relationship=Veteran",
                              "fullTitle": "Veteran Status UI when the veteran status is not general or vet dependent deceased fields when relation to veteran is Veteran should hide the date of death after selecting relationship=Veteran",
                              "timedOut": false,
                              "duration": 50,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "expectVeteranIsDeceasedToBeRequired(wrapper);\n(0, _queryHelper.getRadioOption)(wrapper, 'Yes', 'veteranIsDeceased').click();\n(0, _chai.expect)(queryDateOfDeath()).to.not.be.null;\nvar relationship = wrapper.getByLabelText(/relationship to the veteran/i);\nchangeDropdownValue(wrapper, relationship, 'Veteran');\n(0, _chai.expect)(queryDateOfDeath()).to.be.null;",
                              "err": {},
                              "uuid": "0cbc287c-7537-4aee-a90b-63e99fb79d2d",
                              "parentUUID": "0fc18013-21ba-4952-b35e-a756eef21e5b",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "1acb6eb7-9d75-450d-8f54-3bf3ac758cce",
                            "666cf2a5-4a08-434b-af94-2839206176b9",
                            "0cbc287c-7537-4aee-a90b-63e99fb79d2d"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 64,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 10000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [
                    "e7a2bfaa-dfa4-434e-87cb-d35dc48aadbf",
                    "cda719fe-3a43-4617-9708-a8d57ac6b19e",
                    "b10a6b7f-8677-405d-bf4a-5b4109045fdf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 102,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "52630d8d-0000-4b5a-aebb-f4fb018c953f",
              "title": "when the veteran status is general or vet",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
              "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "8a50daa1-35eb-43a7-87fe-09c5d333881c",
                  "title": "vet",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                  "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not show is deceased field",
                      "fullTitle": "Veteran Status UI when the veteran status is general or vet vet should not show is deceased field",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "changeVeteranStatus(wrapper, veteranStatus);\n(0, _chai.expect)(queryIsDeceased()).to.be.null;",
                      "err": {},
                      "uuid": "e3268c43-160c-43d8-a7d5-4319ea441ecd",
                      "parentUUID": "8a50daa1-35eb-43a7-87fe-09c5d333881c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e3268c43-160c-43d8-a7d5-4319ea441ecd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "bad55110-8c48-4e51-baf2-a181a1e16412",
                  "title": "general",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                  "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not show is deceased field",
                      "fullTitle": "Veteran Status UI when the veteran status is general or vet general should not show is deceased field",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "changeVeteranStatus(wrapper, veteranStatus);\n(0, _chai.expect)(queryIsDeceased()).to.be.null;",
                      "err": {},
                      "uuid": "bd02fecc-f99c-4103-924e-efb1264c2ec6",
                      "parentUUID": "bad55110-8c48-4e51-baf2-a181a1e16412",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bd02fecc-f99c-4103-924e-efb1264c2ec6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "fcbdb1ec-4083-4cf1-8e7c-a34ca0155df5",
              "title": "when veteran status is behalf of vet",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
              "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"when veteran status is behalf of vet\"",
                  "fullTitle": "Veteran Status UI when veteran status is behalf of vet \"before each\" hook in \"when veteran status is behalf of vet\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "changeVeteranStatus(wrapper, 'behalf of vet');",
                  "err": {},
                  "uuid": "c0708ee0-7c37-4f89-a908-0a344c019c1f",
                  "parentUUID": "fcbdb1ec-4083-4cf1-8e7c-a34ca0155df5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should NOT have are you the dependent",
                  "fullTitle": "Veteran Status UI when veteran status is behalf of vet should NOT have are you the dependent",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(wrapper.queryByText('Are you the dependent?')).not.to.exist;",
                  "err": {},
                  "uuid": "000f248e-b373-4196-8aa1-52bf4775d799",
                  "parentUUID": "fcbdb1ec-4083-4cf1-8e7c-a34ca0155df5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "000f248e-b373-4196-8aa1-52bf4775d799"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "50814b52-04ff-4744-8f62-0fc80a41c407",
              "title": "when veteran status is dependent",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
              "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/status/veteranStatusUI.unit.spec.jsx",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"when veteran status is dependent\"",
                  "fullTitle": "Veteran Status UI when veteran status is dependent \"before each\" hook in \"when veteran status is dependent\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "changeVeteranStatus(wrapper, 'dependent');",
                  "err": {},
                  "uuid": "b22d3b6f-c292-490d-95cc-41a314d9ab3c",
                  "parentUUID": "50814b52-04ff-4744-8f62-0fc80a41c407",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should require are you the dependent",
                  "fullTitle": "Veteran Status UI when veteran status is dependent should require are you the dependent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var isDependent = wrapper.getByText(_veteranStatusUI.veteranStatusUI.isDependent['ui:title'], {\n  exact: false\n});\n(0, _chai.expect)(isDependent).to.contain.text('Required');",
                  "err": {},
                  "uuid": "d1f705e8-a306-4e81-a347-8e865aee2f04",
                  "parentUUID": "50814b52-04ff-4744-8f62-0fc80a41c407",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1f705e8-a306-4e81-a347-8e865aee2f04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b55c5694-84b5-4967-8557-b244be92441f",
          "title": "topic",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
          "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "27e8e13a-5a91-4afe-84ea-817cf0601f81",
              "title": "filterTopicArrayByLabel",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
              "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return correct sub topics",
                  "fullTitle": "topic filterTopicArrayByLabel should return correct sub topics",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var subTopicValues = (0, _topic.filterTopicArrayByLabel)(testSchema.properties.topic, 'Caregiver Support Program');\n(0, _chai.expect)(subTopicValues).to.have.ordered.members(['Comprehensive Family Caregiver Program', 'General Caregiver Support/Education', 'VA Supportive Services']);",
                  "err": {},
                  "uuid": "af4fa691-f543-4126-946d-d39db3f4644a",
                  "parentUUID": "27e8e13a-5a91-4afe-84ea-817cf0601f81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return sub topics for complex levelTwo",
                  "fullTitle": "topic filterTopicArrayByLabel should return sub topics for complex levelTwo",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var subTopicValues = (0, _topic.filterTopicArrayByLabel)(testSchema.properties.topic, 'Health & Medical Issues & Services');\n(0, _chai.expect)(subTopicValues).to.have.ordered.members(['Health/Medical Eligibility & Programs', 'Medical Care Issues at Specific Facility', 'Prosthetics, Med Devices & Sensory Aids', 'Women Veterans Health Care']);",
                  "err": {},
                  "uuid": "71217c2e-fd0a-4536-8e9d-11b0d7732e11",
                  "parentUUID": "27e8e13a-5a91-4afe-84ea-817cf0601f81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return level three topics when isLevelThree is true",
                  "fullTitle": "topic filterTopicArrayByLabel should return level three topics when isLevelThree is true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var subTopicValues = (0, _topic.filterTopicArrayByLabel)(testSchema.properties.topic.anyOf[1].properties.levelTwo, 'Health/Medical Eligibility & Programs', true);\n(0, _chai.expect)(subTopicValues).to.have.ordered.members(['Apply for Health Benefits (Veterans)', 'Medical Care for Veterans within USA']);",
                  "err": {},
                  "uuid": "b4399fb4-86cc-426c-97d5-38b1fd05eb95",
                  "parentUUID": "27e8e13a-5a91-4afe-84ea-817cf0601f81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return level three topics for burial benefits",
                  "fullTitle": "topic filterTopicArrayByLabel should return level three topics for burial benefits",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var subTopicValues = (0, _topic.filterTopicArrayByLabel)(testSchema.properties.topic.anyOf[2].properties.levelTwo, 'Burial Benefits', true);\n(0, _chai.expect)(subTopicValues).to.have.ordered.members(['Compensation Request', 'All Other Burial Benefit Inquiries']);",
                  "err": {},
                  "uuid": "a8845056-a860-4f82-b9e8-0edd8b39dde3",
                  "parentUUID": "27e8e13a-5a91-4afe-84ea-817cf0601f81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af4fa691-f543-4126-946d-d39db3f4644a",
                "71217c2e-fd0a-4536-8e9d-11b0d7732e11",
                "b4399fb4-86cc-426c-97d5-38b1fd05eb95",
                "a8845056-a860-4f82-b9e8-0edd8b39dde3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "cdbb806e-1564-4ca1-a821-80eb3f28898f",
              "title": "getTopicsWithSubtopicsByCategory",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
              "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return levelTwo topics with levelThree subtopics",
                  "fullTitle": "topic getTopicsWithSubtopicsByCategory should return levelTwo topics with levelThree subtopics",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var topicsWithSubtopicsByCategory = (0, _topic.getTopicsWithSubtopicsByCategory)(testSchema.properties.topic);\nvar expectedResult = {\n  'Burial & Memorial Benefits (NCA)': ['Burial Benefits'],\n  'Health & Medical Issues & Services': ['Health/Medical Eligibility & Programs', 'Prosthetics, Med Devices & Sensory Aids', 'Women Veterans Health Care']\n};\n(0, _chai.expect)(topicsWithSubtopicsByCategory).to.deep.include(expectedResult);",
                  "err": {},
                  "uuid": "01ffdeef-1907-4077-834a-90f26846b899",
                  "parentUUID": "cdbb806e-1564-4ca1-a821-80eb3f28898f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01ffdeef-1907-4077-834a-90f26846b899"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "35377a79-4f4f-4285-ad1a-fc870ae44ef1",
              "title": "isValidFacilityCode",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
              "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "8a0aeb71-c8d4-4dc3-8ba0-3ad0bd44d5c4",
                  "title": "invalid facility code",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
                  "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be invalid for special characters",
                      "fullTitle": "topic isValidFacilityCode invalid facility code should be invalid for special characters",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _topic.isValidFacilityCode)('@bcd1234')).to.be.false;",
                      "err": {},
                      "uuid": "0aeb7436-95af-44cd-9ab6-4abdda8fc3e5",
                      "parentUUID": "8a0aeb71-c8d4-4dc3-8ba0-3ad0bd44d5c4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be invalid for length greater than 8 characters",
                      "fullTitle": "topic isValidFacilityCode invalid facility code should be invalid for length greater than 8 characters",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _topic.isValidFacilityCode)('123456789')).to.be.false;",
                      "err": {},
                      "uuid": "f6b68563-1480-441c-a45e-2d59ead7f61c",
                      "parentUUID": "8a0aeb71-c8d4-4dc3-8ba0-3ad0bd44d5c4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be invalid for length less than 8 characters",
                      "fullTitle": "topic isValidFacilityCode invalid facility code should be invalid for length less than 8 characters",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _topic.isValidFacilityCode)('123456789')).to.be.false;",
                      "err": {},
                      "uuid": "d0dc633d-28b2-407c-a79d-b3fdcc2b8158",
                      "parentUUID": "8a0aeb71-c8d4-4dc3-8ba0-3ad0bd44d5c4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0aeb7436-95af-44cd-9ab6-4abdda8fc3e5",
                    "f6b68563-1480-441c-a45e-2d59ead7f61c",
                    "d0dc633d-28b2-407c-a79d-b3fdcc2b8158"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "8aa483bf-5165-4fca-9406-5e4fce70c4a6",
                  "title": "valid facility code",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
                  "file": "/src/applications/ask-a-question/tests/unit/form/inquiry/topic/topic.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be valid for facility code with exactly 8 characters",
                      "fullTitle": "topic isValidFacilityCode valid facility code should be valid for facility code with exactly 8 characters",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _topic.isValidFacilityCode)('AaBb1234')).to.be.true;",
                      "err": {},
                      "uuid": "f1b38d97-05c4-44cd-9ed2-f57088781a60",
                      "parentUUID": "8aa483bf-5165-4fca-9406-5e4fce70c4a6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f1b38d97-05c4-44cd-9ed2-f57088781a60"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "27936740-1a65-465b-bfef-7a2d5ed5420b",
          "title": "Veteran Information Page",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
          "file": "/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should show optional fields when veteran status is not general question",
              "fullTitle": "Veteran Information Page should show optional fields when veteran status is not general question",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "renderWithVeteranStatus({\n  veteranStatus: 'vet'\n});\n(0, _queryHelper.getText)(wrapper, _veteranServiceInformationUI.veteranServiceInformationUI.dateOfBirth['ui:title'], 'veteranServiceInformation').shouldExist();\n(0, _queryHelper.getLabelText)(wrapper, _veteranServiceInformationUI.veteranServiceInformationUI.socialSecurityNumber['ui:title'], 'veteranServiceInformation').shouldExist();\n(0, _queryHelper.getLabelText)(wrapper, _veteranServiceInformationUI.veteranServiceInformationUI.serviceNumber['ui:title'], 'veteranServiceInformation').shouldExist();\n(0, _queryHelper.getLabelText)(wrapper, _veteranServiceInformationUI.veteranServiceInformationUI.claimNumber['ui:title'], 'veteranServiceInformation').shouldExist();\n(0, _queryHelper.getText)(wrapper, _veteranServiceInformationUI.veteranServiceInformationUI.serviceDateRange.from['ui:title'], 'veteranServiceInformation').shouldExist();\n(0, _queryHelper.getText)(wrapper, _veteranServiceInformationUI.veteranServiceInformationUI.serviceDateRange.to['ui:title'], 'veteranServiceInformation').shouldExist();",
              "err": {},
              "uuid": "47e83464-166d-453f-b406-bcac91c2654e",
              "parentUUID": "27936740-1a65-465b-bfef-7a2d5ed5420b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "6366c64e-e3b2-4b9a-b19c-e7927d66dae1",
              "title": "when on behalf of veteran",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
              "file": "/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"when on behalf of veteran\"",
                  "fullTitle": "Veteran Information Page when on behalf of veteran \"before each\" hook in \"when on behalf of veteran\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "renderWithVeteranStatus({\n  veteranStatus: 'behalf of vet'\n});",
                  "err": {},
                  "uuid": "bca5ad51-f7ba-458c-9cf5-34edff5a96a0",
                  "parentUUID": "6366c64e-e3b2-4b9a-b19c-e7927d66dae1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should require branch of service",
                  "fullTitle": "Veteran Information Page when on behalf of veteran should require branch of service",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expectBranchOfServiceToBeRequired(wrapper);",
                  "err": {},
                  "uuid": "530ee58c-b026-4dcc-88a8-b611e7625329",
                  "parentUUID": "6366c64e-e3b2-4b9a-b19c-e7927d66dae1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not show veteran information if veteran status is not myself as a veteran",
                  "fullTitle": "Veteran Information Page when on behalf of veteran should not show veteran information if veteran status is not myself as a veteran",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "nameFieldsShouldNotExist(wrapper, 'veteranInformation');\naddressFieldsShouldNotExist(wrapper, 'veteranInformation');\n(0, _queryHelper.getLabelText)(wrapper, _labels.daytimePhoneAreaCodeTitle, 'veteranInformation').shouldNotExist();\n(0, _queryHelper.getLabelText)(wrapper, _labels.emailTitle, 'veteranInformation').shouldNotExist();",
                  "err": {},
                  "uuid": "e9de868c-f860-4e67-88d5-89e9600a4126",
                  "parentUUID": "6366c64e-e3b2-4b9a-b19c-e7927d66dae1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not show veteran information when relationship to veteran is veteran",
                  "fullTitle": "Veteran Information Page when on behalf of veteran should not show veteran information when relationship to veteran is veteran",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "renderWithVeteranStatus({\n  veteranStatus: 'behalf of vet',\n  relationshipToVeteran: 'Veteran'\n});\nnameFieldsShouldNotExist(wrapper, 'veteranInformation');\naddressFieldsShouldNotExist(wrapper, 'veteranInformation');\n(0, _queryHelper.getLabelText)(wrapper, _labels.daytimePhoneAreaCodeTitle, 'veteranInformation').shouldNotExist();\n(0, _queryHelper.getLabelText)(wrapper, _labels.emailTitle, 'veteranInformation').shouldNotExist();",
                  "err": {},
                  "uuid": "efb2ad6b-509a-4e9e-8362-31bc85b9f401",
                  "parentUUID": "6366c64e-e3b2-4b9a-b19c-e7927d66dae1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "92271a9f-c688-477b-baa2-91d91e9e0562",
                  "title": "relationship to veteran is not veteran",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
                  "file": "/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"relationship to veteran is not veteran\"",
                      "fullTitle": "Veteran Information Page when on behalf of veteran relationship to veteran is not veteran \"before each\" hook in \"relationship to veteran is not veteran\"",
                      "timedOut": false,
                      "duration": 62,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "renderWithVeteranStatus({\n  veteranStatus: 'behalf of vet',\n  relationshipToVeteran: 'Son'\n});",
                      "err": {},
                      "uuid": "9b1210b9-f85c-4dba-9651-24a0bdb33703",
                      "parentUUID": "92271a9f-c688-477b-baa2-91d91e9e0562",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should show veteran information",
                      "fullTitle": "Veteran Information Page when on behalf of veteran relationship to veteran is not veteran should show veteran information",
                      "timedOut": false,
                      "duration": 86,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "nameFieldsShouldExist(wrapper, 'veteranInformation');\naddressFieldsShouldExist(wrapper, 'veteranInformation');\n(0, _queryHelper.getLabelText)(wrapper, _labels.daytimePhoneAreaCodeTitle, 'veteranInformation').shouldExist();\n(0, _queryHelper.getLabelText)(wrapper, _labels.emailTitle, 'veteranInformation').shouldExist();",
                      "err": {},
                      "uuid": "f63b1219-c0aa-4f55-b692-fc8de0a5b0e1",
                      "parentUUID": "92271a9f-c688-477b-baa2-91d91e9e0562",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require veteran first name, last name, country, and email",
                      "fullTitle": "Veteran Information Page when on behalf of veteran relationship to veteran is not veteran should require veteran first name, last name, country, and email",
                      "timedOut": false,
                      "duration": 54,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "minimalPersonalInformationFieldsRequired(wrapper, 'veteranInformation');",
                      "err": {},
                      "uuid": "5dd31c9d-4289-4f89-91bf-ea74417594f0",
                      "parentUUID": "92271a9f-c688-477b-baa2-91d91e9e0562",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should show reduced veteran information when veteran is deceased",
                      "fullTitle": "Veteran Information Page when on behalf of veteran relationship to veteran is not veteran should show reduced veteran information when veteran is deceased",
                      "timedOut": false,
                      "duration": 51,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "wrapper.unmount();\nrenderWithVeteranStatus({\n  veteranStatus: 'behalf of vet',\n  relationshipToVeteran: 'Son',\n  veteranIsDeceased: true\n});\nnameFieldsShouldExist(wrapper, 'veteranInformation');\naddressFieldsShouldNotExist(wrapper, 'veteranInformation');\n(0, _queryHelper.getLabelText)(wrapper, _labels.daytimePhoneAreaCodeTitle, 'veteranInformation').shouldNotExist();\n(0, _queryHelper.getLabelText)(wrapper, _labels.emailTitle, 'veteranInformation').shouldNotExist();",
                      "err": {},
                      "uuid": "b7715879-6e51-475c-b842-605a113ec762",
                      "parentUUID": "92271a9f-c688-477b-baa2-91d91e9e0562",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f63b1219-c0aa-4f55-b692-fc8de0a5b0e1",
                    "5dd31c9d-4289-4f89-91bf-ea74417594f0",
                    "b7715879-6e51-475c-b842-605a113ec762"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 191,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [
                "530ee58c-b026-4dcc-88a8-b611e7625329",
                "e9de868c-f860-4e67-88d5-89e9600a4126",
                "efb2ad6b-509a-4e9e-8362-31bc85b9f401"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "54a2290b-197e-4a44-a7e8-235b7537a2f0",
              "title": "for myself as veteran",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
              "file": "/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"for myself as veteran\"",
                  "fullTitle": "Veteran Information Page for myself as veteran \"before each\" hook in \"for myself as veteran\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "renderWithVeteranStatus({\n  veteranStatus: 'vet'\n});",
                  "err": {},
                  "uuid": "28d3b33d-fadf-4514-acdf-0b00e15ac1a2",
                  "parentUUID": "54a2290b-197e-4a44-a7e8-235b7537a2f0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should require branch of service",
                  "fullTitle": "Veteran Information Page for myself as veteran should require branch of service",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expectBranchOfServiceToBeRequired(wrapper);",
                  "err": {},
                  "uuid": "93e92370-2894-43a7-b137-f144ccc8eab7",
                  "parentUUID": "54a2290b-197e-4a44-a7e8-235b7537a2f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93e92370-2894-43a7-b137-f144ccc8eab7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2e4c2700-3949-40b5-bc1f-48cbc092e1f5",
              "title": "for the dependent of a veteran",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
              "file": "/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"for the dependent of a veteran\"",
                  "fullTitle": "Veteran Information Page for the dependent of a veteran \"before each\" hook in \"for the dependent of a veteran\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "renderWithVeteranStatus({\n  veteranStatus: 'dependent'\n});",
                  "err": {},
                  "uuid": "6111d3af-f01d-4581-8d66-7a8c86a0da71",
                  "parentUUID": "2e4c2700-3949-40b5-bc1f-48cbc092e1f5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should require branch of service",
                  "fullTitle": "Veteran Information Page for the dependent of a veteran should require branch of service",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expectBranchOfServiceToBeRequired(wrapper);",
                  "err": {},
                  "uuid": "b5377c36-6d20-489a-af92-3766356dda2f",
                  "parentUUID": "2e4c2700-3949-40b5-bc1f-48cbc092e1f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not show dependent information if person filling form is dependent",
                  "fullTitle": "Veteran Information Page for the dependent of a veteran should not show dependent information if person filling form is dependent",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "renderWithVeteranStatus({\n  veteranStatus: 'dependent',\n  isDependent: true\n});\nnameFieldsShouldNotExist(wrapper, 'dependentInformation');\naddressFieldsShouldNotExist(wrapper, 'dependentInformation');\n(0, _queryHelper.getLabelText)(wrapper, _labels.daytimePhoneAreaCodeTitle, 'dependentInformation').shouldNotExist();\n(0, _queryHelper.getLabelText)(wrapper, _labels.emailTitle, 'dependentInformation').shouldNotExist();",
                  "err": {},
                  "uuid": "da745adc-53d5-4dff-b576-64ff6caae0d0",
                  "parentUUID": "2e4c2700-3949-40b5-bc1f-48cbc092e1f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show dependent information if person filling form is not dependent",
                  "fullTitle": "Veteran Information Page for the dependent of a veteran should show dependent information if person filling form is not dependent",
                  "timedOut": false,
                  "duration": 115,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "renderWithVeteranStatus({\n  veteranStatus: 'dependent',\n  isDependent: false\n});\nrelationshipToVeteranShouldExist(wrapper);\nnameFieldsShouldExist(wrapper, 'dependentInformation');\naddressFieldsShouldExist(wrapper, 'dependentInformation');\n(0, _queryHelper.getLabelText)(wrapper, _labels.daytimePhoneAreaCodeTitle, 'dependentInformation').shouldExist();\n(0, _queryHelper.getLabelText)(wrapper, _labels.emailTitle, 'dependentInformation').shouldExist();",
                  "err": {},
                  "uuid": "cec6d113-78c4-4757-b38c-51073fdcfd17",
                  "parentUUID": "2e4c2700-3949-40b5-bc1f-48cbc092e1f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should require dependent first name, last name, country, and email if person filling form is not dependent",
                  "fullTitle": "Veteran Information Page for the dependent of a veteran should require dependent first name, last name, country, and email if person filling form is not dependent",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "renderWithVeteranStatus({\n  veteranStatus: 'dependent',\n  isDependent: false\n});\nminimalPersonalInformationFieldsRequired(wrapper, 'dependentInformation ');",
                  "err": {},
                  "uuid": "1044f307-618c-42da-81a1-347694ffe92c",
                  "parentUUID": "2e4c2700-3949-40b5-bc1f-48cbc092e1f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "5a56abf7-e498-43b9-b4b4-8310528eb989",
                  "title": "relationship to veteran is not veteran",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
                  "file": "/src/applications/ask-a-question/tests/unit/form/veteran/veteranInformationPage.unit.spec.jsx",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"relationship to veteran is not veteran\"",
                      "fullTitle": "Veteran Information Page for the dependent of a veteran relationship to veteran is not veteran \"before each\" hook in \"relationship to veteran is not veteran\"",
                      "timedOut": false,
                      "duration": 23,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "renderWithVeteranStatus({\n  veteranStatus: 'dependent',\n  relationshipToVeteran: 'Son'\n});",
                      "err": {},
                      "uuid": "ddc38446-10fe-4030-9ee9-bea80d7018ef",
                      "parentUUID": "5a56abf7-e498-43b9-b4b4-8310528eb989",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should show veteran information",
                      "fullTitle": "Veteran Information Page for the dependent of a veteran relationship to veteran is not veteran should show veteran information",
                      "timedOut": false,
                      "duration": 71,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "nameFieldsShouldExist(wrapper, 'veteranInformation');\naddressFieldsShouldExist(wrapper, 'veteranInformation');\n(0, _queryHelper.getLabelText)(wrapper, _labels.daytimePhoneAreaCodeTitle, 'veteranInformation').shouldExist();\n(0, _queryHelper.getLabelText)(wrapper, _labels.emailTitle, 'veteranInformation').shouldExist();",
                      "err": {},
                      "uuid": "281b5fba-7b06-4006-a3ce-6d36690082cd",
                      "parentUUID": "5a56abf7-e498-43b9-b4b4-8310528eb989",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require veteran first name, last name, country, and email",
                      "fullTitle": "Veteran Information Page for the dependent of a veteran relationship to veteran is not veteran should require veteran first name, last name, country, and email",
                      "timedOut": false,
                      "duration": 50,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "minimalPersonalInformationFieldsRequired(wrapper, 'veteranInformation');",
                      "err": {},
                      "uuid": "bc014a49-4855-4cd7-b7b6-64c543010d2a",
                      "parentUUID": "5a56abf7-e498-43b9-b4b4-8310528eb989",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should show reduced veteran information when veteran is deceased",
                      "fullTitle": "Veteran Information Page for the dependent of a veteran relationship to veteran is not veteran should show reduced veteran information when veteran is deceased",
                      "timedOut": false,
                      "duration": 49,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "wrapper.unmount();\nrenderWithVeteranStatus({\n  veteranStatus: 'dependent',\n  relationshipToVeteran: 'Son',\n  veteranIsDeceased: true\n});\nnameFieldsShouldExist(wrapper, 'veteranInformation');\naddressFieldsShouldNotExist(wrapper, 'veteranInformation');\n(0, _queryHelper.getLabelText)(wrapper, _labels.daytimePhoneAreaCodeTitle, 'veteranInformation').shouldNotExist();\n(0, _queryHelper.getLabelText)(wrapper, _labels.emailTitle, 'veteranInformation').shouldNotExist();",
                      "err": {},
                      "uuid": "0904da71-8546-4335-a51d-5578f3a42fa0",
                      "parentUUID": "5a56abf7-e498-43b9-b4b4-8310528eb989",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not reduce dependent information when veteran is deceased",
                      "fullTitle": "Veteran Information Page for the dependent of a veteran relationship to veteran is not veteran should not reduce dependent information when veteran is deceased",
                      "timedOut": false,
                      "duration": 242,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "renderWithVeteranStatus({\n  veteranStatus: 'dependent',\n  relationshipToVeteran: 'Son',\n  veteranIsDeceased: true,\n  isDependent: false\n});\nnameFieldsShouldExist(wrapper, 'dependentInformation');\naddressFieldsShouldExist(wrapper, 'dependentInformation');\n(0, _queryHelper.getLabelText)(wrapper, _labels.daytimePhoneAreaCodeTitle, 'dependentInformation').shouldExist();\n(0, _queryHelper.getLabelText)(wrapper, _labels.emailTitle, 'dependentInformation').shouldExist();",
                      "err": {},
                      "uuid": "f20895f1-eab7-4bba-ad60-927b16c25f3d",
                      "parentUUID": "5a56abf7-e498-43b9-b4b4-8310528eb989",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "281b5fba-7b06-4006-a3ce-6d36690082cd",
                    "bc014a49-4855-4cd7-b7b6-64c543010d2a",
                    "0904da71-8546-4335-a51d-5578f3a42fa0",
                    "f20895f1-eab7-4bba-ad60-927b16c25f3d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 412,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [
                "b5377c36-6d20-489a-af92-3766356dda2f",
                "da745adc-53d5-4dff-b576-64ff6caae0d0",
                "cec6d113-78c4-4757-b38c-51073fdcfd17",
                "1044f307-618c-42da-81a1-347694ffe92c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 261,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "47e83464-166d-453f-b406-bcac91c2654e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 43,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "undefined_2025-03-19T172726128Z",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "min",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "consoleReporter": "min",
        "reportDir": "mocha/results",
        "reportFilename": "undefined_2025-03-19T172726128Z",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}