{
  "stats": {
    "suites": 340,
    "tests": 866,
    "passes": 866,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-19T17:31:58.524Z",
    "end": "2025-03-19T17:32:08.010Z",
    "duration": 9486,
    "testsRegistered": 866,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d0a4832f-6265-40d0-bc1d-e8b98d6bad97",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook: beforeEach in \"{root}\"",
          "fullTitle": "\"before each\" hook: beforeEach in \"{root}\"",
          "timedOut": false,
          "duration": 2,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cov_qaw57qkz8().f[20]++;\ncov_qaw57qkz8().s[70]++;\nsetupJSDom();\ncov_qaw57qkz8().s[71]++;\nresetFetch();\ncov_qaw57qkz8().s[72]++;\ncleanupStorage();\ncov_qaw57qkz8().s[73]++;\nif (isStressTest == 'false') {\n  cov_qaw57qkz8().b[12][0]++;\n  cov_qaw57qkz8().s[74]++;\n  checkAllowList(this);\n} else {\n  cov_qaw57qkz8().b[12][1]++;\n}\ncov_qaw57qkz8().s[75]++;\nif ((cov_qaw57qkz8().b[14][0]++, process.env.CI) || (cov_qaw57qkz8().b[14][1]++, ['trace', 'debug'].includes(process.env.LOG_LEVEL))) {\n  cov_qaw57qkz8().b[13][0]++;\n  cov_qaw57qkz8().s[76]++;\n  console.log('running: ', this.currentTest.file.slice(this.currentTest.file.indexOf('src')));\n} else {\n  cov_qaw57qkz8().b[13][1]++;\n}",
          "err": {},
          "uuid": "b2604bba-e3c4-4adc-8dce-3f42fa6259d0",
          "parentUUID": "d0a4832f-6265-40d0-bc1d-e8b98d6bad97",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook: afterEach in \"{root}\"",
          "fullTitle": "\"after each\" hook: afterEach in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cov_qaw57qkz8().f[21]++;\ncov_qaw57qkz8().s[77]++;\ncleanupStorage();\ncov_qaw57qkz8().s[78]++;\nflushPromises();",
          "err": {},
          "uuid": "e1146a08-6c29-413b-a072-d57f75b73dc0",
          "parentUUID": "d0a4832f-6265-40d0-bc1d-e8b98d6bad97",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "(0, _pure.cleanup)();",
          "err": {},
          "uuid": "b53f9148-9b3a-40b3-9cad-0b10ef8bbfb5",
          "parentUUID": "d0a4832f-6265-40d0-bc1d-e8b98d6bad97",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "bd8de961-b3ab-44e0-bb19-038ee8eb6c84",
          "title": "date functions",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/node_modules/@department-of-veterans-affairs/component-library/format-date.unit.spec.js",
          "file": "/src/applications/claims-status/node_modules/@department-of-veterans-affairs/component-library/format-date.unit.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "formats date to DayOfWeek, MonthName DayOfMonth, Year at Hour:Minutes [AM|PM]",
              "fullTitle": "date functions formats date to DayOfWeek, MonthName DayOfMonth, Year at Hour:Minutes [AM|PM]",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var e=(0,_formatDate.formatDate)(new Date(Date.UTC(1995,11,17,8,24,0)));(0,_chai.expect)(e).to.equal(\"Sunday, December 17, 1995 at 3:24 AM\")",
              "err": {},
              "uuid": "3d72befc-7ed8-42aa-932c-14d741f35a9d",
              "parentUUID": "bd8de961-b3ab-44e0-bb19-038ee8eb6c84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "formats date to DayOfWeek, MonthName DayOfMonth, Year",
              "fullTitle": "date functions formats date to DayOfWeek, MonthName DayOfMonth, Year",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var e=(0,_formatDate.formatDateShort)(new Date(Date.UTC(1995,11,17,8,24,0)));(0,_chai.expect)(e).to.equal(\"Sunday, December 17, 1995\")",
              "err": {},
              "uuid": "09e8df85-8e5f-4691-87ad-eae42fc3f26b",
              "parentUUID": "bd8de961-b3ab-44e0-bb19-038ee8eb6c84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "formats date to Hour:Minutes [AM|PM]",
              "fullTitle": "date functions formats date to Hour:Minutes [AM|PM]",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var e=(0,_formatDate.formatTime)(new Date(Date.UTC(1995,11,17,8,24,0)));(0,_chai.expect)(e).to.equal(\"3:24 AM\")",
              "err": {},
              "uuid": "3d49fab2-2dae-490f-82dc-461b4bbc1dc4",
              "parentUUID": "bd8de961-b3ab-44e0-bb19-038ee8eb6c84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns false if date1 is not after date2",
              "fullTitle": "date functions returns false if date1 is not after date2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var e=new Date(Date.UTC(2021,11,17,8,24,0)),t=new Date(Date.UTC(2022,11,17,8,24,0));(0,_chai.expect)((0,_formatDate.isDateAfter)(e,t)).to.equal(!1)",
              "err": {},
              "uuid": "dbd0509e-4b8f-4c35-a212-0aedc26390ab",
              "parentUUID": "bd8de961-b3ab-44e0-bb19-038ee8eb6c84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns true if date1 is after date2",
              "fullTitle": "date functions returns true if date1 is after date2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var e=new Date(Date.UTC(2022,11,17,8,24,0)),t=new Date(Date.UTC(2021,11,17,8,24,0));(0,_chai.expect)((0,_formatDate.isDateAfter)(e,t)).to.equal(!0)",
              "err": {},
              "uuid": "5838934a-c69a-4010-a5c7-0690e4cecbcb",
              "parentUUID": "bd8de961-b3ab-44e0-bb19-038ee8eb6c84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns true if date1 is before date2",
              "fullTitle": "date functions returns true if date1 is before date2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var e=new Date(Date.UTC(1995,11,17,8,24,0)),t=new Date(Date.UTC(1996,11,17,8,24,0));(0,_chai.expect)((0,_formatDate.isDateBefore)(e,t)).to.equal(!0)",
              "err": {},
              "uuid": "c9402705-3a9a-45b5-b618-9af4139b6616",
              "parentUUID": "bd8de961-b3ab-44e0-bb19-038ee8eb6c84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns false if date1 is not before date2",
              "fullTitle": "date functions returns false if date1 is not before date2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var e=new Date(Date.UTC(1996,11,17,8,24,0)),t=new Date(Date.UTC(1995,11,17,8,24,0));(0,_chai.expect)((0,_formatDate.isDateBefore)(e,t)).to.equal(!1)",
              "err": {},
              "uuid": "215dd908-e77c-400d-b674-ce5549666fc9",
              "parentUUID": "bd8de961-b3ab-44e0-bb19-038ee8eb6c84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns true if date1 is on the same day as date2",
              "fullTitle": "date functions returns true if date1 is on the same day as date2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var e=new Date(Date.UTC(2022,11,17,8,24,0)),t=new Date(Date.UTC(2022,11,17,10,24,0));(0,_chai.expect)((0,_formatDate.isDateSameDay)(e,t)).to.equal(!0)",
              "err": {},
              "uuid": "674b236e-514f-4925-bc60-3f001e0ab499",
              "parentUUID": "bd8de961-b3ab-44e0-bb19-038ee8eb6c84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns false if date1 is not on the same day as date2",
              "fullTitle": "date functions returns false if date1 is not on the same day as date2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var e=new Date(Date.UTC(2022,11,17,8,24,0)),t=new Date(Date.UTC(1995,11,17,8,24,0));(0,_chai.expect)((0,_formatDate.isDateSameDay)(e,t)).to.equal(!1)",
              "err": {},
              "uuid": "86fbc8b9-839a-4bce-a3a2-c1cb868baafa",
              "parentUUID": "bd8de961-b3ab-44e0-bb19-038ee8eb6c84",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d72befc-7ed8-42aa-932c-14d741f35a9d",
            "09e8df85-8e5f-4691-87ad-eae42fc3f26b",
            "3d49fab2-2dae-490f-82dc-461b4bbc1dc4",
            "dbd0509e-4b8f-4c35-a212-0aedc26390ab",
            "5838934a-c69a-4010-a5c7-0690e4cecbcb",
            "c9402705-3a9a-45b5-b618-9af4139b6616",
            "215dd908-e77c-400d-b674-ce5549666fc9",
            "674b236e-514f-4925-bc60-3f001e0ab499",
            "86fbc8b9-839a-4bce-a3a2-c1cb868baafa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d55f5597-0673-4e88-8271-f238116425c5",
          "title": "uniqueId functionality",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/node_modules/@department-of-veterans-affairs/component-library/utilities.unit.spec.js",
          "file": "/src/applications/claims-status/node_modules/@department-of-veterans-affairs/component-library/utilities.unit.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "appends the unique to a prefix if provided",
              "fullTitle": "uniqueId functionality appends the unique to a prefix if provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0,_chai.expect)((0,_utilities.uniqueId)(\"contact_\")).to.equal(\"contact_1\")",
              "err": {},
              "uuid": "39521f40-8fa2-4a22-8d1b-0877c16fcd58",
              "parentUUID": "d55f5597-0673-4e88-8271-f238116425c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "will generate a unique ID per each instance of use",
              "fullTitle": "uniqueId functionality will generate a unique ID per each instance of use",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var e=(0,_utilities.uniqueId)(\"test-\");(0,_chai.expect)(e).to.equal(\"test-1\");var i=(0,_utilities.uniqueId)(\"test-\");(0,_chai.expect)(i).to.equal(\"test-2\")",
              "err": {},
              "uuid": "87e4d56a-ac76-446e-8954-ec6896bb1c31",
              "parentUUID": "d55f5597-0673-4e88-8271-f238116425c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39521f40-8fa2-4a22-8d1b-0877c16fcd58",
            "87e4d56a-ac76-446e-8954-ec6896bb1c31"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "6de722ab-4401-465b-a448-e4d57e40d5f2",
          "title": "Actions",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "73012ac6-5b4c-4f57-90c5-aa8a3a931d96",
              "title": "getClaimLetters",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get claim letters",
                  "fullTitle": "Actions getClaimLetters should get claim letters",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var apiStub = _sinon.default.stub(api, 'apiRequest');\napiStub.returns(Promise.resolve({\n  data: []\n}));\n(0, _actions.getClaimLetters)();\n(0, _chai.expect)(apiStub.called).to.be.true;\napiStub.restore();",
                  "err": {},
                  "uuid": "e62768f6-85fa-412d-8e9b-e6758678be93",
                  "parentUUID": "73012ac6-5b4c-4f57-90c5-aa8a3a931d96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e62768f6-85fa-412d-8e9b-e6758678be93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e3aa9d30-1cc6-4303-b828-26d04570863e",
              "title": "submit5103",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"submit5103\"",
                  "fullTitle": "Actions submit5103 \"before all\" hook in \"submit5103\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.listen();",
                  "err": {},
                  "uuid": "503919d0-667f-4c3b-9035-2a1bc0cb3e7b",
                  "parentUUID": "e3aa9d30-1cc6-4303-b828-26d04570863e",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before each\" hook in \"submit5103\"",
                  "fullTitle": "Actions submit5103 \"before each\" hook in \"submit5103\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.events.on('request:start', function (req) {\n  expectedUrl = req.url.href;\n});",
                  "err": {},
                  "uuid": "0b2ff837-929c-47b6-9dde-bd068b42587d",
                  "parentUUID": "e3aa9d30-1cc6-4303-b828-26d04570863e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"submit5103\"",
                  "fullTitle": "Actions submit5103 \"after all\" hook in \"submit5103\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return server.close();",
                  "err": {},
                  "uuid": "38651f60-2274-4b97-a853-817f25fdfa9f",
                  "parentUUID": "e3aa9d30-1cc6-4303-b828-26d04570863e",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"after each\" hook in \"submit5103\"",
                  "fullTitle": "Actions submit5103 \"after each\" hook in \"submit5103\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.resetHandlers();\nexpectedUrl = undefined;",
                  "err": {},
                  "uuid": "6bc60217-6da9-4dd9-945e-511800292071",
                  "parentUUID": "e3aa9d30-1cc6-4303-b828-26d04570863e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [],
              "suites": [
                {
                  "uuid": "6152ae6b-5b97-467a-9d03-ea80c23a0d22",
                  "title": "when cstClaimPhasesEnabled is true",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should submit request and set notification",
                      "fullTitle": "Actions submit5103 when cstClaimPhasesEnabled is true should submit request and set notification",
                      "timedOut": false,
                      "duration": 18,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var ID = 5;\nserver.use(_msw.rest.post(\"https://dev-api.va.gov/v0/benefits_claims/\".concat(ID, \"/submit5103\"), function (req, res, ctx) {\n  return res(ctx.status(200), ctx.json({\n    // eslint-disable-next-line camelcase\n    job_id: ID\n  }));\n}));\nvar thunk = (0, _actions.submit5103)(ID, 12345, true);\nvar dispatchSpy = _sinon.default.spy();\nvar dispatch = function dispatch(action) {\n  dispatchSpy(action);\n  if (dispatchSpy.callCount === 3) {\n    (0, _chai.expect)(expectedUrl).to.contain('5/submit5103');\n    (0, _chai.expect)(dispatchSpy.firstCall.args[0]).to.eql({\n      type: _types.SUBMIT_DECISION_REQUEST\n    });\n    (0, _chai.expect)(dispatchSpy.secondCall.args[0]).to.eql({\n      type: _types.SET_DECISION_REQUESTED\n    });\n    (0, _chai.expect)(dispatchSpy.thirdCall.args[0].type).to.eql(_types.SET_NOTIFICATION);\n    (0, _chai.expect)(dispatchSpy.thirdCall.args[0].message.title).to.eql('We received your evidence waiver');\n    (0, _chai.expect)(dispatchSpy.thirdCall.args[0].message.body).to.eql('Thank you. We’ll move your claim to the next step as soon as possible.');\n    done();\n  }\n};\nthunk(dispatch);",
                      "err": {},
                      "uuid": "73d8e233-2aeb-401c-b2bc-d7045003d99a",
                      "parentUUID": "6152ae6b-5b97-467a-9d03-ea80c23a0d22",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "73d8e233-2aeb-401c-b2bc-d7045003d99a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 18,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "bf5f6901-f4f1-493e-84be-c1aecd684f86",
                  "title": "when cstClaimPhasesEnabled is false",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should submit request and set notification",
                      "fullTitle": "Actions submit5103 when cstClaimPhasesEnabled is false should submit request and set notification",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var ID = 5;\nserver.use(_msw.rest.post(\"https://dev-api.va.gov/v0/benefits_claims/\".concat(ID, \"/submit5103\"), function (req, res, ctx) {\n  return res(ctx.status(200), ctx.json({\n    // eslint-disable-next-line camelcase\n    job_id: ID\n  }));\n}));\nvar thunk = (0, _actions.submit5103)(ID);\nvar dispatchSpy = _sinon.default.spy();\nvar dispatch = function dispatch(action) {\n  dispatchSpy(action);\n  if (dispatchSpy.callCount === 3) {\n    (0, _chai.expect)(expectedUrl).to.contain('5/submit5103');\n    (0, _chai.expect)(dispatchSpy.firstCall.args[0]).to.eql({\n      type: _types.SUBMIT_DECISION_REQUEST\n    });\n    (0, _chai.expect)(dispatchSpy.secondCall.args[0]).to.eql({\n      type: _types.SET_DECISION_REQUESTED\n    });\n    (0, _chai.expect)(dispatchSpy.thirdCall.args[0].type).to.eql(_types.SET_NOTIFICATION);\n    (0, _chai.expect)(dispatchSpy.thirdCall.args[0].message.title).to.eql('Request received');\n    (0, _chai.expect)(dispatchSpy.thirdCall.args[0].message.body).to.eql('Thank you. We have your claim request and will make a decision.');\n    done();\n  }\n};\nthunk(dispatch);",
                      "err": {},
                      "uuid": "f09cd943-0b90-4f0d-8915-8a4fcd4f2b5a",
                      "parentUUID": "bf5f6901-f4f1-493e-84be-c1aecd684f86",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail on error",
                      "fullTitle": "Actions submit5103 when cstClaimPhasesEnabled is false should fail on error",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var ID = 5;\nserver.use(_msw.rest.post(\"https://dev-api.va.gov/v0/benefits_claims/\".concat(ID, \"/submit5103\"), function (req, res, ctx) {\n  return res(ctx.status(400), ctx.json({\n    status: 400\n  }));\n}));\nvar thunk = (0, _actions.submit5103)(ID);\nvar dispatchSpy = _sinon.default.spy();\nvar dispatch = function dispatch(action) {\n  dispatchSpy(action);\n  if (dispatchSpy.callCount === 2) {\n    (0, _chai.expect)(dispatchSpy.firstCall.args[0]).to.eql({\n      type: _types.SUBMIT_DECISION_REQUEST\n    });\n    (0, _chai.expect)(dispatchSpy.secondCall.args[0].type).to.eql(_types.SET_DECISION_REQUEST_ERROR);\n    done();\n  }\n};\nthunk(dispatch);",
                      "err": {},
                      "uuid": "7a303560-366c-4755-89e4-0387436aff0b",
                      "parentUUID": "bf5f6901-f4f1-493e-84be-c1aecd684f86",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f09cd943-0b90-4f0d-8915-8a4fcd4f2b5a",
                    "7a303560-366c-4755-89e4-0387436aff0b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 10,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d722e2ed-4421-4308-99eb-70ee5834f881",
              "title": "getClaim",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "dispatches GET_CLAIM_DETAIL and SET_CLAIM_DETAIL",
                  "fullTitle": "Actions getClaim dispatches GET_CLAIM_DETAIL and SET_CLAIM_DETAIL",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var apiStub = _sinon.default.stub(api, 'apiRequest');\napiStub.returns(Promise.resolve({\n  data: []\n}));\nvar thunk = (0, _actions.getClaim)(1);\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_types.GET_CLAIM_DETAIL);\n  (0, _chai.expect)(dispatch.secondCall.args[0]).to.eql({\n    type: _types.SET_CLAIM_DETAIL,\n    claim: []\n  });\n}).then(function () {\n  return apiStub.restore();\n}).then(done, done);",
                  "err": {},
                  "uuid": "8e3bfdfc-2760-40e6-a28f-297449272ec1",
                  "parentUUID": "d722e2ed-4421-4308-99eb-70ee5834f881",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "dispatches SET_CLAIMS_UNAVAILABLE",
                  "fullTitle": "Actions getClaim dispatches SET_CLAIMS_UNAVAILABLE",
                  "timedOut": false,
                  "duration": 520,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var thunk = (0, _actions.getClaim)(1);\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.secondCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_types.SET_CLAIMS_UNAVAILABLE);\n}).then(done, done);",
                  "err": {},
                  "uuid": "9927a6d4-e893-4664-9154-4e1f9b98874a",
                  "parentUUID": "d722e2ed-4421-4308-99eb-70ee5834f881",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "navigates to `/your-claims` when errors on 404 ",
                  "fullTitle": "Actions getClaim navigates to `/your-claims` when errors on 404 ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var apiStub = _sinon.default.stub(api, 'apiRequest');\napiStub.returns(Promise.reject({\n  status: 404\n}));\nvar navigate = _sinon.default.spy();\nvar thunk = (0, _actions.getClaim)(1, navigate);\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_types.GET_CLAIM_DETAIL);\n  (0, _chai.expect)(navigate.called).to.be.true;\n}).then(function () {\n  return apiStub.restore();\n}).then(done, done);",
                  "err": {},
                  "uuid": "bb493754-23b7-4ac6-b162-27747bbe6b44",
                  "parentUUID": "d722e2ed-4421-4308-99eb-70ee5834f881",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e3bfdfc-2760-40e6-a28f-297449272ec1",
                "9927a6d4-e893-4664-9154-4e1f9b98874a",
                "bb493754-23b7-4ac6-b162-27747bbe6b44"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 522,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4eae8c74-677c-4b86-95d1-fabe19eaad89",
              "title": "clearClaim",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions clearClaim should return the correct action object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.clearClaim)();\n(0, _chai.expect)(action).to.eql({\n  type: _types.CLEAR_CLAIM_DETAIL\n});",
                  "err": {},
                  "uuid": "760f6b38-058b-4464-8c28-c12de6175ac9",
                  "parentUUID": "4eae8c74-677c-4b86-95d1-fabe19eaad89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "760f6b38-058b-4464-8c28-c12de6175ac9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d2c3b814-663a-415c-a2b4-271d4f2ea2d2",
              "title": "getClaims",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "dispatches FETCH_CLAIMS_PENDING and FETCH_CLAIMS_SUCCESS",
                  "fullTitle": "Actions getClaims dispatches FETCH_CLAIMS_PENDING and FETCH_CLAIMS_SUCCESS",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var apiStub = _sinon.default.stub(api, 'apiRequest');\napiStub.returns(Promise.resolve({\n  data: []\n}));\nvar thunk = (0, _actions.getClaims)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_types.FETCH_CLAIMS_PENDING);\n  (0, _chai.expect)(dispatch.secondCall.args[0]).to.eql({\n    type: _types.FETCH_CLAIMS_SUCCESS,\n    claims: []\n  });\n}).then(function () {\n  return apiStub.restore();\n}).then(done, done);",
                  "err": {},
                  "uuid": "82cd965e-9400-4b17-8a41-ebb49663ebd4",
                  "parentUUID": "d2c3b814-663a-415c-a2b4-271d4f2ea2d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "dispatches FETCH_CLAIMS_ERROR - null",
                  "fullTitle": "Actions getClaims dispatches FETCH_CLAIMS_ERROR - null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var apiStub = _sinon.default.stub(api, 'apiRequest');\napiStub.returns(Promise.reject(null));\nvar thunk = (0, _actions.getClaims)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.secondCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_types.FETCH_CLAIMS_ERROR);\n}).then(function () {\n  return apiStub.restore();\n}).then(done, done);",
                  "err": {},
                  "uuid": "7e82196e-7020-4f4b-a879-909a1031c133",
                  "parentUUID": "d2c3b814-663a-415c-a2b4-271d4f2ea2d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "dispatches FETCH_CLAIMS_ERROR - not null error code",
                  "fullTitle": "Actions getClaims dispatches FETCH_CLAIMS_ERROR - not null error code",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var apiStub = _sinon.default.stub(api, 'apiRequest');\napiStub.returns(Promise.reject({\n  errors: [{\n    status: 404\n  }]\n}));\nvar thunk = (0, _actions.getClaims)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.secondCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_types.FETCH_CLAIMS_ERROR);\n}).then(function () {\n  return apiStub.restore();\n}).then(done, done);",
                  "err": {},
                  "uuid": "018046f0-ee0c-4a31-90ec-b72eebeda7b5",
                  "parentUUID": "d2c3b814-663a-415c-a2b4-271d4f2ea2d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82cd965e-9400-4b17-8a41-ebb49663ebd4",
                "7e82196e-7020-4f4b-a879-909a1031c133",
                "018046f0-ee0c-4a31-90ec-b72eebeda7b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7e0ae4d2-00df-4052-abc1-370d31a2b475",
              "title": "setNotification",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions setNotification should return the correct action object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.setNotification)('Testing');\n(0, _chai.expect)(action).to.eql({\n  type: _types.SET_NOTIFICATION,\n  message: 'Testing'\n});",
                  "err": {},
                  "uuid": "560e1ed6-4f35-4369-afec-0a380779464b",
                  "parentUUID": "7e0ae4d2-00df-4052-abc1-370d31a2b475",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "560e1ed6-4f35-4369-afec-0a380779464b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6d649351-0cb9-4deb-b1eb-f4b1fadfb53b",
              "title": "setAdditionalEvidenceNotification",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions setAdditionalEvidenceNotification should return the correct action object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.setAdditionalEvidenceNotification)('Testing');\n(0, _chai.expect)(action).to.eql({\n  type: _types.SET_ADDITIONAL_EVIDENCE_NOTIFICATION,\n  message: 'Testing'\n});",
                  "err": {},
                  "uuid": "5a3be815-5a4d-4fc4-b46a-99c7b1b92572",
                  "parentUUID": "6d649351-0cb9-4deb-b1eb-f4b1fadfb53b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a3be815-5a4d-4fc4-b46a-99c7b1b92572"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "65b99a02-a0c1-4f37-b80e-9a2891f13486",
              "title": "resetUploads",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions resetUploads should return the correct action object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.resetUploads)();\n(0, _chai.expect)(action).to.eql({\n  type: _types.RESET_UPLOADS\n});",
                  "err": {},
                  "uuid": "9f2134d7-8752-4128-8979-19e27fb97c5d",
                  "parentUUID": "65b99a02-a0c1-4f37-b80e-9a2891f13486",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f2134d7-8752-4128-8979-19e27fb97c5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "a2d60650-a37b-49f1-be5b-b89bacf0da94",
              "title": "addFile",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions addFile should return the correct action object",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.addFile)('Testing');\n(0, _chai.expect)(action).to.eql({\n  type: _types.ADD_FILE,\n  files: 'Testing',\n  isEncrypted: false\n});",
                  "err": {},
                  "uuid": "05fc9361-77ea-4a6f-8ede-5d3454963e61",
                  "parentUUID": "a2d60650-a37b-49f1-be5b-b89bacf0da94",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05fc9361-77ea-4a6f-8ede-5d3454963e61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c63fdf62-11c3-4445-9296-b984d1f569aa",
              "title": "addFile with encrypted flag",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions addFile with encrypted flag should return the correct action object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.addFile)('Testing', {\n  isEncrypted: true\n});\n(0, _chai.expect)(action).to.eql({\n  type: _types.ADD_FILE,\n  files: 'Testing',\n  isEncrypted: true\n});",
                  "err": {},
                  "uuid": "a19a1580-3d5a-4e05-a79d-2c61eac52ae5",
                  "parentUUID": "c63fdf62-11c3-4445-9296-b984d1f569aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a19a1580-3d5a-4e05-a79d-2c61eac52ae5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7ba142f6-0356-4d51-a50b-9987b00b10da",
              "title": "removeFile",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions removeFile should return the correct action object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.removeFile)(1);\n(0, _chai.expect)(action).to.eql({\n  type: _types.REMOVE_FILE,\n  index: 1\n});",
                  "err": {},
                  "uuid": "b20aded1-769a-4480-abe6-b56c6d379513",
                  "parentUUID": "7ba142f6-0356-4d51-a50b-9987b00b10da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b20aded1-769a-4480-abe6-b56c6d379513"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f9fb2697-119a-4c3a-bbec-259c9703c00e",
              "title": "clearNotification",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions clearNotification should return the correct action object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.clearNotification)();\n(0, _chai.expect)(action).to.eql({\n  type: _types.CLEAR_NOTIFICATION\n});",
                  "err": {},
                  "uuid": "541f45e9-9956-48ea-bf00-59247f50f8bf",
                  "parentUUID": "f9fb2697-119a-4c3a-bbec-259c9703c00e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "541f45e9-9956-48ea-bf00-59247f50f8bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "32358039-10e0-43a9-8859-5e857e18e1a4",
              "title": "clearAdditionalEvidenceNotification",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions clearAdditionalEvidenceNotification should return the correct action object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.clearAdditionalEvidenceNotification)();\n(0, _chai.expect)(action).to.eql({\n  type: _types.CLEAR_ADDITIONAL_EVIDENCE_NOTIFICATION\n});",
                  "err": {},
                  "uuid": "3e045df8-628d-439a-a402-5c6d4433ef71",
                  "parentUUID": "32358039-10e0-43a9-8859-5e857e18e1a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e045df8-628d-439a-a402-5c6d4433ef71"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b4587a55-c264-499d-ae26-2b4ef8eea19e",
              "title": "updateField",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions updateField should return the correct action object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.updateField)('path', 'field');\n(0, _chai.expect)(action).to.eql({\n  type: _types.UPDATE_FIELD,\n  path: 'path',\n  field: 'field'\n});",
                  "err": {},
                  "uuid": "2682ca23-48bd-4874-935b-6a13f0e530a2",
                  "parentUUID": "b4587a55-c264-499d-ae26-2b4ef8eea19e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2682ca23-48bd-4874-935b-6a13f0e530a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d51389ca-396e-482d-acac-60a8975a81f7",
              "title": "setFieldsDirty",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions setFieldsDirty should return the correct action object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.setFieldsDirty)();\n(0, _chai.expect)(action).to.eql({\n  type: _types.SET_FIELDS_DIRTY\n});",
                  "err": {},
                  "uuid": "23a3c5a6-13c3-4aa4-a2b5-b043bdcd24b5",
                  "parentUUID": "d51389ca-396e-482d-acac-60a8975a81f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23a3c5a6-13c3-4aa4-a2b5-b043bdcd24b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ced54449-0eb6-414a-b2dc-c1727adf89ec",
              "title": "setLastPage",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct action object",
                  "fullTitle": "Actions setLastPage should return the correct action object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var action = (0, _actions.setLastPage)(2);\n(0, _chai.expect)(action).to.eql({\n  type: _types.SET_LAST_PAGE,\n  page: 2\n});",
                  "err": {},
                  "uuid": "fbabe2ea-60dd-4792-87b1-a8ff57958b9a",
                  "parentUUID": "ced54449-0eb6-414a-b2dc-c1727adf89ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbabe2ea-60dd-4792-87b1-a8ff57958b9a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c6205015-a92a-45dc-b1c3-dd91310cf40c",
              "title": "cancelUpload",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should call cancel on uploader",
                  "fullTitle": "Actions cancelUpload should call cancel on uploader",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var oldDataLayer = global.window.dataLayer;\nglobal.window.dataLayer = [];\nvar thunk = (0, _actions.cancelUpload)();\nvar uploaderSpy = _sinon.default.spy();\nvar dispatchSpy = _sinon.default.spy();\nvar getState = function getState() {\n  return {\n    disability: {\n      status: {\n        uploads: {\n          uploader: {\n            cancelAll: uploaderSpy\n          }\n        }\n      }\n    }\n  };\n};\nthunk(dispatchSpy, getState);\n(0, _chai.expect)(uploaderSpy.called).to.be.true;\n(0, _chai.expect)(dispatchSpy.firstCall.args[0].type).to.equal(_types.CANCEL_UPLOAD);\nglobal.window.dataLayer = oldDataLayer;",
                  "err": {},
                  "uuid": "09f30432-9890-49ed-8179-74ee96adca9c",
                  "parentUUID": "c6205015-a92a-45dc-b1c3-dd91310cf40c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09f30432-9890-49ed-8179-74ee96adca9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "a82857c2-1912-4981-8f50-4ec4126a24a1",
              "title": "getStemClaims",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/actions/index.unit.spec.jsx",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"getStemClaims\"",
                  "fullTitle": "Actions getStemClaims \"before all\" hook in \"getStemClaims\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.listen({\n  onUnhandledRequest: 'bypass'\n});",
                  "err": {},
                  "uuid": "143944dc-dbfc-4009-ad81-93fc2e0801fc",
                  "parentUUID": "a82857c2-1912-4981-8f50-4ec4126a24a1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"getStemClaims\"",
                  "fullTitle": "Actions getStemClaims \"after all\" hook in \"getStemClaims\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return server.close();",
                  "err": {},
                  "uuid": "9805a2da-6137-401c-946a-a3e5dbdf5f10",
                  "parentUUID": "a82857c2-1912-4981-8f50-4ec4126a24a1",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"after each\" hook in \"getStemClaims\"",
                  "fullTitle": "Actions getStemClaims \"after each\" hook in \"getStemClaims\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.resetHandlers();",
                  "err": {},
                  "uuid": "01e865b3-0508-4bb2-8886-77742bd269df",
                  "parentUUID": "a82857c2-1912-4981-8f50-4ec4126a24a1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should fetch stem claims when canUseMocks true",
                  "fullTitle": "Actions getStemClaims should fetch stem claims when canUseMocks true",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var useMocksStub = _sinon.default.stub(constants, 'canUseMocks').returns(true);\nvar thunk = (0, _actions.getStemClaims)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  (0, _chai.expect)(dispatch.firstCall.args[0].type).to.equal(_types.FETCH_STEM_CLAIMS_PENDING);\n  (0, _chai.expect)(dispatch.secondCall.args[0].type).to.equal(_types.FETCH_STEM_CLAIMS_SUCCESS);\n}).then(function () {\n  return useMocksStub.restore();\n}).then(done, done);",
                  "err": {},
                  "uuid": "ab8e5d12-10bf-47d8-b43e-f3a8a74d34a7",
                  "parentUUID": "a82857c2-1912-4981-8f50-4ec4126a24a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fetch stem claims",
                  "fullTitle": "Actions getStemClaims should fetch stem claims",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.use(_msw.rest.get(\"https://dev-api.va.gov/v0/education_benefits_claims/stem_claim_status\", function (req, res, ctx) {\n  return res(ctx.status(200), ctx.json({\n    data: []\n  }));\n}));\nvar thunk = (0, _actions.getStemClaims)();\nvar dispatchSpy = _sinon.default.spy();\nvar dispatch = function dispatch(action) {\n  dispatchSpy(action);\n  if (dispatchSpy.callCount === 2) {\n    (0, _chai.expect)(dispatchSpy.firstCall.args[0].type).to.eql(_types.FETCH_STEM_CLAIMS_PENDING);\n    (0, _chai.expect)(dispatchSpy.secondCall.args[0].type).to.eql(_types.FETCH_STEM_CLAIMS_SUCCESS);\n    done();\n  }\n};\nthunk(dispatch);",
                  "err": {},
                  "uuid": "b0575a0d-ce4c-4dc9-8778-1eedeec41d1c",
                  "parentUUID": "a82857c2-1912-4981-8f50-4ec4126a24a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail on error",
                  "fullTitle": "Actions getStemClaims should fail on error",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.use(_msw.rest.get(\"https://dev-api.va.gov/v0/education_benefits_claims/stem_claim_status\", function (req, res, ctx) {\n  return res(ctx.status(400));\n}));\nvar thunk = (0, _actions.getStemClaims)();\nvar dispatchSpy = _sinon.default.spy();\nvar dispatch = function dispatch(action) {\n  dispatchSpy(action);\n  if (dispatchSpy.callCount === 2) {\n    (0, _chai.expect)(dispatchSpy.firstCall.args[0].type).to.eql(_types.FETCH_STEM_CLAIMS_PENDING);\n    (0, _chai.expect)(dispatchSpy.secondCall.args[0].type).to.eql(_types.FETCH_STEM_CLAIMS_ERROR);\n    done();\n  }\n};\nthunk(dispatch);",
                  "err": {},
                  "uuid": "0f7fe222-0c97-45ba-813f-8ec67ce3f6a6",
                  "parentUUID": "a82857c2-1912-4981-8f50-4ec4126a24a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab8e5d12-10bf-47d8-b43e-f3a8a74d34a7",
                "b0575a0d-ce4c-4dc9-8778-1eedeec41d1c",
                "0f7fe222-0c97-45ba-813f-8ec67ce3f6a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "037e8132-b0bf-4558-aa06-3e2f430ec82e",
          "title": "getAppealsV2",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/actions/indexGetAppealsV2.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/actions/indexGetAppealsV2.unit.spec.jsx",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: setup in \"getAppealsV2\"",
              "fullTitle": "getAppealsV2 \"before each\" hook: setup in \"getAppealsV2\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var response = {\n  url: _index.default.API_URL,\n  status: 200,\n  headers: {\n    get: function get() {\n      return 'application/json';\n    }\n  },\n  ok: true,\n  json: function json() {\n    return Promise.resolve({\n      data: []\n    });\n  }\n};\n(0, _helpers.mockFetch)(response);",
              "err": {},
              "uuid": "f77dbb80-0b87-4cc9-940d-a013e49ff8e1",
              "parentUUID": "037e8132-b0bf-4558-aa06-3e2f430ec82e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "dispatches FETCH_APPEALS_PENDING",
              "fullTitle": "getAppealsV2 dispatches FETCH_APPEALS_PENDING",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var thunk = (0, _actions.getAppealsV2)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_types.FETCH_APPEALS_PENDING);\n}).then(done, done);",
              "err": {},
              "uuid": "ab58343e-2472-425a-b217-20e2ca237aa8",
              "parentUUID": "037e8132-b0bf-4558-aa06-3e2f430ec82e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dispatches FETCH_APPEALS_SUCCESS",
              "fullTitle": "getAppealsV2 dispatches FETCH_APPEALS_SUCCESS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var thunk = (0, _actions.getAppealsV2)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.secondCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_types.FETCH_APPEALS_SUCCESS);\n}).then(done, done);",
              "err": {},
              "uuid": "73f6dd4a-49e7-4492-98fb-a99384b83262",
              "parentUUID": "037e8132-b0bf-4558-aa06-3e2f430ec82e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dispatches USER_FORBIDDEN_ERROR when GET fails with 403",
              "fullTitle": "getAppealsV2 Dispatches USER_FORBIDDEN_ERROR when GET fails with 403",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONResponse)(global.fetch.onCall(0), Promise.reject({\n  errors: [{\n    status: \"\".concat(code)\n  }]\n}));\nvar thunk = (0, _actions.getAppealsV2)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.secondCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(appealsErrors[code]);\n}).then(done, done);",
              "err": {},
              "uuid": "6d889e28-5519-4181-b29e-e59912b8bd9b",
              "parentUUID": "037e8132-b0bf-4558-aa06-3e2f430ec82e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dispatches RECORD_NOT_FOUND_ERROR when GET fails with 404",
              "fullTitle": "getAppealsV2 Dispatches RECORD_NOT_FOUND_ERROR when GET fails with 404",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONResponse)(global.fetch.onCall(0), Promise.reject({\n  errors: [{\n    status: \"\".concat(code)\n  }]\n}));\nvar thunk = (0, _actions.getAppealsV2)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.secondCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(appealsErrors[code]);\n}).then(done, done);",
              "err": {},
              "uuid": "f0d4fb4e-b925-4420-a388-ee0f01b3e1ea",
              "parentUUID": "037e8132-b0bf-4558-aa06-3e2f430ec82e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dispatches VALIDATION_ERROR when GET fails with 422",
              "fullTitle": "getAppealsV2 Dispatches VALIDATION_ERROR when GET fails with 422",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONResponse)(global.fetch.onCall(0), Promise.reject({\n  errors: [{\n    status: \"\".concat(code)\n  }]\n}));\nvar thunk = (0, _actions.getAppealsV2)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.secondCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(appealsErrors[code]);\n}).then(done, done);",
              "err": {},
              "uuid": "087e3aa3-b0c8-4ff5-b4a9-6d1b79ec6d50",
              "parentUUID": "037e8132-b0bf-4558-aa06-3e2f430ec82e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dispatches BACKEND_SERVICE_ERROR when GET fails with 502",
              "fullTitle": "getAppealsV2 Dispatches BACKEND_SERVICE_ERROR when GET fails with 502",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONResponse)(global.fetch.onCall(0), Promise.reject({\n  errors: [{\n    status: \"\".concat(code)\n  }]\n}));\nvar thunk = (0, _actions.getAppealsV2)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.secondCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(appealsErrors[code]);\n}).then(done, done);",
              "err": {},
              "uuid": "a62b1f7d-1fc2-41ef-a6c8-b1c074c7a815",
              "parentUUID": "037e8132-b0bf-4558-aa06-3e2f430ec82e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dispatches FETCH_APPEALS_ERROR when GET fails with 504",
              "fullTitle": "getAppealsV2 Dispatches FETCH_APPEALS_ERROR when GET fails with 504",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONResponse)(global.fetch.onCall(0), Promise.reject({\n  errors: [{\n    status: \"\".concat(code)\n  }]\n}));\nvar thunk = (0, _actions.getAppealsV2)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.secondCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(appealsErrors[code]);\n}).then(done, done);",
              "err": {},
              "uuid": "5aac8746-e804-4106-86ac-3c4d3fb7de0a",
              "parentUUID": "037e8132-b0bf-4558-aa06-3e2f430ec82e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ab58343e-2472-425a-b217-20e2ca237aa8",
            "73f6dd4a-49e7-4492-98fb-a99384b83262",
            "6d889e28-5519-4181-b29e-e59912b8bd9b",
            "f0d4fb4e-b925-4420-a388-ee0f01b3e1ea",
            "087e3aa3-b0c8-4ff5-b4a9-6d1b79ec6d50",
            "a62b1f7d-1fc2-41ef-a6c8-b1c074c7a815",
            "5aac8746-e804-4106-86ac-3c4d3fb7de0a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "33507c91-1f3c-468f-b87c-db327d8cd3fd",
          "title": "<AddingDetails>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/AddingDetails.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/AddingDetails.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render adding details alert",
              "fullTitle": "<AddingDetails> should render adding details alert",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_AddingDetails.default, null)),\n  getByText = _renderWithRouter.getByText;\ngetByText(\"We can't show all of the details of your claim. Please check back later.\");",
              "err": {},
              "uuid": "51d56f2f-2db4-41c3-9f1b-62f6fc197f39",
              "parentUUID": "33507c91-1f3c-468f-b87c-db327d8cd3fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "51d56f2f-2db4-41c3-9f1b-62f6fc197f39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ef9f04ef-3c8d-4c5c-ade9-2ac336f8bfb7",
          "title": "<Alert/>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/Alert.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/Alert.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<Alert/> should render",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Alert.default, null));\n(0, _chai.expect)(wrapper.type()).to.equal('li');\nwrapper.unmount();",
              "err": {},
              "uuid": "c8cc5332-d1d1-443e-8ead-393d86da019e",
              "parentUUID": "ef9f04ef-3c8d-4c5c-ade9-2ac336f8bfb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply warning styling on take_action alert types",
              "fullTitle": "<Alert/> should apply warning styling on take_action alert types",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  displayType: 'take_action'\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Alert.default, props));\nvar alertDiv = wrapper.find('.usa-alert-warning');\n(0, _chai.expect)(alertDiv.length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "91f05215-adaa-4f73-896b-f0b67a91cce5",
              "parentUUID": "ef9f04ef-3c8d-4c5c-ade9-2ac336f8bfb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should apply info styling on info alert types",
              "fullTitle": "<Alert/> should apply info styling on info alert types",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  displayType: 'info'\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Alert.default, props));\nvar alertDiv = wrapper.find('.usa-alert-info');\n(0, _chai.expect)(alertDiv.length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "199a3a7c-0ed7-4451-b046-ecee333a5303",
              "parentUUID": "ef9f04ef-3c8d-4c5c-ade9-2ac336f8bfb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display a title passed in as a prop",
              "fullTitle": "<Alert/> should display a title passed in as a prop",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var title = 'Test Title';\nvar props = {\n  title: title\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Alert.default, props));\nvar renderedTitle = wrapper.find('h4').render().text();\n(0, _chai.expect)(renderedTitle).to.equal(title);\nwrapper.unmount();",
              "err": {},
              "uuid": "b900a926-f533-41c7-8c08-67b8c5dee63d",
              "parentUUID": "ef9f04ef-3c8d-4c5c-ade9-2ac336f8bfb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display a description passed in as a prop",
              "fullTitle": "<Alert/> should display a description passed in as a prop",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var description = /*#__PURE__*/_react.default.createElement(\"p\", null, \"Test Description\");\nvar props = {\n  description: description\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Alert.default, props));\nvar alertContent = wrapper.find('.usa-alert-text').render().text();\n(0, _chai.expect)(alertContent).to.equal(description.props.children);\nwrapper.unmount();",
              "err": {},
              "uuid": "a461e3de-73df-4886-9c7a-d2077324cf05",
              "parentUUID": "ef9f04ef-3c8d-4c5c-ade9-2ac336f8bfb7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8cc5332-d1d1-443e-8ead-393d86da019e",
            "91f05215-adaa-4f73-896b-f0b67a91cce5",
            "199a3a7c-0ed7-4451-b046-ecee333a5303",
            "b900a926-f533-41c7-8c08-67b8c5dee63d",
            "a461e3de-73df-4886-9c7a-d2077324cf05"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "69977ed8-07c8-4766-aba2-f0b8db1784f3",
          "title": "<AlertsList/>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/AlertsList.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/AlertsList.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "renders",
              "fullTitle": "<AlertsList/> renders",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AlertsList.default, defaultProps));\n(0, _chai.expect)(wrapper.type()).to.equal('div');\nwrapper.unmount();",
              "err": {},
              "uuid": "4748b454-a793-4e4c-beeb-0347843410b2",
              "parentUUID": "69977ed8-07c8-4766-aba2-f0b8db1784f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render all alerts",
              "fullTitle": "<AlertsList/> should render all alerts",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AlertsList.default, defaultProps));\nvar alertsList = wrapper.find('Alert');\n(0, _chai.expect)(alertsList.length).to.equal(defaultProps.alerts.length);\nwrapper.unmount();",
              "err": {},
              "uuid": "aa497af0-a8d0-42b9-85ae-4899362a1141",
              "parentUUID": "69977ed8-07c8-4766-aba2-f0b8db1784f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if alerts prop missing",
              "fullTitle": "<AlertsList/> should return null if alerts prop missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AlertsList.default, null));\n(0, _chai.expect)(wrapper.type()).to.equal(null);\nwrapper.unmount();",
              "err": {},
              "uuid": "f4753547-8bb1-4544-9e55-4a5a0085d8a4",
              "parentUUID": "69977ed8-07c8-4766-aba2-f0b8db1784f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if alerts array empty",
              "fullTitle": "<AlertsList/> should return null if alerts array empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  alerts: []\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AlertsList.default, props));\n(0, _chai.expect)(wrapper.type()).to.equal(null);\nwrapper.unmount();",
              "err": {},
              "uuid": "ee09bdaa-f346-48f5-a852-f6d8159b12ea",
              "parentUUID": "69977ed8-07c8-4766-aba2-f0b8db1784f3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4748b454-a793-4e4c-beeb-0347843410b2",
            "aa497af0-a8d0-42b9-85ae-4899362a1141",
            "f4753547-8bb1-4544-9e55-4a5a0085d8a4",
            "ee09bdaa-f346-48f5-a852-f6d8159b12ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8d27bfb8-907a-4ae0-8d75-5ce130c16161",
          "title": "<AppealHeader/>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/AppealHeader.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/AppealHeader.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "renders",
              "fullTitle": "<AppealHeader/> renders",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealHeader.default, defaultProps));\n(0, _chai.expect)(wrapper.type()).to.equal('div');\nwrapper.unmount();",
              "err": {},
              "uuid": "88d4d305-3303-461f-96da-1846bb5db11e",
              "parentUUID": "8d27bfb8-907a-4ae0-8d75-5ce130c16161",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "renders the heading text passed in as a prop",
              "fullTitle": "<AppealHeader/> renders the heading text passed in as a prop",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealHeader.default, defaultProps));\n(0, _chai.expect)(wrapper.find('h1').text()).to.equal(defaultProps.heading);\nwrapper.unmount();",
              "err": {},
              "uuid": "24cbe65f-8609-4732-9138-ea0f8f0779a7",
              "parentUUID": "8d27bfb8-907a-4ae0-8d75-5ce130c16161",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "renders a last updated <p/> with a formatted date and time",
              "fullTitle": "<AppealHeader/> renders a last updated <p/> with a formatted date and time",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealHeader.default, defaultProps));\n(0, _chai.expect)(wrapper.find('p').text()).to.equal(formattedDate);\nwrapper.unmount();",
              "err": {},
              "uuid": "2e9467ec-a09b-428e-876b-bd9721b3ccd4",
              "parentUUID": "8d27bfb8-907a-4ae0-8d75-5ce130c16161",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "88d4d305-3303-461f-96da-1846bb5db11e",
            "24cbe65f-8609-4732-9138-ea0f8f0779a7",
            "2e9467ec-a09b-428e-876b-bd9721b3ccd4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ec8d2a50-7ee1-4beb-b8ab-c1fc6fb3cf05",
          "title": "<AppealHelpSidebar>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/AppealHelpSidebar.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/AppealHelpSidebar.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<AppealHelpSidebar> should render",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  aoj: 'vba'\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealHelpSidebar.default, props));\n(0, _chai.expect)(wrapper.find('NeedHelp')).to.not.be.false;\nwrapper.unmount();",
              "err": {},
              "uuid": "bb9ee34c-a325-4206-a315-c929a6b7d541",
              "parentUUID": "ec8d2a50-7ee1-4beb-b8ab-c1fc6fb3cf05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the vba version",
              "fullTitle": "<AppealHelpSidebar> should render the vba version",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  aoj: 'vba'\n};\nvar mockStore = {\n  getState: function getState() {\n    return {\n      featureToggles: {\n        // eslint-disable-next-line camelcase\n        omni_channel_link: true\n      }\n    };\n  },\n  subscribe: function subscribe() {},\n  dispatch: function dispatch() {}\n};\nvar wrapper = (0, _enzyme.mount)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: mockStore\n}, /*#__PURE__*/_react.default.createElement(_AppealHelpSidebar.default, props)));\n(0, _chai.expect)(wrapper.find('NeedHelp').text()).to.contain(\"We're here Monday through Friday, 8:00 a.m to 9:00 p.m ET.\");\nwrapper.unmount();",
              "err": {},
              "uuid": "cd2e7e30-9072-4073-a3fc-2b916cfe01e1",
              "parentUUID": "ec8d2a50-7ee1-4beb-b8ab-c1fc6fb3cf05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the vha version",
              "fullTitle": "<AppealHelpSidebar> should render the vha version",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  aoj: 'vha'\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealHelpSidebar.default, props));\n(0, _chai.expect)(wrapper.find('p').first().text()).to.equal('Call Health Care Benefits');\nwrapper.unmount();",
              "err": {},
              "uuid": "f111a818-87e6-4958-9afd-20cb1b4a2fe7",
              "parentUUID": "ec8d2a50-7ee1-4beb-b8ab-c1fc6fb3cf05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render null when nca",
              "fullTitle": "<AppealHelpSidebar> should render null when nca",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  aoj: 'nca'\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealHelpSidebar.default, props));\n(0, _chai.expect)(wrapper.isEmptyRender()).to.be.true;\nwrapper.unmount();",
              "err": {},
              "uuid": "f034aa2b-f2d6-49f4-a877-3bc55ee4838f",
              "parentUUID": "ec8d2a50-7ee1-4beb-b8ab-c1fc6fb3cf05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render null when other",
              "fullTitle": "<AppealHelpSidebar> should render null when other",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  aoj: 'other'\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealHelpSidebar.default, props));\n(0, _chai.expect)(wrapper.isEmptyRender()).to.be.true;\nwrapper.unmount();",
              "err": {},
              "uuid": "02682f96-4a1c-4116-93e2-bb592cb1036f",
              "parentUUID": "ec8d2a50-7ee1-4beb-b8ab-c1fc6fb3cf05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render null and capture sentry message with appeal type unknown",
              "fullTitle": "<AppealHelpSidebar> should render null and capture sentry message with appeal type unknown",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var spy = _sinon.default.spy(Sentry, 'captureMessage');\nvar props = {\n  aoj: 'unknown'\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealHelpSidebar.default, props));\n(0, _chai.expect)(wrapper.isEmptyRender()).to.be.true;\n(0, _chai.expect)(spy.called).to.be.true;\n(0, _chai.expect)(spy.firstCall.args[0]).to.equal('appeal-status-unexpected-aoj: unknown');\nwrapper.unmount();",
              "err": {},
              "uuid": "5b65b4f1-e522-412c-a85c-250f8c012455",
              "parentUUID": "ec8d2a50-7ee1-4beb-b8ab-c1fc6fb3cf05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bb9ee34c-a325-4206-a315-c929a6b7d541",
            "cd2e7e30-9072-4073-a3fc-2b916cfe01e1",
            "f111a818-87e6-4958-9afd-20cb1b4a2fe7",
            "f034aa2b-f2d6-49f4-a877-3bc55ee4838f",
            "02682f96-4a1c-4116-93e2-bb592cb1036f",
            "5b65b4f1-e522-412c-a85c-250f8c012455"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "20b2574a-3c16-4a27-a935-372403dd054f",
          "title": "<AppealInfo>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/AppealInfo.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/AppealInfo.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<AppealInfo> should render",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, defaultProps));\n(0, _chai.expect)(wrapper.type()).to.equal('div');\nwrapper.unmount();",
              "err": {},
              "uuid": "552213fa-7aa1-493e-83eb-f8d18cc1dd68",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render its children",
              "fullTitle": "<AppealInfo> should render its children",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, defaultProps)\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: /*#__PURE__*/_react.default.createElement(TestComponent, null)\n})))));\n(0, _chai.expect)(screen.getByTestId('children')).to.exist;",
              "err": {},
              "uuid": "b1f9446e-b0da-4afb-a6d7-e107600651d8",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render va-loading-indicator when appeals loading",
              "fullTitle": "<AppealInfo> should render va-loading-indicator when appeals loading",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  params: {\n    id: appealIdParam\n  },\n  appealsLoading: true\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, props), {\n  disableLifecycleMethods: true\n});\nvar loadingIndicator = wrapper.find('va-loading-indicator');\n(0, _chai.expect)(loadingIndicator.length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "dbc29750-9b7e-437a-a32a-7a37582e13fe",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the breadcrumbs",
              "fullTitle": "<AppealInfo> should render the breadcrumbs",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, defaultProps)),\n  container = _renderWithRouter.container;\nvar breadcrumbs = (0, _index.$)('va-breadcrumbs', container);\n(0, _chai.expect)(breadcrumbs.breadcrumbList.length).to.equal(3);",
              "err": {},
              "uuid": "8f9693b0-fe90-4e5a-b2bf-c61e54c83850",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a header for legacy",
              "fullTitle": "<AppealInfo> should render a header for legacy",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, defaultProps));\nvar header = wrapper.find('AppealHeader');\n(0, _chai.expect)(header.length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "d7c421e4-b62e-45fe-a223-fb6be5d62b3e",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a header for supplementalClaim",
              "fullTitle": "<AppealInfo> should render a header for supplementalClaim",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  params: {\n    id: _helpers.mockData.data[3].id\n  },\n  appeal: _helpers.mockData.data[3],\n  appealsLoading: false,\n  appealsAvailability: AVAILABLE,\n  getAppealsV2: function getAppealsV2() {}\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, props));\nvar header = wrapper.find('AppealHeader');\n(0, _chai.expect)(header.length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "f4095c0b-353c-4a32-ae89-ec75c4dd1fec",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a header for higherLevelReview",
              "fullTitle": "<AppealInfo> should render a header for higherLevelReview",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  params: {\n    id: _helpers.mockData.data[4].id\n  },\n  appeal: _helpers.mockData.data[4],\n  appealsLoading: false,\n  appealsAvailability: AVAILABLE,\n  getAppealsV2: function getAppealsV2() {}\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, props));\nvar header = wrapper.find('AppealHeader');\n(0, _chai.expect)(header.length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "de89e9df-b776-4c55-bb77-ff35ab6124c0",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a header for appeal",
              "fullTitle": "<AppealInfo> should render a header for appeal",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  params: {\n    id: _helpers.mockData.data[5].id\n  },\n  appeal: _helpers.mockData.data[5],\n  appealsLoading: false,\n  appealsAvailability: AVAILABLE,\n  getAppealsV2: function getAppealsV2() {}\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, props));\nvar header = wrapper.find('AppealHeader');\n(0, _chai.expect)(header.length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "74409563-6300-40e0-83ab-f2fb99159c11",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a tabbed navigator",
              "fullTitle": "<AppealInfo> should render a tabbed navigator",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, defaultProps));\nvar tabNavs = wrapper.find('AppealsV2TabNav');\n(0, _chai.expect)(tabNavs.length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "04ade327-98de-464e-b9d3-adeed86ba30d",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render CopyOfExam block",
              "fullTitle": "<AppealInfo> should render CopyOfExam block",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var children = /*#__PURE__*/_react.default.createElement(\"span\", {\n  className: \"test\"\n}, \"Child Goes Here\");\nvar props = (0, _merge2.default)({}, {\n  children: children\n}, defaultProps);\nvar mockStore = {\n  getState: function getState() {\n    return {\n      featureToggles: {\n        // eslint-disable-next-line camelcase\n        omni_channel_link: true\n      }\n    };\n  },\n  subscribe: function subscribe() {},\n  dispatch: function dispatch() {}\n};\nvar elem = /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: mockStore\n}, /*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, props));\nvar wrapper = (0, _enzyme.mount)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: elem\n}))));\n(0, _chai.expect)(wrapper.find('CopyOfExam').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "765fd2a7-a034-465f-b234-af38014038c1",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have access to the appeal id in route params",
              "fullTitle": "<AppealInfo> should have access to the appeal id in route params",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, defaultProps));\nvar appealId = wrapper.instance().props.params.id;\n(0, _chai.expect)(appealId).to.equal(appealIdParam);\nwrapper.unmount();",
              "err": {},
              "uuid": "ab1119ef-db9e-49e2-a446-b9c9a7daf1fc",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render no records warning when user forbidden",
              "fullTitle": "<AppealInfo> should render no records warning when user forbidden",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  appealsAvailability: _types.USER_FORBIDDEN_ERROR\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, props));\n(0, _chai.expect)(wrapper.find('#appealsDownMessage').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "67c0536b-1c5f-460f-8189-4c4ec7c50683",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render no records warning when RECORD_NOT_FOUND_ERROR present",
              "fullTitle": "<AppealInfo> should render no records warning when RECORD_NOT_FOUND_ERROR present",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  appealsAvailability: _types.RECORD_NOT_FOUND_ERROR\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, props));\n(0, _chai.expect)(wrapper.find('#recordsNotFoundMessage').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "a1d91c82-27c3-470c-b46d-918c68052c5d",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render system down message when VALIDATION_ERROR present",
              "fullTitle": "<AppealInfo> should render system down message when VALIDATION_ERROR present",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  appealsAvailability: _types.VALIDATION_ERROR\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, props));\n(0, _chai.expect)(wrapper.find('#appealsDownMessage').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "947232f2-c8c8-42d6-b3b6-facad10b42c3",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render system down message when BACKEND_SERVICE_ERROR present",
              "fullTitle": "<AppealInfo> should render system down message when BACKEND_SERVICE_ERROR present",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  appealsAvailability: _types.BACKEND_SERVICE_ERROR\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, props));\n(0, _chai.expect)(wrapper.find('#appealsDownMessage').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "40dc2009-04df-4edf-8b5d-365cfc0c9654",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render system down message when FETCH_APPEALS_ERROR present",
              "fullTitle": "<AppealInfo> should render system down message when FETCH_APPEALS_ERROR present",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  appealsAvailability: _types.FETCH_APPEALS_ERROR\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, props));\n(0, _chai.expect)(wrapper.find('#appealsDownMessage').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "cd946758-0ac4-4440-b519-8cce72b6bf86",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render appeals down message when other error present",
              "fullTitle": "<AppealInfo> should render appeals down message when other error present",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  appealsAvailability: 'SOME_OTHER_ERROR'\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealInfo.AppealInfo, props));\n(0, _chai.expect)(wrapper.find('#appealsDownMessage').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "cd3e9ce6-137b-4378-bc1f-7f0bbd7d6a10",
              "parentUUID": "20b2574a-3c16-4a27-a935-372403dd054f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "552213fa-7aa1-493e-83eb-f8d18cc1dd68",
            "b1f9446e-b0da-4afb-a6d7-e107600651d8",
            "dbc29750-9b7e-437a-a32a-7a37582e13fe",
            "8f9693b0-fe90-4e5a-b2bf-c61e54c83850",
            "d7c421e4-b62e-45fe-a223-fb6be5d62b3e",
            "f4095c0b-353c-4a32-ae89-ec75c4dd1fec",
            "de89e9df-b776-4c55-bb77-ff35ab6124c0",
            "74409563-6300-40e0-83ab-f2fb99159c11",
            "04ade327-98de-464e-b9d3-adeed86ba30d",
            "765fd2a7-a034-465f-b234-af38014038c1",
            "ab1119ef-db9e-49e2-a446-b9c9a7daf1fc",
            "67c0536b-1c5f-460f-8189-4c4ec7c50683",
            "a1d91c82-27c3-470c-b46d-918c68052c5d",
            "947232f2-c8c8-42d6-b3b6-facad10b42c3",
            "40dc2009-04df-4edf-8b5d-365cfc0c9654",
            "cd946758-0ac4-4440-b519-8cce72b6bf86",
            "cd3e9ce6-137b-4378-bc1f-7f0bbd7d6a10"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 62,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4820ea61-f411-496b-93dc-47527d7dc662",
          "title": "<AppealListItem>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/AppealListItem.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/AppealListItem.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<AppealListItem> should render",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealListItem.default, defaultProps));\n(0, _chai.expect)(wrapper.name()).to.equal('ClaimCard');\nwrapper.unmount();",
              "err": {},
              "uuid": "6328e9c1-9976-433b-86dc-b45e003053b3",
              "parentUUID": "4820ea61-f411-496b-93dc-47527d7dc662",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the right date with submitted on",
              "fullTitle": "<AppealListItem> should show the right date with submitted on",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealListItem.default, defaultProps));\n(0, _chai.expect)(wrapper.find('ClaimCard').shallow().find('.submitted-on').text()).to.equal('Received on May 1, 2016');\nwrapper.unmount();",
              "err": {},
              "uuid": "45944d9e-c294-4180-b4d2-66bfa14b55ab",
              "parentUUID": "4820ea61-f411-496b-93dc-47527d7dc662",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should correctly title a VHA Supplemental Claim",
              "fullTitle": "<AppealListItem> should correctly title a VHA Supplemental Claim",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealListItem.default, vhaScProps));\n(0, _chai.expect)(wrapper.find('ClaimCard').shallow().find('.claim-list-item-header').text()).to.contain('Supplemental claim for health care');\nwrapper.unmount();",
              "err": {},
              "uuid": "698fa6cb-7056-4e36-88b7-ac4874afb684",
              "parentUUID": "4820ea61-f411-496b-93dc-47527d7dc662",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should say \"issue\" if there is only one issue on appeal",
              "fullTitle": "<AppealListItem> should say \"issue\" if there is only one issue on appeal",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _set.default)('appeal.attributes.issues', [\"I'm an issue!\"], defaultProps);\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealListItem.default, props));\nvar issuesText = wrapper.find('.card-status > p').first().text();\n(0, _chai.expect)(issuesText).to.contain('Issue');\n(0, _chai.expect)(issuesText).to.not.contain('Issues');\nwrapper.unmount();",
              "err": {},
              "uuid": "deba0bf5-a548-4de0-9935-bb46db6c785e",
              "parentUUID": "4820ea61-f411-496b-93dc-47527d7dc662",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should say \"issues\" if there are multiple issues on appeal",
              "fullTitle": "<AppealListItem> should say \"issues\" if there are multiple issues on appeal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealListItem.default, defaultProps));\nvar issuesText = wrapper.find('.card-status > p').first().text();\n(0, _chai.expect)(issuesText).to.contain('Issues');\nwrapper.unmount();",
              "err": {},
              "uuid": "da20b41e-d2c1-4c8b-9dcd-3bb824991169",
              "parentUUID": "4820ea61-f411-496b-93dc-47527d7dc662",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should say \"review\" if the appeal is a Supplemental Claim",
              "fullTitle": "<AppealListItem> should say \"review\" if the appeal is a Supplemental Claim",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealListItem.default, vhaScProps));\nvar issuesText = wrapper.find('.card-status > p').first().text();\n(0, _chai.expect)(issuesText).to.contain('review');\nwrapper.unmount();",
              "err": {},
              "uuid": "6356c876-b990-45bf-b431-d09e4b0ee82b",
              "parentUUID": "4820ea61-f411-496b-93dc-47527d7dc662",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a link to the appeal status page",
              "fullTitle": "<AppealListItem> should create a link to the appeal status page",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealListItem.default, defaultProps));\nvar linkProps = wrapper.find('ClaimCardLink').first().props();\n(0, _chai.expect)(linkProps.href).to.equal(\"/appeals/\".concat(defaultProps.appeal.id, \"/status\"));\nwrapper.unmount();",
              "err": {},
              "uuid": "38c47c43-baf6-4b9c-a716-9d38f887f305",
              "parentUUID": "4820ea61-f411-496b-93dc-47527d7dc662",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not show the issue text if no description is given",
              "fullTitle": "<AppealListItem> should not show the issue text if no description is given",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _set.default)('appeal.attributes.description', undefined, defaultProps);\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealListItem.default, props));\n(0, _chai.expect)(wrapper.find('.card-status > p').first().text()).to.not.contain('Description here.');\nwrapper.unmount();",
              "err": {},
              "uuid": "01edec04-c23e-4565-849b-a2ea3ae67a79",
              "parentUUID": "4820ea61-f411-496b-93dc-47527d7dc662",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the issue text if a description is given",
              "fullTitle": "<AppealListItem> should show the issue text if a description is given",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealListItem.default, defaultProps));\n(0, _chai.expect)(wrapper.find('.card-status > p').first().text()).to.contain('Description here.');\nwrapper.unmount();",
              "err": {},
              "uuid": "283106f0-e5fb-441c-bfe5-2d148877850c",
              "parentUUID": "4820ea61-f411-496b-93dc-47527d7dc662",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should mask appeal issues in DataDog (no PII)",
              "fullTitle": "<AppealListItem> should mask appeal issues in DataDog (no PII)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealListItem.default, defaultProps));\n(0, _chai.expect)(wrapper.find('.masked-issue').first().props()['data-dd-privacy']).to.equal('mask');\nwrapper.unmount();",
              "err": {},
              "uuid": "1de18bb8-700c-4ba5-8a68-4d50e978d44a",
              "parentUUID": "4820ea61-f411-496b-93dc-47527d7dc662",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6328e9c1-9976-433b-86dc-b45e003053b3",
            "45944d9e-c294-4180-b4d2-66bfa14b55ab",
            "698fa6cb-7056-4e36-88b7-ac4874afb684",
            "deba0bf5-a548-4de0-9935-bb46db6c785e",
            "da20b41e-d2c1-4c8b-9dcd-3bb824991169",
            "6356c876-b990-45bf-b431-d09e4b0ee82b",
            "38c47c43-baf6-4b9c-a716-9d38f887f305",
            "01edec04-c23e-4565-849b-a2ea3ae67a79",
            "283106f0-e5fb-441c-bfe5-2d148877850c",
            "1de18bb8-700c-4ba5-8a68-4d50e978d44a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2f180d4d-35cd-4316-9b54-ed8aeb26446b",
          "title": "<AppealNotFound/>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/AppealNotFound.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/AppealNotFound.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "renders",
              "fullTitle": "<AppealNotFound/> renders",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealNotFound.default, null));\n(0, _chai.expect)(wrapper.type()).to.equal('div');\nwrapper.unmount();",
              "err": {},
              "uuid": "c7403326-4f53-43f2-b895-e21ed6ff2098",
              "parentUUID": "2f180d4d-35cd-4316-9b54-ed8aeb26446b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "renders a heading",
              "fullTitle": "<AppealNotFound/> renders a heading",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealNotFound.default, null));\n(0, _chai.expect)(wrapper.find('h1').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "1dd1f809-c97d-49d8-8d31-ddff3ab82509",
              "parentUUID": "2f180d4d-35cd-4316-9b54-ed8aeb26446b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "renders a React Router link back to claims page",
              "fullTitle": "<AppealNotFound/> renders a React Router link back to claims page",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_AppealNotFound.default, null));\n(0, _chai.expect)(wrapper.find('Link').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "4d35ac47-10bc-4cfa-965e-4c81ebb66ef4",
              "parentUUID": "2f180d4d-35cd-4316-9b54-ed8aeb26446b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7403326-4f53-43f2-b895-e21ed6ff2098",
            "1dd1f809-c97d-49d8-8d31-ddff3ab82509",
            "4d35ac47-10bc-4cfa-965e-4c81ebb66ef4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a2829b38-9292-42da-bfa7-624da5e840f1",
          "title": "<AppealsV2DetailPage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/AppealsV2DetailPage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/AppealsV2DetailPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "renders",
              "fullTitle": "<AppealsV2DetailPage> renders",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n      context: [appeal]\n    })\n  }, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    index: true,\n    element: /*#__PURE__*/_react.default.createElement(_AppealsV2DetailPage.default, null)\n  }))))),\n  container = _render.container;\n(0, _chai.expect)((0, _index.$)('#tabPanelv2detail', container)).to.exist;",
              "err": {},
              "uuid": "5449dad3-e09a-493f-a1b0-dd2343e0e6a4",
              "parentUUID": "a2829b38-9292-42da-bfa7-624da5e840f1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "renders the <Issues> component",
              "fullTitle": "<AppealsV2DetailPage> renders the <Issues> component",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [appeal]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: /*#__PURE__*/_react.default.createElement(_AppealsV2DetailPage.default, null)\n})))));\nscreen.getByText('Issues');",
              "err": {},
              "uuid": "42322f09-c76c-4c82-9c35-39ad6be0bdd3",
              "parentUUID": "a2829b38-9292-42da-bfa7-624da5e840f1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5449dad3-e09a-493f-a1b0-dd2343e0e6a4",
            "42322f09-c76c-4c82-9c35-39ad6be0bdd3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
          "title": "<AppealsV2StatusPage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/AppealsV2StatusPage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/AppealsV2StatusPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "renders",
              "fullTitle": "<AppealsV2StatusPage> renders",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n      context: [defaultAppeal]\n    })\n  }, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    index: true,\n    element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n  }))))),\n  container = _render.container;\n(0, _chai.expect)((0, _index.$)('#tabPanelv2status', container)).to.exist;",
              "err": {},
              "uuid": "4ee85897-d2ee-4042-a85c-bf02b19c9d08",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the <Timeline> component",
              "fullTitle": "<AppealsV2StatusPage> should render the <Timeline> component",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n      context: [defaultAppeal]\n    })\n  }, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    index: true,\n    element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n  }))))),\n  container = _render2.container;\n(0, _chai.expect)((0, _index.$)('ol#appeal-timeline', container)).to.exist;",
              "err": {},
              "uuid": "ca34558b-7e48-4ca2-9469-85899964f1f8",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a <CurrentStatus> component",
              "fullTitle": "<AppealsV2StatusPage> should render a <CurrentStatus> component",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [defaultAppeal]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n})))));\nscreen.getByText('Current status');",
              "err": {},
              "uuid": "2b5b70b9-aef0-4a8c-8a5c-cd4a2445e4eb",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the <AlertsList> component",
              "fullTitle": "<AppealsV2StatusPage> should render the <AlertsList> component",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n      context: [defaultAppeal]\n    })\n  }, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    index: true,\n    element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n  }))))),\n  container = _render3.container;\n(0, _chai.expect)((0, _index.$)('ul.alerts-list', container)).to.exist;",
              "err": {},
              "uuid": "e0d7f02b-57bb-49ac-bae7-50c98aecd29f",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the <WhatsNext> component",
              "fullTitle": "<AppealsV2StatusPage> should render the <WhatsNext> component",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [onDocketAppeal]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n})))));\nscreen.getByText('What happens next?');",
              "err": {},
              "uuid": "f597c724-940b-4847-befb-8b8e897c9015",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a <Docket> when applicable",
              "fullTitle": "<AppealsV2StatusPage> should render a <Docket> when applicable",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [onDocketAppeal]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n})))));\nscreen.getByText(docketHeader);",
              "err": {},
              "uuid": "34fb07a3-6161-40d2-947b-2842e9614eae",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render a <Docket> when appeal status is a forbidden type",
              "fullTitle": "<AppealsV2StatusPage> should not render a <Docket> when appeal status is a forbidden type",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The appeal in defaultProps has a status of pending_soc, so the docket shouldn't be shown\nvar screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [defaultAppeal]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n})))));\n(0, _chai.expect)(screen.queryByText(docketHeader)).to.not.be.true;",
              "err": {},
              "uuid": "7bad36aa-7b4b-43ce-b38c-08ce11c558b1",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render a <Docket> when appeal type is a forbidden type",
              "fullTitle": "<AppealsV2StatusPage> should not render a <Docket> when appeal type is a forbidden type",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The appeal in defaultProps has a status of pending_soc, so the docket shouldn't be shown\nvar appeal = _objectSpread(_objectSpread({}, defaultAppeal), {}, {\n  attributes: _objectSpread(_objectSpread({}, defaultAppeal.attributes), {}, {\n    type: _appealsV2Helpers.APPEAL_ACTIONS.cue\n  })\n});\nvar screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [appeal]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n})))));\n(0, _chai.expect)(screen.queryByText(docketHeader)).to.not.be.true;",
              "err": {},
              "uuid": "a1e5e927-3d60-424c-ac9b-a5c778dd9715",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render a <Docket> when appeal is closed",
              "fullTitle": "<AppealsV2StatusPage> should not render a <Docket> when appeal is closed",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The appeal in defaultProps has a status of pending_soc, so the docket shouldn't be shown\nvar appeal = _objectSpread(_objectSpread({}, defaultAppeal), {}, {\n  attributes: _objectSpread(_objectSpread({}, defaultAppeal.attributes), {}, {\n    active: false\n  })\n});\nvar screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [appeal]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n})))));\n(0, _chai.expect)(screen.queryByText(docketHeader)).to.not.be.true;",
              "err": {},
              "uuid": "eb7f90e2-d0e9-41fc-a142-9dcf02c21ff3",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render a <Docket> when appeal is a Supplemental Claim",
              "fullTitle": "<AppealsV2StatusPage> should not render a <Docket> when appeal is a Supplemental Claim",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The appeal in defaultProps has a status of pending_soc, so the docket shouldn't be shown\nvar screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [supplementalClaim]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n})))));\n(0, _chai.expect)(screen.queryByText(docketHeader)).to.not.be.true;",
              "err": {},
              "uuid": "7b1434a8-5658-4e9f-b111-dd65799eea3e",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render a <Docket> when appeal is a Higher-Level Review",
              "fullTitle": "<AppealsV2StatusPage> should not render a <Docket> when appeal is a Higher-Level Review",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The appeal in defaultProps has a status of pending_soc, so the docket shouldn't be shown\nvar screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [higherLevelReview]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n})))));\n(0, _chai.expect)(screen.queryByText(docketHeader)).to.not.be.true;",
              "err": {},
              "uuid": "9330a500-e3be-451d-8ea5-4a0915cf94f1",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a <Docket> when appeal is a Board Appeal",
              "fullTitle": "<AppealsV2StatusPage> should render a <Docket> when appeal is a Board Appeal",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [amaAppeal]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null)\n})))));\nscreen.getByText(docketHeader);",
              "err": {},
              "uuid": "58d559ae-5562-440d-8266-c09670048c32",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render a <Docket> when a Board Appeal has left the Board",
              "fullTitle": "<AppealsV2StatusPage> should not render a <Docket> when a Board Appeal has left the Board",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var appeal = _objectSpread(_objectSpread({}, closedAmaAppeal), {}, {\n  attributes: _objectSpread(_objectSpread({}, closedAmaAppeal.attributes), {}, {\n    active: true,\n    location: 'aoj'\n  })\n});\nvar elem = /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: store\n}, /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null));\nvar screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [appeal]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: elem\n})))));\n(0, _chai.expect)(screen.queryByText(docketHeader)).to.not.be.true;",
              "err": {},
              "uuid": "3e91cc7f-76b3-4305-9242-579935336ca7",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render a <Docket> when appeal is a closed Board Appeal",
              "fullTitle": "<AppealsV2StatusPage> should not render a <Docket> when appeal is a closed Board Appeal",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var elem = /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: store\n}, /*#__PURE__*/_react.default.createElement(_AppealsV2StatusPage.default, null));\nvar screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  element: /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Outlet, {\n    context: [closedAmaAppeal]\n  })\n}, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n  index: true,\n  element: elem\n})))));\n(0, _chai.expect)(screen.queryByText(docketHeader)).to.not.be.true;",
              "err": {},
              "uuid": "c025c332-ee3e-45c3-bbb5-78f0cedda89a",
              "parentUUID": "5c5c8ed6-ed40-48e8-a5cb-3cc2e16430b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4ee85897-d2ee-4042-a85c-bf02b19c9d08",
            "ca34558b-7e48-4ca2-9469-85899964f1f8",
            "2b5b70b9-aef0-4a8c-8a5c-cd4a2445e4eb",
            "e0d7f02b-57bb-49ac-bae7-50c98aecd29f",
            "f597c724-940b-4847-befb-8b8e897c9015",
            "34fb07a3-6161-40d2-947b-2842e9614eae",
            "7bad36aa-7b4b-43ce-b38c-08ce11c558b1",
            "a1e5e927-3d60-424c-ac9b-a5c778dd9715",
            "eb7f90e2-d0e9-41fc-a142-9dcf02c21ff3",
            "7b1434a8-5658-4e9f-b111-dd65799eea3e",
            "9330a500-e3be-451d-8ea5-4a0915cf94f1",
            "58d559ae-5562-440d-8266-c09670048c32",
            "3e91cc7f-76b3-4305-9242-579935336ca7",
            "c025c332-ee3e-45c3-bbb5-78f0cedda89a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "79b68415-c243-4c57-bbd3-c02e1af56751",
          "title": "<AppealsV2TabNav>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/AppealsV2TabNav.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/AppealsV2TabNav.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<AppealsV2TabNav> should render",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_AppealsV2TabNav.default, null)),\n  container = _renderWithRouter.container;\n(0, _chai.expect)((0, _index.$)('ul.tabs', container)).to.exist;",
              "err": {},
              "uuid": "0b9d8ee0-c76b-42c3-8b56-0669fb1c43a9",
              "parentUUID": "79b68415-c243-4c57-bbd3-c02e1af56751",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render 2 tabs: Status and Issues",
              "fullTitle": "<AppealsV2TabNav> should render 2 tabs: Status and Issues",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var screen = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_AppealsV2TabNav.default, null));\nscreen.getByText('Status');\nscreen.getByText('Issues');",
              "err": {},
              "uuid": "9e4c695a-e8db-470d-98a1-caa8ae60922e",
              "parentUUID": "79b68415-c243-4c57-bbd3-c02e1af56751",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0b9d8ee0-c76b-42c3-8b56-0669fb1c43a9",
            "9e4c695a-e8db-470d-98a1-caa8ae60922e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ea2288b2-5997-4603-bf4d-7d512e022dee",
          "title": "<CurrentStatus/>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/CurrentStatus.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/CurrentStatus.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<CurrentStatus/> should render",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_CurrentStatus.default, defaultProps));\n(0, _chai.expect)(wrapper.type()).to.equal('div');\nwrapper.unmount();",
              "err": {},
              "uuid": "67d49a08-af08-4c80-8889-d2801c8ddeee",
              "parentUUID": "ea2288b2-5997-4603-bf4d-7d512e022dee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render title and description from passed in props",
              "fullTitle": "<CurrentStatus/> should render title and description from passed in props",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  title: 'The Chicago Regional Office is reviewing your appeal',\n  description: /*#__PURE__*/_react.default.createElement(\"p\", null, \"The Chicago Regional Office received your Notice of Disagreement and is revewing your appeal. This means they review all of the evidence related to your appeal, including any new evidence you submit. They may contact you to request additional evidence or medical examinations, as needed. When they have completed their review, they will determine whether or not they can grant your appeal.\")\n};\nvar wrapper = (0, _enzyme.render)(/*#__PURE__*/_react.default.createElement(_CurrentStatus.default, props));\nvar statusTitle = wrapper.find('h3').text();\nvar statusDescription = wrapper.find('p').text();\n(0, _chai.expect)(statusTitle).to.equal(props.title);\n(0, _chai.expect)(statusDescription).to.equal(props.description.props.children);",
              "err": {},
              "uuid": "287db6a0-da2d-4e4a-8ac5-4fa0c2279987",
              "parentUUID": "ea2288b2-5997-4603-bf4d-7d512e022dee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "masks the contention details from datadog (no PII)",
              "fullTitle": "<CurrentStatus/> masks the contention details from datadog (no PII)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_CurrentStatus.default, defaultProps));\n(0, _chai.expect)(wrapper.find('.current-status-content > div').first().props()['data-dd-privacy']).to.equal('mask');\nwrapper.unmount();",
              "err": {},
              "uuid": "3149a672-91d1-480e-a1d6-ed58b9c3a9ac",
              "parentUUID": "ea2288b2-5997-4603-bf4d-7d512e022dee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "67d49a08-af08-4c80-8889-d2801c8ddeee",
            "287db6a0-da2d-4e4a-8ac5-4fa0c2279987",
            "3149a672-91d1-480e-a1d6-ed58b9c3a9ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a4dad713-e168-4b32-9cb9-2972c556b5a8",
          "title": "<Decision/>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/Decision.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/Decision.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns the right number of allowed / denied / remand items",
              "fullTitle": "<Decision/> returns the right number of allowed / denied / remand items",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Decision.default, defaultProps));\nvar allowedList = wrapper.find('.allowed-items ~ ul');\nvar deniedList = wrapper.find('.denied-items ~ ul');\nvar remandList = wrapper.find('.remand-items ~ ul');\nvar allowedDisposition = defaultProps.issues.filter(function (i) {\n  return i.disposition === 'allowed';\n});\nvar deniedDisposition = defaultProps.issues.filter(function (i) {\n  return i.disposition === 'denied';\n});\nvar remandDisposition = defaultProps.issues.filter(function (i) {\n  return i.disposition === 'remand';\n});\n(0, _chai.expect)(allowedList.find('li').length).to.equal(allowedDisposition.length);\n(0, _chai.expect)(deniedList.find('li').length).to.equal(deniedDisposition.length);\n(0, _chai.expect)(remandList.find('li').length).to.equal(remandDisposition.length);\nwrapper.unmount();",
              "err": {},
              "uuid": "2483d5f8-add9-463a-b5af-6ccdcdf52e86",
              "parentUUID": "a4dad713-e168-4b32-9cb9-2972c556b5a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "describes the decider as a reviewer if an AOJ decision",
              "fullTitle": "<Decision/> describes the decider as a reviewer if an AOJ decision",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Decision.default, defaultProps));\n(0, _chai.expect)(wrapper.text()).to.contain('The reviewer granted the following');\nwrapper.unmount();",
              "err": {},
              "uuid": "c866eca7-4237-448d-bf77-5510a57f30f3",
              "parentUUID": "a4dad713-e168-4b32-9cb9-2972c556b5a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "describes the decider as a judge if a Board decision",
              "fullTitle": "<Decision/> describes the decider as a judge if a Board decision",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  boardDecision: true\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Decision.default, props));\n(0, _chai.expect)(wrapper.text()).to.contain('The judge granted the following');\nwrapper.unmount();",
              "err": {},
              "uuid": "44ad18b4-72b7-4f64-b604-288f9f70c8c8",
              "parentUUID": "a4dad713-e168-4b32-9cb9-2972c556b5a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "uses legacy language if not an AMA decision",
              "fullTitle": "<Decision/> uses legacy language if not an AMA decision",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  ama: false\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Decision.default, props));\n(0, _chai.expect)(wrapper.text()).to.contain('gather more evidence or to fix a mistake');\nwrapper.unmount();",
              "err": {},
              "uuid": "0dd63f56-f5cf-4f5d-b0a8-3ff2d49efa70",
              "parentUUID": "a4dad713-e168-4b32-9cb9-2972c556b5a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "masks the issue details from datadog (no PII)",
              "fullTitle": "<Decision/> masks the issue details from datadog (no PII)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Decision.default, defaultProps));\nvar allowedList = wrapper.find('.allowed-items ~ ul');\nvar deniedList = wrapper.find('.denied-items ~ ul');\nvar remandList = wrapper.find('.remand-items ~ ul');\n(0, _chai.expect)(allowedList.props()['data-dd-privacy']).to.equal('mask');\n(0, _chai.expect)(deniedList.props()['data-dd-privacy']).to.equal('mask');\n(0, _chai.expect)(remandList.props()['data-dd-privacy']).to.equal('mask');\nwrapper.unmount();",
              "err": {},
              "uuid": "0a0a5e8d-676d-406a-a3c8-1b7ace0d6773",
              "parentUUID": "a4dad713-e168-4b32-9cb9-2972c556b5a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2483d5f8-add9-463a-b5af-6ccdcdf52e86",
            "c866eca7-4237-448d-bf77-5510a57f30f3",
            "44ad18b4-72b7-4f64-b604-288f9f70c8c8",
            "0dd63f56-f5cf-4f5d-b0a8-3ff2d49efa70",
            "0a0a5e8d-676d-406a-a3c8-1b7ace0d6773"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
          "title": "Appeals V2 Docket",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/Docket.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/Docket.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "Appeals V2 Docket should render",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, defaultProps));\n(0, _chai.expect)(wrapper.type()).to.equal('div');\nwrapper.unmount();",
              "err": {},
              "uuid": "4dc93544-1ede-482b-8fd9-4dcc660ce9a1",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display frontOfDocket text",
              "fullTitle": "Appeals V2 Docket should display frontOfDocket text",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  frontOfDocket: true\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, props));\n(0, _chai.expect)(wrapper.text()).to.contain('The Board is currently reviewing appeals from');\nwrapper.unmount();",
              "err": {},
              "uuid": "fde0aa1b-6f2e-4d95-9a89-b761b3a5b8f2",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display non-frontOfDocket text",
              "fullTitle": "Appeals V2 Docket should display non-frontOfDocket text",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, defaultProps));\n(0, _chai.expect)(wrapper.text()).to.contain('appeals on the docket, not including Advanced on the Docket');\nwrapper.unmount();",
              "err": {},
              "uuid": "1166ceb1-6d1b-4930-836a-3930a0d5b98f",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render DocketCard",
              "fullTitle": "Appeals V2 Docket should render DocketCard",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, defaultProps));\n(0, _chai.expect)(wrapper.find('DocketCard').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "6beb0f8f-4618-4ee0-bc3e-317ac763df08",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render DocketCard for aod",
              "fullTitle": "Appeals V2 Docket should not render DocketCard for aod",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  aod: true\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, props));\n(0, _chai.expect)(wrapper.find('DocketCard').length).to.equal(0);\nwrapper.unmount();",
              "err": {},
              "uuid": "f21ad780-ed82-4d84-b3a5-8aeab758208b",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render DocketCard for postCavcRemand",
              "fullTitle": "Appeals V2 Docket should not render DocketCard for postCavcRemand",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  appealAction: _appealsV2Helpers.APPEAL_ACTIONS.postCavcRemand\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, props));\n(0, _chai.expect)(wrapper.find('DocketCard').length).to.equal(0);\nwrapper.unmount();",
              "err": {},
              "uuid": "01a43f80-09c5-4509-be54-fa98bbb73af1",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render aod when both aod and appeal type postCavcRemand",
              "fullTitle": "Appeals V2 Docket should render aod when both aod and appeal type postCavcRemand",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  appealAction: _appealsV2Helpers.APPEAL_ACTIONS.postCavcRemand,\n  aod: true\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, props));\n(0, _chai.expect)(wrapper.render().text()).to.contain('Your appeal is Advanced on the Docket.');\nwrapper.unmount();",
              "err": {},
              "uuid": "94720f8c-492f-491d-b42c-e3aeb346b57f",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display aod text",
              "fullTitle": "Appeals V2 Docket should display aod text",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  aod: true\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, props));\n(0, _chai.expect)(wrapper.text()).to.contain('Your appeal is Advanced on the Docket.');\nwrapper.unmount();",
              "err": {},
              "uuid": "0775de71-3871-47b8-8b47-23007aa68ccf",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display postCavcRemand text",
              "fullTitle": "Appeals V2 Docket should display postCavcRemand text",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  appealAction: _appealsV2Helpers.APPEAL_ACTIONS.postCavcRemand\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, props));\n(0, _chai.expect)(wrapper.text()).to.contain('Your appeal was remanded by the U.S. Court of Appeals for Veterans Claims.');\nwrapper.unmount();",
              "err": {},
              "uuid": "b5bc6697-843f-4be5-958a-bcf4755d3cba",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should describe the chosen docket",
              "fullTitle": "Appeals V2 Docket should describe the chosen docket",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, amaProps));\n(0, _chai.expect)(wrapper.text()).to.contain('When you requested a Direct Review appeal');\nwrapper.unmount();",
              "err": {},
              "uuid": "41d3f4f9-242f-4911-a7d0-2adaa824af78",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display the total number of appeals across all dockets",
              "fullTitle": "Appeals V2 Docket should display the total number of appeals across all dockets",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, amaProps));\n(0, _chai.expect)(wrapper.text()).to.contain('there are 654,321 appeals waiting at the Board');\nwrapper.unmount();",
              "err": {},
              "uuid": "f92106d1-27ea-4122-adfa-2de2a0fe29d9",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should include docket switch instructions if eligible",
              "fullTitle": "Appeals V2 Docket should include docket switch instructions if eligible",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, amaProps));\n(0, _chai.expect)(wrapper.text()).to.contain('Can I add new evidence or request a hearing?');\nwrapper.unmount();",
              "err": {},
              "uuid": "31a64990-6059-405d-b6e6-9d73557dbdec",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should hide docket switch instructions if not eligible",
              "fullTitle": "Appeals V2 Docket should hide docket switch instructions if not eligible",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, amaProps), {}, {\n  eligibleToSwitch: false\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, props));\n(0, _chai.expect)(wrapper.text()).to.not.contain('Can I add new evidence or request a hearing?');\nwrapper.unmount();",
              "err": {},
              "uuid": "37928367-5183-4006-99de-9ff25f62d6c7",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should include time estimates for other dockets, ordered by date",
              "fullTitle": "Appeals V2 Docket should include time estimates for other dockets, ordered by date",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, amaProps));\n(0, _chai.expect)(wrapper.text()).to.contain('January 2024 — Evidence Submission estimateJanuary 2025 — Hearing Request estimate');\nwrapper.unmount();",
              "err": {},
              "uuid": "a62e8039-0b97-475d-88cd-c037066d60b1",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should diplay information for the appropriate docket",
              "fullTitle": "Appeals V2 Docket should diplay information for the appropriate docket",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, amaProps), {}, {\n  type: 'hearingRequest'\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Docket.default, props));\n(0, _chai.expect)(wrapper.text()).to.contain('When you requested a Hearing Request appeal');\n(0, _chai.expect)(wrapper.text()).to.contain('What if I no longer want to request a hearing?');\n(0, _chai.expect)(wrapper.text()).to.contain('January 2020 — Direct Review estimateJanuary 2024 — Evidence Submission estimate');\nwrapper.unmount();",
              "err": {},
              "uuid": "7083edce-27a2-4ffb-a040-28d1e646e364",
              "parentUUID": "2ec5caa7-e3d5-4734-9e32-e4dbace10ad3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4dc93544-1ede-482b-8fd9-4dcc660ce9a1",
            "fde0aa1b-6f2e-4d95-9a89-b761b3a5b8f2",
            "1166ceb1-6d1b-4930-836a-3930a0d5b98f",
            "6beb0f8f-4618-4ee0-bc3e-317ac763df08",
            "f21ad780-ed82-4d84-b3a5-8aeab758208b",
            "01a43f80-09c5-4509-be54-fa98bbb73af1",
            "94720f8c-492f-491d-b42c-e3aeb346b57f",
            "0775de71-3871-47b8-8b47-23007aa68ccf",
            "b5bc6697-843f-4be5-958a-bcf4755d3cba",
            "41d3f4f9-242f-4911-a7d0-2adaa824af78",
            "f92106d1-27ea-4122-adfa-2de2a0fe29d9",
            "31a64990-6059-405d-b6e6-9d73557dbdec",
            "37928367-5183-4006-99de-9ff25f62d6c7",
            "a62e8039-0b97-475d-88cd-c037066d60b1",
            "7083edce-27a2-4ffb-a040-28d1e646e364"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c2db2c18-9bea-4a6f-8a1c-2d9e42d06152",
          "title": "Appeals V2 DocketCard",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/DocketCard.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/DocketCard.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "Appeals V2 DocketCard should render",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_DocketCard.default, defaultProps));\n(0, _chai.expect)(wrapper.type()).to.equal('div');\nwrapper.unmount();",
              "err": {},
              "uuid": "fb4e8b7e-655b-4d22-9bb4-71d055479c38",
              "parentUUID": "c2db2c18-9bea-4a6f-8a1c-2d9e42d06152",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the number of appeals ahead of the appellant",
              "fullTitle": "Appeals V2 DocketCard should show the number of appeals ahead of the appellant",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_DocketCard.default, defaultProps));\n(0, _chai.expect)(wrapper.find('.appeals-ahead').text()).to.equal('109,238');\nwrapper.unmount();",
              "err": {},
              "uuid": "4aab31a5-2130-430f-be96-dc261458d790",
              "parentUUID": "c2db2c18-9bea-4a6f-8a1c-2d9e42d06152",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the total number of appeals on the docket",
              "fullTitle": "Appeals V2 DocketCard should show the total number of appeals on the docket",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_DocketCard.default, defaultProps));\n(0, _chai.expect)(wrapper.find('.front-of-docket-text + p strong').first().text()).to.equal('283,941');\nwrapper.unmount();",
              "err": {},
              "uuid": "361a0b0a-1ea7-4c6b-b206-bea28d63a71d",
              "parentUUID": "c2db2c18-9bea-4a6f-8a1c-2d9e42d06152",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show a visual representaton of where the appellant is in the line",
              "fullTitle": "Appeals V2 DocketCard should show a visual representaton of where the appellant is in the line",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_DocketCard.default, defaultProps));\nvar ahead = defaultProps.ahead,\n  total = defaultProps.total;\nvar computedWidth = (total - ahead) / total * 100;\n(0, _chai.expect)(wrapper.find('.spacer').first().prop('style').width).to.equal(\"\".concat(computedWidth, \"%\"));\nwrapper.unmount();",
              "err": {},
              "uuid": "8570339f-3bdd-4ad8-a04e-dfa75079d12f",
              "parentUUID": "c2db2c18-9bea-4a6f-8a1c-2d9e42d06152",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should correctly label the AMA docket",
              "fullTitle": "Appeals V2 DocketCard should correctly label the AMA docket",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_DocketCard.default, amaProps));\n(0, _chai.expect)(wrapper.text()).to.contain('the Direct Review docket');\nwrapper.unmount();",
              "err": {},
              "uuid": "69cd4d37-cc57-47ed-b1cf-c5061e07a668",
              "parentUUID": "c2db2c18-9bea-4a6f-8a1c-2d9e42d06152",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leave a legacy docket alone",
              "fullTitle": "Appeals V2 DocketCard should leave a legacy docket alone",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_DocketCard.default, defaultProps));\n(0, _chai.expect)(wrapper.text()).to.contain('the  docket');\nwrapper.unmount();",
              "err": {},
              "uuid": "eb813453-fe11-4f67-b64c-fa1850b4492a",
              "parentUUID": "c2db2c18-9bea-4a6f-8a1c-2d9e42d06152",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb4e8b7e-655b-4d22-9bb4-71d055479c38",
            "4aab31a5-2130-430f-be96-dc261458d790",
            "361a0b0a-1ea7-4c6b-b206-bea28d63a71d",
            "8570339f-3bdd-4ad8-a04e-dfa75079d12f",
            "69cd4d37-cc57-47ed-b1cf-c5061e07a668",
            "eb813453-fe11-4f67-b64c-fa1850b4492a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "280af3ba-2234-465f-9046-34d7d3aa9200",
          "title": "<Expander/>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/Expander.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/Expander.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render as an <li/>",
              "fullTitle": "<Expander/> should render as an <li/>",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_Expander.default, defaultProps)),\n  container = _render.container;\n(0, _chai.expect)((0, _index.$)('li', container)).to.exist;",
              "err": {},
              "uuid": "dd5b7c44-9223-4bcc-b02e-7358be477573",
              "parentUUID": "280af3ba-2234-465f-9046-34d7d3aa9200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a button that calls onToggle prop when clicked",
              "fullTitle": "<Expander/> should render a button that calls onToggle prop when clicked",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var toggleSpy = _sinon.default.spy();\nvar props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  onToggle: toggleSpy\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Expander.default, props));\nvar toggleButton = wrapper.find('va-button');\ntoggleButton.simulate('click');\n(0, _chai.expect)(toggleSpy.calledOnce).to.be.true;\nwrapper.unmount();",
              "err": {},
              "uuid": "1cad9764-f7b0-4745-8ef8-f4a9ef52e1c8",
              "parentUUID": "280af3ba-2234-465f-9046-34d7d3aa9200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the correct expanded attributes",
              "fullTitle": "<Expander/> should render the correct expanded attributes",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  expanded: true\n});\nvar _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_Expander.default, props)),\n  container = _render2.container;\n(0, _chai.expect)((0, _index.$)('va-button', container).getAttribute('text')).to.eq('Hide past events');\n(0, _chai.expect)((0, _index.$)('.section-expanded', container)).to.exist;",
              "err": {},
              "uuid": "8e32817e-fca7-44af-871b-24641ab1f753",
              "parentUUID": "280af3ba-2234-465f-9046-34d7d3aa9200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the correct unexpanded attributes",
              "fullTitle": "<Expander/> should render the correct unexpanded attributes",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_Expander.default, defaultProps)),\n  container = _render3.container;\n(0, _chai.expect)((0, _index.$)('va-button', container).getAttribute('text')).to.eq('Reveal past events');\n(0, _chai.expect)((0, _index.$)('.section-unexpanded', container)).to.exist;",
              "err": {},
              "uuid": "9e738736-79bd-41d4-9112-33690c662869",
              "parentUUID": "280af3ba-2234-465f-9046-34d7d3aa9200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the missing events alert",
              "fullTitle": "<Expander/> should render the missing events alert",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  missingEvents: true,\n  expanded: true\n});\nvar _render4 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_Expander.default, props)),\n  container = _render4.container;\n(0, _chai.expect)((0, _index.$)('.usa-alert', container)).to.exist;",
              "err": {},
              "uuid": "f08c5a49-c424-47bc-81a9-318085cbaea7",
              "parentUUID": "280af3ba-2234-465f-9046-34d7d3aa9200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render the missing events alert when there are no missing events",
              "fullTitle": "<Expander/> should not render the missing events alert when there are no missing events",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  expanded: true\n});\nvar _render5 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_Expander.default, props)),\n  container = _render5.container;\n(0, _chai.expect)((0, _index.$)('.usa-alert', container)).not.to.exist;",
              "err": {},
              "uuid": "33477092-43a1-4544-ad87-002427a7ee5f",
              "parentUUID": "280af3ba-2234-465f-9046-34d7d3aa9200",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dd5b7c44-9223-4bcc-b02e-7358be477573",
            "1cad9764-f7b0-4745-8ef8-f4a9ef52e1c8",
            "8e32817e-fca7-44af-871b-24641ab1f753",
            "9e738736-79bd-41d4-9112-33690c662869",
            "f08c5a49-c424-47bc-81a9-318085cbaea7",
            "33477092-43a1-4544-ad87-002427a7ee5f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
          "title": "<Issues/>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/Issues.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/Issues.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<Issues/> should render",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Issues.default, emptyIssues));\n(0, _chai.expect)(wrapper.type()).to.equal('div');\nwrapper.unmount();",
              "err": {},
              "uuid": "2dbbaf4c-5443-4fe1-b04b-ca85d76a01fb",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render no panels when no issues passed in",
              "fullTitle": "<Issues/> should render no panels when no issues passed in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Note: this probably isn't possible in real-world usage\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Issues.default, emptyIssues));\n(0, _chai.expect)(wrapper.find('va-accordion-item').length).to.equal(0);\nwrapper.unmount();",
              "err": {},
              "uuid": "e40af06a-4da5-4763-84a8-e00ec418ae9b",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render one panel when only an open issue is passed in",
              "fullTitle": "<Issues/> should render one panel when only an open issue is passed in",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Issues.default, oneOpenIssue));\nvar openPanel = wrapper.find('va-accordion-item').find('h3');\nvar panelName = openPanel.text();\n(0, _chai.expect)(panelName).to.equal('Currently on appeal');\nwrapper.unmount();",
              "err": {},
              "uuid": "d8ae4d60-88de-4532-a027-a43cb976275e",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render one panel when only a closed issue is passed in",
              "fullTitle": "<Issues/> should render one panel when only a closed issue is passed in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Issues.default, oneClosedIssue));\nvar closedPanel = wrapper.find('va-accordion-item').find('h3');\nvar panelName = closedPanel.text();\n(0, _chai.expect)(panelName).to.equal('Closed');\nwrapper.unmount();",
              "err": {},
              "uuid": "b3528005-2870-4a4f-b6a5-409b6b41fe9a",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render two panels when both open *AND* closed issues are passed in",
              "fullTitle": "<Issues/> should render two panels when both open *AND* closed issues are passed in",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Issues.default, manyIssues));\n(0, _chai.expect)(wrapper.find('va-accordion-item').length).to.equal(2);\nwrapper.unmount();",
              "err": {},
              "uuid": "08adf3ae-da6b-4d80-8583-09fe93f751bd",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a list of open items when open items exist",
              "fullTitle": "<Issues/> should render a list of open items when open items exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  issues: [{\n    status: 'open',\n    description: 'test open issue'\n  }],\n  isAppeal: true\n};\nvar wrapper = (0, _enzyme.mount)(/*#__PURE__*/_react.default.createElement(_Issues.default, props));\nvar panel = wrapper.find('va-accordion-item');\n(0, _chai.expect)(panel.find('h3').text()).to.contain('Currently on appeal');\n// no need to click, panel should be auto-expanded\n// open items are in the first ul within the first accordion's content\nvar openContentList = panel.find('ul');\n(0, _chai.expect)(openContentList.find('li').length).to.equal(props.issues.length);\nwrapper.unmount();",
              "err": {},
              "uuid": "7e1b562b-b3b1-4671-9377-d190f31a4a63",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a list of closed items when items exist",
              "fullTitle": "<Issues/> should render a list of closed items when items exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  issues: [{\n    status: 'granted',\n    description: 'test closed issue'\n  }]\n};\nvar wrapper = (0, _enzyme.mount)(/*#__PURE__*/_react.default.createElement(_Issues.default, props));\nvar panel = wrapper.find('va-accordion-item');\n(0, _chai.expect)(panel.find('h3').text()).to.contain('Closed');\n// no need to click, panel should be auto-expanded\n// closed items are in accordion > div > ul > li\nvar remandDiv = wrapper.find('va-accordion-item > div');\n(0, _chai.expect)(remandDiv.find('ul > li').length).to.equal(props.issues.length);\nwrapper.unmount();",
              "err": {},
              "uuid": "6bcaaa5b-1fe3-41a6-883b-ccb6f8aa2035",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass auto-expand prop to active panel when both active and closed panels present",
              "fullTitle": "<Issues/> should pass auto-expand prop to active panel when both active and closed panels present",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Issues.default, manyIssues));\nvar activePanel = wrapper.find('va-accordion-item').first();\n(0, _chai.expect)(activePanel.find('h3').text()).to.equal('Currently on appeal');\n(0, _chai.expect)(activePanel.props().open).to.be.true;\nwrapper.unmount();",
              "err": {},
              "uuid": "a4618fc5-53c8-4bcb-9bfd-575fcd2470f5",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass auto-expand prop to active panel when only active panel present",
              "fullTitle": "<Issues/> should pass auto-expand prop to active panel when only active panel present",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Issues.default, oneOpenIssue));\nvar activePanel = wrapper.find('va-accordion-item');\n(0, _chai.expect)(activePanel.find('h3').text()).to.equal('Currently on appeal');\n(0, _chai.expect)(activePanel.props().open).to.be.true;\nwrapper.unmount();",
              "err": {},
              "uuid": "f90367af-b8c2-4292-b9dc-364752daccba",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass auto-expand prop to closed panel when no active panel present",
              "fullTitle": "<Issues/> should pass auto-expand prop to closed panel when no active panel present",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Issues.default, oneClosedIssue));\nvar closedPanel = wrapper.find('va-accordion-item').first();\n(0, _chai.expect)(closedPanel.find('h3').text()).to.equal('Closed');\n(0, _chai.expect)(closedPanel.props().open).to.be.true;\nwrapper.unmount();",
              "err": {},
              "uuid": "508c458f-7187-49ff-97f4-06c0f03fd9a1",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not pass auto-expand prop to closed panel when active panel present",
              "fullTitle": "<Issues/> should not pass auto-expand prop to closed panel when active panel present",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Issues.default, manyIssues));\nvar closedPanel = wrapper.find('va-accordion-item').at(1);\n(0, _chai.expect)(closedPanel.find('h3').text()).to.equal('Closed');\n(0, _chai.expect)(closedPanel.props().open).to.be.false;\nwrapper.unmount();",
              "err": {},
              "uuid": "6b1fad7f-938b-4625-ba98-dacfb79656a6",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use the word \"review\" if a Supplemental Claim or Higher-Level Review",
              "fullTitle": "<Issues/> should use the word \"review\" if a Supplemental Claim or Higher-Level Review",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _set.default)('isAppeal', false, oneOpenIssue);\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Issues.default, props));\nvar activePanel = wrapper.find('va-accordion-item');\n(0, _chai.expect)(activePanel.find('h3').text()).to.equal('Currently on review');\nwrapper.unmount();",
              "err": {},
              "uuid": "8f8a7dc9-12fe-4625-9449-3e91310ee316",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should mask Issue details in DataDog (no PII)",
              "fullTitle": "<Issues/> should should mask Issue details in DataDog (no PII)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Issues.default, oneOpenIssue));\n(0, _chai.expect)(wrapper.find('.issue-item').props()['data-dd-privacy']).to.equal('mask');\nwrapper.unmount();",
              "err": {},
              "uuid": "b098979a-7abf-47f2-8904-bd199dea2db7",
              "parentUUID": "0fcb97af-c948-4dc5-8af9-a0f1c58909c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2dbbaf4c-5443-4fe1-b04b-ca85d76a01fb",
            "e40af06a-4da5-4763-84a8-e00ec418ae9b",
            "d8ae4d60-88de-4532-a027-a43cb976275e",
            "b3528005-2870-4a4f-b6a5-409b6b41fe9a",
            "08adf3ae-da6b-4d80-8583-09fe93f751bd",
            "7e1b562b-b3b1-4671-9377-d190f31a4a63",
            "6bcaaa5b-1fe3-41a6-883b-ccb6f8aa2035",
            "a4618fc5-53c8-4bcb-9bfd-575fcd2470f5",
            "f90367af-b8c2-4292-b9dc-364752daccba",
            "508c458f-7187-49ff-97f4-06c0f03fd9a1",
            "6b1fad7f-938b-4625-ba98-dacfb79656a6",
            "8f8a7dc9-12fe-4625-9449-3e91310ee316",
            "b098979a-7abf-47f2-8904-bd199dea2db7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b6c26d96-5d35-49fa-a955-dc395c2a8ce2",
          "title": "<NextEvent/>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/NextEvent.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/NextEvent.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<NextEvent/> should render",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_NextEvent.default, defaultProps));\n(0, _chai.expect)(wrapper.type()).to.equal('li');\nwrapper.unmount();",
              "err": {},
              "uuid": "1df99eda-f69d-465c-982a-ec5d38b93b15",
              "parentUUID": "b6c26d96-5d35-49fa-a955-dc395c2a8ce2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a separator when prop true",
              "fullTitle": "<NextEvent/> should render a separator when prop true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_NextEvent.default, defaultProps));\n(0, _chai.expect)(wrapper.find('.sidelines').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "c2a96ed6-f6ad-41cd-a032-4c8a90a8d05f",
              "parentUUID": "b6c26d96-5d35-49fa-a955-dc395c2a8ce2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render a separator when prop false",
              "fullTitle": "<NextEvent/> should not render a separator when prop false",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  showSeparator: false\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_NextEvent.default, props));\n(0, _chai.expect)(wrapper.find('.sidelines').length).to.equal(0);\nwrapper.unmount();",
              "err": {},
              "uuid": "6d7e9e68-4622-45d6-adda-167cd53f8180",
              "parentUUID": "b6c26d96-5d35-49fa-a955-dc395c2a8ce2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1df99eda-f69d-465c-982a-ec5d38b93b15",
            "c2a96ed6-f6ad-41cd-a032-4c8a90a8d05f",
            "6d7e9e68-4622-45d6-adda-167cd53f8180"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "da701391-1deb-400b-b126-e9a37e042fdd",
          "title": "<PastEvent",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/PastEvent.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/PastEvent.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render an <li/>",
              "fullTitle": "<PastEvent should render an <li/>",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_PastEvent.default, defaultProps));\n(0, _chai.expect)(wrapper.type()).to.equal('li');\nwrapper.unmount();",
              "err": {},
              "uuid": "bec951a1-c7ab-4fa0-a3b1-27173f0e947c",
              "parentUUID": "da701391-1deb-400b-b126-e9a37e042fdd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bec951a1-c7ab-4fa0-a3b1-27173f0e947c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "04e7a699-2683-4c21-8d70-df98a88c8170",
          "title": "<Timeline/>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/Timeline.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/Timeline.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<Timeline/> should render",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var component = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, defaultProps));\n(0, _chai.expect)(component.exists()).to.be.true;\ncomponent.unmount();",
              "err": {},
              "uuid": "3ee41517-934a-424e-b231-7823e14f7b6c",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render one expander item if events present",
              "fullTitle": "<Timeline/> should render one expander item if events present",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, defaultProps));\nvar expander = wrapper.find('Expander');\n(0, _chai.expect)(expander.length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "2867d97d-d7e7-415d-938a-ae75015b5923",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render any past events by default",
              "fullTitle": "<Timeline/> should not render any past events by default",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, defaultProps));\nvar pastEvents = wrapper.find('PastEvent');\n(0, _chai.expect)(pastEvents.exists()).to.be.false;\nwrapper.unmount();",
              "err": {},
              "uuid": "1c7eca4d-995c-45a2-8ad8-d6d47ff460fb",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should toggle expanded state when toggleExpanded called",
              "fullTitle": "<Timeline/> should toggle expanded state when toggleExpanded called",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, defaultProps));\nvar instance = wrapper.instance();\n// Just so toggleExpanded() doesn't break\nvar clickEvent = {\n  stopPropagation: function stopPropagation() {}\n};\n(0, _chai.expect)(wrapper.state('expanded')).to.equal(false);\ninstance.toggleExpanded(clickEvent);\n(0, _chai.expect)(wrapper.state('expanded')).to.equal(true);\ninstance.toggleExpanded(clickEvent);\n(0, _chai.expect)(wrapper.state('expanded')).to.equal(false);\nwrapper.unmount();",
              "err": {},
              "uuid": "d4c560be-f1fe-4f56-9e4a-d036b4ab46e0",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render past events when expanded state is true",
              "fullTitle": "<Timeline/> should render past events when expanded state is true",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, defaultProps));\n(0, _chai.expect)(wrapper.find('PastEvent').length).to.equal(0);\n// wrapper's instance.toggleExpanded() method doesn't cause a re-render\n// in enzyme, so need to setState directly (which explicitly does re-render)\nwrapper.setState({\n  expanded: true\n});\n(0, _chai.expect)(wrapper.find('PastEvent').length).to.equal(defaultProps.events.length);\nwrapper.unmount();",
              "err": {},
              "uuid": "1e6a71a8-5ecf-4a36-a088-85c508a88af6",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render nothing for past events if no events in list",
              "fullTitle": "<Timeline/> should render nothing for past events if no events in list",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  events: []\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, props));\n(0, _chai.expect)(wrapper.find('PastEvent').length).to.equal(0);\nwrapper.setState({\n  expanded: true\n});\n(0, _chai.expect)(wrapper.find('PastEvent').length).to.equal(0);\nwrapper.unmount();",
              "err": {},
              "uuid": "bb63bda7-8d76-4c0d-85dd-778d041df90e",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass formatted date range to the Expander",
              "fullTitle": "<Timeline/> should pass formatted date range to the Expander",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, defaultProps));\nvar expander = wrapper.find('Expander');\nvar _expander$props = expander.props(),\n  dateRange = _expander$props.dateRange;\n(0, _chai.expect)(dateRange).to.equal(formattedDateRange);\nwrapper.unmount();",
              "err": {},
              "uuid": "acfff439-d4ec-4920-8307-89bd84e53ce3",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass empty string as dateRange to Expander when no events",
              "fullTitle": "<Timeline/> should pass empty string as dateRange to Expander when no events",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  events: []\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, props));\nvar expander = wrapper.find('Expander');\nvar _expander$props2 = expander.props(),\n  dateRange = _expander$props2.dateRange;\n(0, _chai.expect)(dateRange).to.equal('');\nwrapper.unmount();",
              "err": {},
              "uuid": "37470678-131e-4995-af80-13111821bcd8",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass all required props to PastEvents",
              "fullTitle": "<Timeline/> should pass all required props to PastEvents",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _getEventContent = (0, _appealsV2Helpers.getEventContent)(defaultProps.events[0]),\n  title = _getEventContent.title,\n  description = _getEventContent.description,\n  liClass = _getEventContent.liClass;\nvar date = (0, _appealsV2Helpers.formatDate)(defaultProps.events[0].date);\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, defaultProps));\nwrapper.setState({\n  expanded: true\n});\nvar firstProps = wrapper.find('PastEvent').first().props();\n(0, _chai.expect)(firstProps.title).to.equal(title);\n(0, _chai.expect)(firstProps.description).to.equal(description);\n(0, _chai.expect)(firstProps.liClass).to.equal(liClass);\n(0, _chai.expect)(firstProps.date).to.equal(date);\nwrapper.unmount();",
              "err": {},
              "uuid": "0b58e8b2-1d35-4238-b971-b1aaa4cc7a48",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass all required props to Expander",
              "fullTitle": "<Timeline/> should pass all required props to Expander",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, defaultProps));\nvar expanderProps = wrapper.find('Expander').props();\n(0, _chai.expect)(expanderProps.expanded).to.be.false;\n(0, _chai.expect)(expanderProps.missingEvents).to.be.false;\n(0, _chai.expect)(expanderProps.dateRange).to.equal(formattedDateRange);\n(0, _chai.expect)(expanderProps.onToggle).to.equal(wrapper.instance().toggleExpanded);\nwrapper.unmount();",
              "err": {},
              "uuid": "d9486d0e-0d78-4f0a-befe-719adfbc16b2",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass updated props to Expander when state toggled",
              "fullTitle": "<Timeline/> should pass updated props to Expander when state toggled",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, defaultProps));\nwrapper.setState({\n  expanded: true\n});\nvar expanderProps = wrapper.find('Expander').props();\n(0, _chai.expect)(expanderProps.expanded).to.be.true;\nwrapper.unmount();",
              "err": {},
              "uuid": "692958dc-9404-4a7e-8184-88ad9570b15d",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render unknown events",
              "fullTitle": "<Timeline/> should not render unknown events",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  events: [{\n    type: 'asdfasdf',\n    date: '2016-05-30',\n    details: {}\n  }, {\n    type: 'nod',\n    date: '2016-06-10',\n    details: {}\n  }],\n  missingEvents: false\n};\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_Timeline.default, props));\nwrapper.setState({\n  expanded: true\n});\n(0, _chai.expect)(wrapper.find('PastEvent').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "567f8037-f44c-49f6-a648-7c0fc7c98eb2",
              "parentUUID": "04e7a699-2683-4c21-8d70-df98a88c8170",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ee41517-934a-424e-b231-7823e14f7b6c",
            "2867d97d-d7e7-415d-938a-ae75015b5923",
            "1c7eca4d-995c-45a2-8ad8-d6d47ff460fb",
            "d4c560be-f1fe-4f56-9e4a-d036b4ab46e0",
            "1e6a71a8-5ecf-4a36-a088-85c508a88af6",
            "bb63bda7-8d76-4c0d-85dd-778d041df90e",
            "acfff439-d4ec-4920-8307-89bd84e53ce3",
            "37470678-131e-4995-af80-13111821bcd8",
            "0b58e8b2-1d35-4238-b971-b1aaa4cc7a48",
            "d9486d0e-0d78-4f0a-befe-719adfbc16b2",
            "692958dc-9404-4a7e-8184-88ad9570b15d",
            "567f8037-f44c-49f6-a648-7c0fc7c98eb2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ba75d4bd-9996-42c5-b76f-959ea284475d",
          "title": "<WhatsNext/>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/appeals-v2/WhatsNext.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/appeals-v2/WhatsNext.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "renders",
              "fullTitle": "<WhatsNext/> renders",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_WhatsNext.default, defaultProps));\n(0, _chai.expect)(wrapper.type()).to.equal('div');\nwrapper.unmount();",
              "err": {},
              "uuid": "1f2c8860-2ad3-4b31-99be-0130c017da44",
              "parentUUID": "ba75d4bd-9996-42c5-b76f-959ea284475d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "renders a header title",
              "fullTitle": "<WhatsNext/> renders a header title",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testHeaderText = 'Test Header';\nvar props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  nextEvents: _objectSpread(_objectSpread({}, defaultProps.nextEvents), {}, {\n    header: testHeaderText\n  })\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_WhatsNext.default, props));\nvar headerText = wrapper.find('h2 + p').render().text();\n(0, _chai.expect)(headerText).to.equal(testHeaderText);\nwrapper.unmount();",
              "err": {},
              "uuid": "57ac41fe-b45e-45d5-a992-9e977b45ffa2",
              "parentUUID": "ba75d4bd-9996-42c5-b76f-959ea284475d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "renders a list of all next events for a given currentStatus",
              "fullTitle": "<WhatsNext/> renders a list of all next events for a given currentStatus",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  nextEvents: _objectSpread(_objectSpread({}, defaultProps.nextEvents), {}, {\n    events: eventsList\n  })\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_WhatsNext.default, props));\nvar nextEventList = wrapper.find('NextEvent');\n(0, _chai.expect)(nextEventList.length).to.equal(eventsList.length);\nwrapper.unmount();",
              "err": {},
              "uuid": "65d4b46f-9ae5-4ac2-ac74-d6ac89380100",
              "parentUUID": "ba75d4bd-9996-42c5-b76f-959ea284475d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f2c8860-2ad3-4b31-99be-0130c017da44",
            "57ac41fe-b45e-45d5-a992-9e977b45ffa2",
            "65d4b46f-9ae5-4ac2-ac74-d6ac89380100"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "6f8e1493-993b-4118-bbc7-e9f057d84a4f",
          "title": "<AppealsUnavailable>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/AppealsUnavaliable.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/AppealsUnavaliable.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render component",
              "fullTitle": "<AppealsUnavailable> should render component",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_AppealsUnavailable.default, null)),\n  getByText = _renderWithRouter.getByText;\ngetByText('Appeal status is unavailable');\ngetByText('VA.gov is having trouble loading appeals information at this time. Please check back again in a hour. Please note: You are still able to review claims information.');",
              "err": {},
              "uuid": "a40e6001-7d3c-4830-baab-70a9f91686eb",
              "parentUUID": "6f8e1493-993b-4118-bbc7-e9f057d84a4f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a40e6001-7d3c-4830-baab-70a9f91686eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a24b45df-7cb7-4f22-a12b-9bcaefac7d91",
          "title": "<AskVAPage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/AskVAPage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/AskVAPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render disabled submit button when va-checkbox not checked",
              "fullTitle": "<AskVAPage> should render disabled submit button when va-checkbox not checked",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var router = getRouter();\nvar _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_AskVAPage.AskVAPage, {\n    decisionRequestError: null,\n    params: {\n      id: 1\n    },\n    router: router\n  })),\n  container = _renderWithRouter.container;\n(0, _chai.expect)((0, _index.$)('va-checkbox', container).getAttribute('checked')).to.equal('false');\n(0, _chai.expect)((0, _index.$)('.button-primary', container).getAttribute('disabled')).to.exist;\n(0, _chai.expect)(router.push.called).to.be.false;",
              "err": {},
              "uuid": "17ea2a9b-9266-44c1-93b0-d7ba5c5b48a0",
              "parentUUID": "a24b45df-7cb7-4f22-a12b-9bcaefac7d91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render enabled submit button when va-checkbox checked",
              "fullTitle": "<AskVAPage> should render enabled submit button when va-checkbox checked",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var router = getRouter();\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_AskVAPage.AskVAPage, {\n    decisionRequestError: null,\n    params: {\n      id: 1\n    },\n    router: router\n  })),\n  container = _renderWithRouter2.container,\n  rerender = _renderWithRouter2.rerender;\n(0, _chai.expect)((0, _index.$)('.button-primary', container).getAttribute('disabled')).to.exist;\n// Check the checkbox\n(0, _index.$)('va-checkbox', container).__events.vaChange({\n  detail: {\n    checked: true\n  }\n});\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_AskVAPage.AskVAPage, {\n  decisionRequestError: null,\n  params: {\n    id: 1\n  },\n  router: router\n}));\n(0, _chai.expect)((0, _index.$)('.button-primary', container).getAttribute('disabled')).to.not.exist;",
              "err": {},
              "uuid": "68cf5e96-5752-4abd-8c48-2d395439a21e",
              "parentUUID": "a24b45df-7cb7-4f22-a12b-9bcaefac7d91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render disabled submit button when submitting",
              "fullTitle": "<AskVAPage> should render disabled submit button when submitting",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var router = {\n  push: _sinon.default.spy()\n};\nvar _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_AskVAPage.AskVAPage, {\n    loadingDecisionRequest: true,\n    decisionRequestError: null,\n    params: {\n      id: 1\n    },\n    router: router\n  })),\n  container = _renderWithRouter3.container;\n(0, _chai.expect)((0, _index.$)('.button-primary', container).getAttribute('disabled')).to.exist;\n(0, _chai.expect)((0, _index.$)('.button-primary', container).getAttribute('text')).to.equal('Submitting...');",
              "err": {},
              "uuid": "1d437847-cec6-4b63-addf-5ad8f2d9ffa9",
              "parentUUID": "a24b45df-7cb7-4f22-a12b-9bcaefac7d91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update claims and redirect after success",
              "fullTitle": "<AskVAPage> should update claims and redirect after success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var navigate = _sinon.default.spy();\nvar getClaim = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AskVAPage.AskVAPage, {\n  params: {\n    id: 1\n  },\n  navigate: navigate\n}));\ntree.getMountedInstance().UNSAFE_componentWillReceiveProps({\n  decisionRequested: true,\n  getClaim: getClaim\n});\n(0, _chai.expect)(getClaim.calledWith(1)).to.be.true;\n(0, _chai.expect)(navigate.calledWith('../status')).to.be.true;",
              "err": {},
              "uuid": "b398d9ec-25c9-400f-9b96-bcaf61d7eaab",
              "parentUUID": "a24b45df-7cb7-4f22-a12b-9bcaefac7d91",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a9ae64c6-05a5-4cca-a2f9-b98a8aa40e8d",
              "title": "5103 Submission",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/AskVAPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/AskVAPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calls submit5103 ",
                  "fullTitle": "<AskVAPage> 5103 Submission calls submit5103 ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "props.submit5103 = _sinon.default.spy();\nvar _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: store\n  }, /*#__PURE__*/_react.default.createElement(_AskVAPage.AskVAPage, props))),\n  container = _renderWithRouter4.container,\n  rerender = _renderWithRouter4.rerender;\n// Check the checkbox\n(0, _index.$)('va-checkbox', container).__events.vaChange({\n  detail: {\n    checked: true\n  }\n});\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: store\n}, /*#__PURE__*/_react.default.createElement(_AskVAPage.AskVAPage, props)));\n// Click submit button\n_dom.fireEvent.click((0, _index.$)('.button-primary', container));\n(0, _chai.expect)(props.submit5103.called).to.be.true;",
                  "err": {},
                  "uuid": "9b28897e-18e3-451d-a844-74bbe0a8dddb",
                  "parentUUID": "a9ae64c6-05a5-4cca-a2f9-b98a8aa40e8d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b28897e-18e3-451d-a844-74bbe0a8dddb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "17ea2a9b-9266-44c1-93b0-d7ba5c5b48a0",
            "68cf5e96-5752-4abd-8c48-2d395439a21e",
            "1d437847-cec6-4b63-addf-5ad8f2d9ffa9",
            "b398d9ec-25c9-400f-9b96-bcaf61d7eaab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "adf62b38-9b05-4b32-b7b5-72f1730bf987",
          "title": "<AskVAToDecide>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/AskVAToDecide.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/AskVAToDecide.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render component",
              "fullTitle": "<AskVAToDecide> should render component",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_AskVAToDecide.default, null)),\n  container = _renderWithRouter.container,\n  getByText = _renderWithRouter.getByText;\ngetByText('Ask for your Claim Decision');\ngetByText('You can ask us to start evaluating your claim if you don’t have any more documents or evidence to file.');\n(0, _chai.expect)((0, _index.$)('a', container).text).to.equal('View Details');",
              "err": {},
              "uuid": "05f54185-90a0-4835-88a8-8c471097f9ff",
              "parentUUID": "adf62b38-9b05-4b32-b7b5-72f1730bf987",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05f54185-90a0-4835-88a8-8c471097f9ff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8ff456c2-7283-4802-9920-94fc611b7ba1",
          "title": "<Default5103EvidenceNotice>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-document-request-pages/Default5103EvidenceNotice.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-document-request-pages/Default5103EvidenceNotice.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render component when item is a 5103 notice",
              "fullTitle": "<Default5103EvidenceNotice> should render component when item is a 5103 notice",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_Default5103EvidenceNotice.Default5103EvidenceNotice, {\n    item: standard5103,\n    params: {\n      id: claimId\n    }\n  })),\n  getByText = _renderWithRouter.getByText,\n  getByTestId = _renderWithRouter.getByTestId,\n  container = _renderWithRouter.container;\n(0, _chai.expect)((0, _index.$)('#default-5103-notice-page', container)).to.exist;\ngetByText('Review evidence list (5103 notice)');\n(0, _chai.expect)((0, _index.$)('.active-va-link', container)).to.have.text('Find this letter on the claim letters page');\ngetByText('Submit additional evidence, if applicable');\n(0, _chai.expect)(getByTestId('upload-evidence-link').textContent).to.equal('Upload additional evidence');\ngetByText(/Upload additional evidence/i);\ngetByText('Submit an evidence waiver');\n(0, _chai.expect)((0, _index.$)('va-checkbox', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-button', container)).to.exist;",
              "err": {},
              "uuid": "a77608de-b151-4344-9eb0-f8145731983e",
              "parentUUID": "8ff456c2-7283-4802-9920-94fc611b7ba1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render null when item is NOT a 5103 notice",
              "fullTitle": "<Default5103EvidenceNotice> should render null when item is NOT a 5103 notice",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var item = {\n  closedDate: null,\n  description: 'Buddy statement text',\n  displayName: 'Submit buddy statement(s)',\n  id: 467558,\n  overdue: true,\n  receivedDate: null,\n  requestedDate: '2024-03-07',\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: '2024-04-07',\n  uploadsAllowed: true,\n  documents: '[]',\n  date: '2024-03-07'\n};\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_Default5103EvidenceNotice.Default5103EvidenceNotice, {\n    item: item,\n    params: {\n      id: claimId\n    },\n    navigate: function navigate() {}\n  })),\n  container = _renderWithRouter2.container;\n(0, _chai.expect)((0, _index.$)('#default-5103-notice-page', container)).to.not.exist;",
              "err": {},
              "uuid": "fd791326-fb03-47f6-9ae6-b7b49185a94e",
              "parentUUID": "8ff456c2-7283-4802-9920-94fc611b7ba1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "link has the correct href to upload additional evidence",
              "fullTitle": "<Default5103EvidenceNotice> link has the correct href to upload additional evidence",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_Default5103EvidenceNotice.Default5103EvidenceNotice, {\n    item: standard5103,\n    params: {\n      id: claimId\n    }\n  })),\n  getByText = _renderWithRouter3.getByText;\nvar additionalEvidenceLink = getByText(/Upload additional evidence/i);\n(0, _chai.expect)(additionalEvidenceLink.getAttribute('href')).to.equal('/files#add-files');",
              "err": {},
              "uuid": "02245f07-6d15-433a-aa5d-fd3b887f3b14",
              "parentUUID": "8ff456c2-7283-4802-9920-94fc611b7ba1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "54c35722-953b-4e46-994e-26f04c6ac01f",
              "title": "submit5103",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-document-request-pages/Default5103EvidenceNotice.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-document-request-pages/Default5103EvidenceNotice.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "882e7971-240b-406d-9ef6-f87bdbc4ec01",
                  "title": "when checkbox is checked and submit button clicked",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-document-request-pages/Default5103EvidenceNotice.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-document-request-pages/Default5103EvidenceNotice.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should submit5103 notice and redirect to files tab",
                      "fullTitle": "<Default5103EvidenceNotice> submit5103 when checkbox is checked and submit button clicked should submit5103 notice and redirect to files tab",
                      "timedOut": false,
                      "duration": 11,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var navigate = _sinon.default.spy();\nvar submit5103 = _sinon.default.spy();\nvar _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_Default5103EvidenceNotice.Default5103EvidenceNotice, _extends({}, props, {\n    submit5103: submit5103,\n    navigate: navigate,\n    loadingDecisionRequest: false,\n    decisionRequested: true\n  }))),\n  container = _renderWithRouter4.container,\n  rerender = _renderWithRouter4.rerender;\n(0, _chai.expect)((0, _index.$)('#default-5103-notice-page', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-checkbox', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-button', container)).to.exist;\n// Check the checkbox\n(0, _index.$)('va-checkbox', container).__events.vaChange({\n  detail: {\n    checked: true\n  }\n});\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_Default5103EvidenceNotice.Default5103EvidenceNotice, _extends({}, props, {\n  submit5103: submit5103,\n  navigate: navigate,\n  loadingDecisionRequest: false,\n  decisionRequested: true\n})));\n// Click submit button\n_dom.fireEvent.click((0, _index.$)('#submit', container));\n(0, _chai.expect)(submit5103.called).to.be.true;\n(0, _chai.expect)(navigate.calledWith('../files')).to.be.true;",
                      "err": {},
                      "uuid": "6439c823-914d-42da-9626-33b82c41b180",
                      "parentUUID": "882e7971-240b-406d-9ef6-f87bdbc4ec01",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6439c823-914d-42da-9626-33b82c41b180"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 11,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "34ca17c6-8cd5-4c71-90aa-fdc6eaf24350",
                  "title": "when checkbox is not checked and submit button clicked",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-document-request-pages/Default5103EvidenceNotice.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-document-request-pages/Default5103EvidenceNotice.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not submit 5103 notice and error message displayed",
                      "fullTitle": "<Default5103EvidenceNotice> submit5103 when checkbox is not checked and submit button clicked should not submit 5103 notice and error message displayed",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var navigate = _sinon.default.spy();\nvar submit5103 = _sinon.default.spy();\nvar _renderWithRouter5 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_Default5103EvidenceNotice.Default5103EvidenceNotice, _extends({}, props, {\n    submit5103: submit5103,\n    navigate: navigate\n  }))),\n  container = _renderWithRouter5.container;\n(0, _chai.expect)((0, _index.$)('#default-5103-notice-page', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-checkbox', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-button', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-checkbox', container).getAttribute('error')).to.be.null;\n// Click submit button\n_dom.fireEvent.click((0, _index.$)('#submit', container));\n(0, _chai.expect)((0, _index.$)('va-checkbox', container).getAttribute('checked')).to.equal('false');\n(0, _chai.expect)(submit5103.called).to.be.false;\n(0, _chai.expect)(navigate.calledWith('../files')).to.be.false;\n(0, _chai.expect)((0, _index.$)('va-checkbox', container).getAttribute('error')).to.equal('You must confirm you’re done adding evidence before submitting the evidence waiver');",
                      "err": {},
                      "uuid": "d63f9932-8335-48ef-b823-fcc6294d7cf9",
                      "parentUUID": "34ca17c6-8cd5-4c71-90aa-fdc6eaf24350",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d63f9932-8335-48ef-b823-fcc6294d7cf9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 8,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "a77608de-b151-4344-9eb0-f8145731983e",
            "fd791326-fb03-47f6-9ae6-b7b49185a94e",
            "02245f07-6d15-433a-aa5d-fd3b887f3b14"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "09da407a-e510-4fde-8778-0b2554fcc4d1",
          "title": "<DefaultPage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-document-request-pages/DefaultPage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-document-request-pages/DefaultPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render component when status is NEEDED_FROM_YOU",
              "fullTitle": "<DefaultPage> should render component when status is NEEDED_FROM_YOU",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var item = {\n  closedDate: null,\n  description: 'Buddy statement text',\n  displayName: 'Submit buddy statement(s)',\n  id: 467558,\n  overdue: true,\n  receivedDate: null,\n  requestedDate: '2024-03-07',\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: nineMonthsAgoSuspenseDate,\n  uploadsAllowed: true,\n  documents: [],\n  date: '2024-03-07'\n};\nvar monthsDue = (0, _dateFns.formatDistanceToNowStrict)((0, _dateFns.parseISO)(nineMonthsAgoSuspenseDate));\nvar _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DefaultPage.default, _extends({}, defaultProps, {\n    item: item\n  })))),\n  getByText = _renderWithRouter3.getByText,\n  container = _renderWithRouter3.container;\n(0, _chai.expect)((0, _index.$)('#default-page', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.add-files-form', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.due-date-header', container)).to.exist;\nvar formattedClaimDate = formatDate(item.suspenseDate);\ngetByText(\"Needed from you by \".concat(formattedClaimDate, \" - Due \").concat(monthsDue, \" ago\"));\n(0, _chai.expect)((0, _index.$)('.optional-upload', container)).to.not.exist;\ngetByText('Submit buddy statement(s)');\ngetByText((0, _helpers.scrubDescription)(item.description));\n(0, _chai.expect)((0, _index.$)('va-additional-info', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-file-input', container)).to.exist;",
              "err": {},
              "uuid": "645badb3-1719-4478-9bf9-5d896c64d94d",
              "parentUUID": "09da407a-e510-4fde-8778-0b2554fcc4d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render component when status is NEEDED_FROM_OTHERS",
              "fullTitle": "<DefaultPage> should render component when status is NEEDED_FROM_OTHERS",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var item = {\n  closedDate: null,\n  description: 'Buddy statement text',\n  displayName: 'Submit buddy statement(s)',\n  id: 467558,\n  overdue: true,\n  receivedDate: null,\n  requestedDate: '2024-03-07',\n  status: 'NEEDED_FROM_OTHERS',\n  suspenseDate: nineMonthsAgoSuspenseDate,\n  uploadsAllowed: true,\n  documents: [],\n  date: '2024-03-07'\n};\nvar _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DefaultPage.default, _extends({}, defaultProps, {\n    item: item\n  })))),\n  getByText = _renderWithRouter4.getByText,\n  container = _renderWithRouter4.container;\n(0, _chai.expect)((0, _index.$)('#default-page', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.add-files-form', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.due-date-header', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('.optional-upload', container)).to.exist;\ngetByText('- We’ve asked others to send this to us, but you may upload it if you have it.');\ngetByText('Submit buddy statement(s)');\ngetByText((0, _helpers.scrubDescription)(item.description));\n(0, _chai.expect)((0, _index.$)('va-additional-info', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-file-input', container)).to.exist;",
              "err": {},
              "uuid": "52af308a-628d-4712-b9f2-7cb3b12c60d2",
              "parentUUID": "09da407a-e510-4fde-8778-0b2554fcc4d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "f8aa5250-7bda-4ceb-91f1-8acf165f228e",
              "title": "when cstFriendlyEvidenceRequests is true",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-document-request-pages/DefaultPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-document-request-pages/DefaultPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should redner updated UI",
                  "fullTitle": "<DefaultPage> when cstFriendlyEvidenceRequests is true should redner updated UI",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var item = {\n  closedDate: null,\n  canUploadFile: true,\n  description: 'Buddy statement text',\n  displayName: 'Submit buddy statement(s)',\n  id: 467558,\n  overdue: true,\n  receivedDate: null,\n  requestedDate: '2024-03-07',\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: nineMonthsAgoSuspenseDate,\n  uploadsAllowed: true,\n  documents: '[]',\n  date: '2024-03-07'\n};\nvar _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_DefaultPage.default, _extends({}, defaultProps, {\n    item: item\n  })), \",\")),\n  getByText = _renderWithRouter.getByText,\n  container = _renderWithRouter.container;\n(0, _chai.expect)((0, _index.$)('#default-page', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.add-files-form', container)).to.exist;\nvar formattedClaimDate = formatDate(item.suspenseDate);\ngetByText(\"Respond by \".concat(formattedClaimDate));\ngetByText('What we need from you');\ngetByText('Learn about this request in your claim letter');\n(0, _chai.expect)((0, _index.$)('va-link', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.optional-upload', container)).to.not.exist;\ngetByText('Submit buddy statement(s)');\ngetByText((0, _helpers.scrubDescription)(item.description));\n(0, _chai.expect)((0, _index.$)('va-additional-info', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-file-input', container)).to.exist;",
                  "err": {},
                  "uuid": "078456b2-f638-4c6a-8792-831c0e792539",
                  "parentUUID": "f8aa5250-7bda-4ceb-91f1-8acf165f228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should redner update 21-4142 information",
                  "fullTitle": "<DefaultPage> when cstFriendlyEvidenceRequests is true should redner update 21-4142 information",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var item = {\n  closedDate: null,\n  description: '21-4142 text',\n  displayName: '21-4142/21-4142a',\n  friendlyName: 'Authorization to Disclose Information',\n  friendlyDescription: 'good description',\n  canUploadFile: true,\n  supportAliases: ['VA Form 21-4142'],\n  id: 14268,\n  overdue: true,\n  receivedDate: null,\n  requestedDate: '2024-03-07',\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: nineMonthsAgoSuspenseDate,\n  uploadsAllowed: true,\n  documents: [],\n  date: '2024-03-07'\n};\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_DefaultPage.default, _extends({}, defaultProps, {\n    item: item\n  })), \",\")),\n  getByText = _renderWithRouter2.getByText,\n  container = _renderWithRouter2.container;\n(0, _chai.expect)((0, _index.$)('#default-page', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.add-files-form', container)).to.exist;\nvar formattedClaimDate = formatDate(item.suspenseDate);\ngetByText('Authorization to Disclose Information');\ngetByText(\"Respond by \".concat(formattedClaimDate));\ngetByText('What we need from you');\ngetByText('Learn about this request in your claim letter');\ngetByText('Next Steps');\n(0, _chai.expect)((0, _index.$)('va-link', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.optional-upload', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-additional-info', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-file-input', container)).to.exist;",
                  "err": {},
                  "uuid": "66ef8e88-2c54-431f-ace7-fff8da5b8d6d",
                  "parentUUID": "f8aa5250-7bda-4ceb-91f1-8acf165f228e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "078456b2-f638-4c6a-8792-831c0e792539",
                "66ef8e88-2c54-431f-ace7-fff8da5b8d6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 27,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "645badb3-1719-4478-9bf9-5d896c64d94d",
            "52af308a-628d-4712-b9f2-7cb3b12c60d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "872d4842-65b5-488e-aea8-cb351ae13033",
          "title": "<AddFilesForm>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/AddFilesForm.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-files-tab/AddFilesForm.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not add an invalid file type",
              "fullTitle": "<AddFilesForm> should not add an invalid file type",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var files = [];\nvar field = {\n  value: '',\n  dirty: false\n};\nvar onSubmit = _sinon.default.spy();\nvar onAddFile = _sinon.default.spy();\nvar onRemoveFile = _sinon.default.spy();\nvar onFieldChange = _sinon.default.spy();\nvar onCancel = _sinon.default.spy();\nvar onDirtyFields = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AddFilesForm.default, {\n  files: files,\n  field: field,\n  onSubmit: onSubmit,\n  onAddFile: onAddFile,\n  onRemoveFile: onRemoveFile,\n  onFieldChange: onFieldChange,\n  onCancel: onCancel,\n  onDirtyFields: onDirtyFields\n}));\ntree.getMountedInstance().add([{\n  name: 'something.exe',\n  size: 200\n}]);\n(0, _chai.expect)(onAddFile.called).to.be.false;\n(0, _chai.expect)(tree.getMountedInstance().state.errorMessage).to.contain('accepted types');",
              "err": {},
              "uuid": "b8ed1212-6eb2-435a-bc07-71f4a01dcdd6",
              "parentUUID": "872d4842-65b5-488e-aea8-cb351ae13033",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add file of zero size",
              "fullTitle": "<AddFilesForm> should not add file of zero size",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var files = [];\nvar field = {\n  value: '',\n  dirty: false\n};\nvar onSubmit = _sinon.default.spy();\nvar onAddFile = _sinon.default.spy();\nvar onRemoveFile = _sinon.default.spy();\nvar onFieldChange = _sinon.default.spy();\nvar onCancel = _sinon.default.spy();\nvar onDirtyFields = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AddFilesForm.default, {\n  files: files,\n  field: field,\n  onSubmit: onSubmit,\n  onAddFile: onAddFile,\n  onRemoveFile: onRemoveFile,\n  onFieldChange: onFieldChange,\n  onCancel: onCancel,\n  onDirtyFields: onDirtyFields\n}));\ntree.getMountedInstance().add([{\n  name: 'something.txt',\n  size: 0\n}]);\n(0, _chai.expect)(onAddFile.called).to.be.false;\n(0, _chai.expect)(tree.getMountedInstance().state.errorMessage).to.contain('is empty');",
              "err": {},
              "uuid": "6f96015c-7d95-49e9-9030-d9cbab2ce074",
              "parentUUID": "872d4842-65b5-488e-aea8-cb351ae13033",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add an invalid file size",
              "fullTitle": "<AddFilesForm> should not add an invalid file size",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var files = [];\nvar field = {\n  value: '',\n  dirty: false\n};\nvar onSubmit = _sinon.default.spy();\nvar onAddFile = _sinon.default.spy();\nvar onRemoveFile = _sinon.default.spy();\nvar onFieldChange = _sinon.default.spy();\nvar onCancel = _sinon.default.spy();\nvar onDirtyFields = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AddFilesForm.default, {\n  files: files,\n  field: field,\n  onSubmit: onSubmit,\n  onAddFile: onAddFile,\n  onRemoveFile: onRemoveFile,\n  onFieldChange: onFieldChange,\n  onCancel: onCancel,\n  onDirtyFields: onDirtyFields\n}));\ntree.getMountedInstance().add([{\n  name: 'something.txt',\n  size: 999999999999\n}]);\n(0, _chai.expect)(onAddFile.called).to.be.false;\n(0, _chai.expect)(tree.getMountedInstance().state.errorMessage).to.contain(\"\".concat(_validations.MAX_FILE_SIZE_MB, \"MB maximum file size\"));",
              "err": {},
              "uuid": "8ecd10db-8e4e-42a6-bd3d-9d3c83208d30",
              "parentUUID": "872d4842-65b5-488e-aea8-cb351ae13033",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add an invalid PDF file size",
              "fullTitle": "<AddFilesForm> should not add an invalid PDF file size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var files = [];\nvar field = {\n  value: '',\n  dirty: false\n};\nvar onSubmit = _sinon.default.spy();\nvar onAddFile = _sinon.default.spy();\nvar onRemoveFile = _sinon.default.spy();\nvar onFieldChange = _sinon.default.spy();\nvar onCancel = _sinon.default.spy();\nvar onDirtyFields = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AddFilesForm.default, {\n  files: files,\n  field: field,\n  onSubmit: onSubmit,\n  onAddFile: onAddFile,\n  onRemoveFile: onRemoveFile,\n  onFieldChange: onFieldChange,\n  onCancel: onCancel,\n  onDirtyFields: onDirtyFields\n}));\ntree.getMountedInstance().add([{\n  name: 'something.pdf',\n  size: _validations.MAX_PDF_SIZE_BYTES + 100\n}]);\n(0, _chai.expect)(onAddFile.called).to.be.false;\n(0, _chai.expect)(tree.getMountedInstance().state.errorMessage).to.contain(\"\".concat(_validations.MAX_PDF_SIZE_MB, \"MB maximum file size\"));",
              "err": {},
              "uuid": "8711c7ff-32f9-475d-b5ed-1b3f04ec2e9f",
              "parentUUID": "872d4842-65b5-488e-aea8-cb351ae13033",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a valid file",
              "fullTitle": "<AddFilesForm> should add a valid file",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var files = [];\nvar field = {\n  value: '',\n  dirty: false\n};\nvar onSubmit = _sinon.default.spy();\nvar onAddFile = _sinon.default.spy();\nvar onRemoveFile = _sinon.default.spy();\nvar onFieldChange = _sinon.default.spy();\nvar onCancel = _sinon.default.spy();\nvar onDirtyFields = _sinon.default.spy();\nvar mockReadAndCheckFile = function mockReadAndCheckFile() {\n  return {\n    checkIsEncryptedPdf: false,\n    checkTypeAndExtensionMatches: true\n  };\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AddFilesForm.default, {\n  files: files,\n  field: field,\n  onSubmit: onSubmit,\n  onAddFile: onAddFile,\n  onRemoveFile: onRemoveFile,\n  onFieldChange: onFieldChange,\n  onCancel: onCancel,\n  onDirtyFields: onDirtyFields,\n  mockReadAndCheckFile: mockReadAndCheckFile\n}));\ntree.getMountedInstance().add([{\n  name: 'something.jpg',\n  type: _file.fileTypeSignatures.jpg.mime,\n  size: 9999\n}]);\n(0, _chai.expect)(onAddFile.called).to.be.true;\n(0, _chai.expect)(tree.getMountedInstance().state.errorMessage).to.be.null;",
              "err": {},
              "uuid": "376d2ea1-1007-4005-91b5-493173e67e6f",
              "parentUUID": "872d4842-65b5-488e-aea8-cb351ae13033",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a valid file text file of valid size",
              "fullTitle": "<AddFilesForm> should add a valid file text file of valid size",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var files = [];\nvar field = {\n  value: '',\n  dirty: false\n};\nvar onSubmit = _sinon.default.spy();\nvar onAddFile = _sinon.default.spy();\nvar onRemoveFile = _sinon.default.spy();\nvar onFieldChange = _sinon.default.spy();\nvar onCancel = _sinon.default.spy();\nvar onDirtyFields = _sinon.default.spy();\nvar mockReadAndCheckFile = function mockReadAndCheckFile() {\n  return {\n    checkIsEncryptedPdf: false,\n    checkTypeAndExtensionMatches: true\n  };\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AddFilesForm.default, {\n  files: files,\n  field: field,\n  onSubmit: onSubmit,\n  onAddFile: onAddFile,\n  onRemoveFile: onRemoveFile,\n  onFieldChange: onFieldChange,\n  onCancel: onCancel,\n  onDirtyFields: onDirtyFields,\n  mockReadAndCheckFile: mockReadAndCheckFile\n}));\ntree.getMountedInstance().add([{\n  name: 'valid.txt',\n  type: _file.fileTypeSignatures.txt.mime,\n  size: 95\n}]);\n(0, _chai.expect)(onAddFile.called).to.be.true;\n(0, _chai.expect)(tree.getMountedInstance().state.errorMessage).to.be.null;",
              "err": {},
              "uuid": "2f5f0774-18b2-420b-a959-8b371179e86c",
              "parentUUID": "872d4842-65b5-488e-aea8-cb351ae13033",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a large PDF file",
              "fullTitle": "<AddFilesForm> should add a large PDF file",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var files = [];\nvar field = {\n  value: '',\n  dirty: false\n};\nvar onSubmit = _sinon.default.spy();\nvar onAddFile = _sinon.default.spy();\nvar onRemoveFile = _sinon.default.spy();\nvar onFieldChange = _sinon.default.spy();\nvar onCancel = _sinon.default.spy();\nvar onDirtyFields = _sinon.default.spy();\nvar mockReadAndCheckFile = function mockReadAndCheckFile() {\n  return {\n    checkIsEncryptedPdf: false,\n    checkTypeAndExtensionMatches: true\n  };\n};\n// valid size larger than max non-PDF size, but smaller than max PDF size\nvar validPdfFileSize = _validations.MAX_FILE_SIZE_BYTES + (_validations.MAX_PDF_SIZE_BYTES - _validations.MAX_FILE_SIZE_BYTES) / 2;\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AddFilesForm.default, {\n  files: files,\n  field: field,\n  onSubmit: onSubmit,\n  onAddFile: onAddFile,\n  onRemoveFile: onRemoveFile,\n  onFieldChange: onFieldChange,\n  onCancel: onCancel,\n  onDirtyFields: onDirtyFields,\n  mockReadAndCheckFile: mockReadAndCheckFile\n}));\ntree.getMountedInstance().add([{\n  name: 'something.pdf',\n  type: _file.fileTypeSignatures.pdf.mime,\n  size: validPdfFileSize\n}]);\n(0, _chai.expect)(onAddFile.called).to.be.true;\n(0, _chai.expect)(tree.getMountedInstance().state.errorMessage).to.be.null;",
              "err": {},
              "uuid": "73fce53d-f04c-4957-b15f-00997a4afe3f",
              "parentUUID": "872d4842-65b5-488e-aea8-cb351ae13033",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when the file extension & format do not match",
              "fullTitle": "<AddFilesForm> should return an error when the file extension & format do not match",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var files = [];\nvar field = {\n  value: '',\n  dirty: false\n};\nvar onSubmit = _sinon.default.spy();\nvar onAddFile = _sinon.default.spy();\nvar onRemoveFile = _sinon.default.spy();\nvar onFieldChange = _sinon.default.spy();\nvar onCancel = _sinon.default.spy();\nvar onDirtyFields = _sinon.default.spy();\nvar mockReadAndCheckFile = function mockReadAndCheckFile() {\n  return {\n    checkIsEncryptedPdf: false,\n    checkTypeAndExtensionMatches: false\n  };\n};\n// valid size larger than max non-PDF size, but smaller than max PDF size\nvar validPdfFileSize = _validations.MAX_FILE_SIZE_BYTES + (_validations.MAX_PDF_SIZE_BYTES - _validations.MAX_FILE_SIZE_BYTES) / 2;\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AddFilesForm.default, {\n  files: files,\n  field: field,\n  onSubmit: onSubmit,\n  onAddFile: onAddFile,\n  onRemoveFile: onRemoveFile,\n  onFieldChange: onFieldChange,\n  onCancel: onCancel,\n  onDirtyFields: onDirtyFields,\n  mockReadAndCheckFile: mockReadAndCheckFile\n}));\ntree.getMountedInstance().add([{\n  name: 'something.pdf',\n  type: _file.fileTypeSignatures.pdf.mime,\n  size: validPdfFileSize\n}]);\n(0, _chai.expect)(onAddFile.called).to.be.false;\n(0, _chai.expect)(tree.getMountedInstance().state.errorMessage).to.eq(_file.FILE_TYPE_MISMATCH_ERROR);",
              "err": {},
              "uuid": "ab344431-4392-4101-9689-e1c04775394e",
              "parentUUID": "872d4842-65b5-488e-aea8-cb351ae13033",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error message when no files present and field is dirty",
              "fullTitle": "<AddFilesForm> should return an error message when no files present and field is dirty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var files = [];\nvar field = {\n  value: '',\n  dirty: true\n};\nvar onSubmit = _sinon.default.spy();\nvar onAddFile = _sinon.default.spy();\nvar onRemoveFile = _sinon.default.spy();\nvar onFieldChange = _sinon.default.spy();\nvar onCancel = _sinon.default.spy();\nvar onDirtyFields = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AddFilesForm.default, {\n  files: files,\n  field: field,\n  onSubmit: onSubmit,\n  onAddFile: onAddFile,\n  onRemoveFile: onRemoveFile,\n  onFieldChange: onFieldChange,\n  onCancel: onCancel,\n  onDirtyFields: onDirtyFields\n}));\nvar message = tree.getMountedInstance().getErrorMessage();\n(0, _chai.expect)(message).to.equal('Please select a file first');\ntree.getMountedInstance().state.errorMessage = 'message';\nmessage = tree.getMountedInstance().getErrorMessage();\n(0, _chai.expect)(message).to.equal('message');",
              "err": {},
              "uuid": "a580871f-c39b-40d3-90e8-19de369d4abc",
              "parentUUID": "872d4842-65b5-488e-aea8-cb351ae13033",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show password input",
              "fullTitle": "<AddFilesForm> should show password input",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var files = [{\n  file: {\n    size: 20,\n    name: 'something.pdf'\n  },\n  docType: {\n    value: 'L501',\n    dirty: false\n  },\n  password: {\n    value: 'password123',\n    dirty: false\n  },\n  isEncrypted: true\n}];\nvar field = {\n  value: '',\n  dirty: false\n};\nvar onSubmit = _sinon.default.spy();\nvar onAddFile = _sinon.default.spy();\nvar onRemoveFile = _sinon.default.spy();\nvar onFieldChange = _sinon.default.spy();\nvar onCancel = _sinon.default.spy();\nvar onDirtyFields = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AddFilesForm.default, {\n  files: files,\n  field: field,\n  onSubmit: onSubmit,\n  onAddFile: onAddFile,\n  onRemoveFile: onRemoveFile,\n  onFieldChange: onFieldChange,\n  onCancel: onCancel,\n  onDirtyFields: onDirtyFields\n}));\n(0, _chai.expect)(tree.getMountedInstance().state.errorMessage).to.be.null;\n// VaTextInput has a name prop set to 'password'\n(0, _chai.expect)(tree.everySubTree('*', byName('password'))[0]).to.exist;",
              "err": {},
              "uuid": "9ae21581-036e-4265-a43e-7852c93b3a04",
              "parentUUID": "872d4842-65b5-488e-aea8-cb351ae13033",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
              "title": "tests using render()",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/AddFilesForm.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/AddFilesForm.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render component",
                  "fullTitle": "<AddFilesForm> tests using render() should render component",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, fileFormProps))),\n  container = _render.container,\n  getAllByRole = _render.getAllByRole;\n(0, _chai.expect)((0, _index.$)('.add-files-form', container)).to.exist;\ngetAllByRole('link', {\n  text: 'How to File a Claim page (opens in a new tab)'\n});\n(0, _chai.expect)((0, _index.$)('#file-upload', container)).to.exist;",
                  "err": {},
                  "uuid": "2a6e5a45-278c-43b7-8373-100411a95a26",
                  "parentUUID": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uploading modal should not be visible",
                  "fullTitle": "<AddFilesForm> tests using render() uploading modal should not be visible",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, _extends({}, fileFormProps, {\n    uploading: true\n  })))),\n  container = _render2.container;\n(0, _chai.expect)((0, _index.$)('#upload-status', container).visible).to.be.false;",
                  "err": {},
                  "uuid": "af9b194c-5877-4c8a-8fbc-6b078b3ac859",
                  "parentUUID": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "remove files modal should not be visible",
                  "fullTitle": "<AddFilesForm> tests using render() remove files modal should not be visible",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, fileFormProps))),\n  container = _render3.container;\n(0, _chai.expect)((0, _index.$)('#remove-file', container).visible).to.be.false;",
                  "err": {},
                  "uuid": "f42f240e-593b-427d-bbdc-f6caf8aab700",
                  "parentUUID": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include mail info additional info",
                  "fullTitle": "<AddFilesForm> tests using render() should include mail info additional info",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render4 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, fileFormProps))),\n  getByText = _render4.getByText,\n  getAllByRole = _render4.getAllByRole;\ngetByText(/Please upload your documents online here to help us process your claim quickly./i);\ngetByText(/If you can’t upload documents:/i);\ngetAllByRole('listitem', {\n  text: 'Make copies of the documents.'\n});\ngetAllByRole('listitem', {\n  text: 'Make sure you write your name and claim number on every page.'\n});\ngetAllByRole('listitem', {\n  text: 'Mail them to the VA Claims Intake Center (opens in a new tab).'\n});",
                  "err": {},
                  "uuid": "bdd04dc8-5ba3-448e-9af6-db95e9840da9",
                  "parentUUID": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not submit if files empty",
                  "fullTitle": "<AddFilesForm> tests using render() should not submit if files empty",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var onSubmit = _sinon.default.spy();\nvar onDirtyFields = _sinon.default.spy();\nvar _render5 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, _extends({}, fileFormProps, {\n    onSubmit: onSubmit,\n    onDirtyFields: onDirtyFields\n  })))),\n  container = _render5.container;\n_dom.fireEvent.click((0, _index.$)('#submit', container));\n(0, _chai.expect)(onSubmit.called).to.be.false;\n(0, _chai.expect)(onDirtyFields.called).to.be.true;",
                  "err": {},
                  "uuid": "b2aaf7d8-c72d-4bbf-8d14-c4ce2c34110f",
                  "parentUUID": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add a valid file and submit",
                  "fullTitle": "<AddFilesForm> tests using render() should add a valid file and submit",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "963f6de3-0ba6-4b83-95c6-2308e4f8ff5c",
                  "parentUUID": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add a valid file with password and submit",
                  "fullTitle": "<AddFilesForm> tests using render() should add a valid file with password and submit",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "2ce39a4f-3ee2-4ee8-b7c4-1c349ecd122a",
                  "parentUUID": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mask filenames from Datadog (no PII)",
                  "fullTitle": "<AddFilesForm> tests using render() should mask filenames from Datadog (no PII)",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render8 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, _extends({}, fileFormProps, {\n    files: [file]\n  })))),\n  container = _render8.container;\n(0, _chai.expect)((0, _index.$)('.document-title', container).getAttribute('data-dd-privacy')).to.equal('mask');",
                  "err": {},
                  "uuid": "9b19e20f-fb84-4363-a35f-e2c294acbc5c",
                  "parentUUID": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add a valid file",
                  "fullTitle": "<AddFilesForm> tests using render() should add a valid file",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render9 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, fileFormProps))),\n  container = _render9.container,\n  rerender = _render9.rerender,\n  getByText = _render9.getByText;\nvar fileInput = (0, _index.$)('#file-upload', container);\n// Add a file to the va-file-input component\n_userEvent.default.upload(fileInput, file);\n(0, _chai.expect)(fileInput.files[0]).to.equal(file);\n(0, _chai.expect)(fileInput.files.length).to.equal(1);\nrerender(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore(false)\n}, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, _extends({}, fileFormProps, {\n  files: [file],\n  uploading: true\n}))));\ngetByText('hello.jpg');",
                  "err": {},
                  "uuid": "55922e69-6ca6-42b3-9712-41f1d8d0604b",
                  "parentUUID": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add a valid file and change it",
                  "fullTitle": "<AddFilesForm> tests using render() should add a valid file and change it",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render10 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, fileFormProps))),\n  container = _render10.container,\n  rerender = _render10.rerender,\n  getByText = _render10.getByText;\nvar fileInput = (0, _index.$)('#file-upload', container);\n// Add a file to the va-file-input component\n_userEvent.default.upload(fileInput, file);\n(0, _chai.expect)(fileInput.files[0]).to.equal(file);\n(0, _chai.expect)(fileInput.files.length).to.equal(1);\nrerender(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore(false)\n}, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, _extends({}, fileFormProps, {\n  files: [file],\n  uploading: true\n}))));\ngetByText('hello.jpg');\n// Change the file\n_userEvent.default.upload(fileInput, file2);\n(0, _chai.expect)(fileInput.files[0]).to.equal(file2);\n(0, _chai.expect)(fileInput.files.length).to.equal(1);\nrerender(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore(false)\n}, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, _extends({}, fileFormProps, {\n  files: [file2],\n  uploading: true\n}))));\ngetByText('hello2.jpg');",
                  "err": {},
                  "uuid": "98978984-de0a-4de8-80dc-126ced3d57f2",
                  "parentUUID": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add multiple valid files",
                  "fullTitle": "<AddFilesForm> tests using render() should add multiple valid files",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var files = [];\nvar _render11 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, _extends({}, fileFormProps, {\n    files: files\n  })))),\n  container = _render11.container,\n  getByText = _render11.getByText,\n  rerender = _render11.rerender;\nvar fileInput = (0, _index.$)('#file-upload', container);\n// Add multiple files to the va-file-input component\n_userEvent.default.upload(fileInput, [file, file2]);\n(0, _chai.expect)(fileInput.files[0].length).to.equal(2);\n(0, _chai.expect)(fileInput.files[0][0]).to.equal(file);\n(0, _chai.expect)(fileInput.files[0][1]).to.equal(file2);\nrerender(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore(false)\n}, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, _extends({}, fileFormProps, {\n  files: [file, file2],\n  uploading: true\n}))));\ngetByText('hello.jpg');\ngetByText('hello2.jpg');",
                  "err": {},
                  "uuid": "fcb3016b-0322-4d36-b25a-721de91857a1",
                  "parentUUID": "d1a1c110-da34-4b20-a4d8-99c00ac33ee8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a6e5a45-278c-43b7-8373-100411a95a26",
                "af9b194c-5877-4c8a-8fbc-6b078b3ac859",
                "f42f240e-593b-427d-bbdc-f6caf8aab700",
                "bdd04dc8-5ba3-448e-9af6-db95e9840da9",
                "b2aaf7d8-c72d-4bbf-8d14-c4ce2c34110f",
                "963f6de3-0ba6-4b83-95c6-2308e4f8ff5c",
                "2ce39a4f-3ee2-4ee8-b7c4-1c349ecd122a",
                "9b19e20f-fb84-4363-a35f-e2c294acbc5c",
                "55922e69-6ca6-42b3-9712-41f1d8d0604b",
                "98978984-de0a-4de8-80dc-126ced3d57f2",
                "fcb3016b-0322-4d36-b25a-721de91857a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 175,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9d7a02d2-5142-4ba9-8dbb-2008af80bf5c",
              "title": "when cstFriendlyEvidenceRequests is true",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/AddFilesForm.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/AddFilesForm.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render updated file input section ui",
                  "fullTitle": "<AddFilesForm> when cstFriendlyEvidenceRequests is true should render updated file input section ui",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render12 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_AddFilesForm.default, fileFormProps))),\n  getByText = _render12.getByText;\ngetByText('Upload Documents');\ngetByText('If you have a document to upload, you can do that here.');",
                  "err": {},
                  "uuid": "03465f70-a263-420e-b505-7449d5fbd063",
                  "parentUUID": "9d7a02d2-5142-4ba9-8dbb-2008af80bf5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03465f70-a263-420e-b505-7449d5fbd063"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "b8ed1212-6eb2-435a-bc07-71f4a01dcdd6",
            "6f96015c-7d95-49e9-9030-d9cbab2ce074",
            "8ecd10db-8e4e-42a6-bd3d-9d3c83208d30",
            "8711c7ff-32f9-475d-b5ed-1b3f04ec2e9f",
            "376d2ea1-1007-4005-91b5-493173e67e6f",
            "2f5f0774-18b2-420b-a959-8b371179e86c",
            "73fce53d-f04c-4957-b15f-00997a4afe3f",
            "ab344431-4392-4101-9689-e1c04775394e",
            "a580871f-c39b-40d3-90e8-19de369d4abc",
            "9ae21581-036e-4265-a43e-7852c93b3a04"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "235c70d4-e3ab-4a4c-830b-381681d05d30",
          "title": "<AdditionalEvidencePage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/AdditionalEvidencePage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-files-tab/AdditionalEvidencePage.unit.spec.jsx",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"<AdditionalEvidencePage>\"",
              "fullTitle": "<AdditionalEvidencePage> \"before each\" hook in \"<AdditionalEvidencePage>\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stubbing out AddFilesForm because we're not interested\n// in setting up all of the redux state needed to test it\nstub = _sinon.default.stub(AddFilesForm, 'default');\nstub.returns(/*#__PURE__*/_react.default.createElement(\"div\", {\n  \"data-testid\": \"add-files-form\"\n}));\nstub.propTypes = {};",
              "err": {},
              "uuid": "07657ff8-cd3f-4f02-bb34-01ffd923b75c",
              "parentUUID": "235c70d4-e3ab-4a4c-830b-381681d05d30",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"<AdditionalEvidencePage>\"",
              "fullTitle": "<AdditionalEvidencePage> \"after each\" hook in \"<AdditionalEvidencePage>\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "stub.restore();",
              "err": {},
              "uuid": "f7182823-623e-494c-91a5-8f70f0b0142c",
              "parentUUID": "235c70d4-e3ab-4a4c-830b-381681d05d30",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
              "title": "when claim is open",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/AdditionalEvidencePage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/AdditionalEvidencePage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render loading div",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open should render loading div",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n  claim: claim,\n  loading: true\n})));\n(0, _chai.expect)(tree.everySubTree('va-loading-indicator')).not.to.be.empty;",
                  "err": {},
                  "uuid": "6e7d401a-4d77-4559-9624-02bf5f25347f",
                  "parentUUID": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render upload error alert",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open should render upload error alert",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var message = {\n  title: 'test',\n  body: 'test',\n  type: 'error'\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, {\n  claim: claim,\n  message: message,\n  filesNeeded: [],\n  filesOptional: []\n}));\n(0, _chai.expect)(tree.subTree('Notification')).not.to.be.false;",
                  "err": {},
                  "uuid": "b84f3743-19c0-45e4-be74-3f67eb59b0e1",
                  "parentUUID": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render upload error alert when rerendered",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open should render upload error alert when rerendered",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore\n  }, /*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n    claim: claim\n  })), \",\")),\n  container = _render.container,\n  rerender = _render.rerender;\n(0, _chai.expect)((0, _index.$)('va-alert', container)).not.to.exist;\nvar message = {\n  title: 'Error uploading',\n  body: 'Internal server error',\n  type: 'error'\n};\nrerender(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore\n}, /*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n  claim: claim,\n  message: message\n})), \",\"));\n(0, _chai.expect)((0, _index.$)('va-alert', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-alert h2', container).textContent).to.equal(message.title);",
                  "err": {},
                  "uuid": "8b606751-e935-4754-8792-a2ec898a1b16",
                  "parentUUID": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear upload error when leaving",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open should clear upload error when leaving",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var message = {\n  title: 'test',\n  body: 'test',\n  type: 'error'\n};\nvar clearAdditionalEvidenceNotification = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n  claim: claim,\n  clearAdditionalEvidenceNotification: clearAdditionalEvidenceNotification,\n  message: message\n})));\n(0, _chai.expect)(tree.subTree('Notification')).not.to.be.false;\ntree.getMountedInstance().componentWillUnmount();\n(0, _chai.expect)(clearAdditionalEvidenceNotification.called).to.be.true;",
                  "err": {},
                  "uuid": "938e6606-5b61-4980-9a2c-4b73472c3f07",
                  "parentUUID": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not clear notification after completed upload",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open should not clear notification after completed upload",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var message = {\n  title: 'test',\n  body: 'test',\n  type: 'error'\n};\nvar clearAdditionalEvidenceNotification = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n  claim: claim,\n  uploadComplete: true,\n  clearAdditionalEvidenceNotification: clearAdditionalEvidenceNotification,\n  message: message\n})));\n(0, _chai.expect)(tree.subTree('Notification')).not.to.be.false;\ntree.getMountedInstance().componentWillUnmount();\n(0, _chai.expect)(clearAdditionalEvidenceNotification.called).to.be.false;",
                  "err": {},
                  "uuid": "79f69e36-35f4-41f5-bccd-cdb70f82c3e9",
                  "parentUUID": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should focus on header when location has equals #add-files",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open should focus on header when location has equals #add-files",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var location = {\n  hash: '#add-files'\n};\n(0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore\n}, /*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n  claim: claim,\n  location: location\n}))));\n(0, _chai.expect)(document.activeElement.id).to.equal('add-files');",
                  "err": {},
                  "uuid": "58bc50b9-69d4-418b-b9b2-4ef0c8b58de6",
                  "parentUUID": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle submit files",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open should handle submit files",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub.restore();\nvar files = [];\nvar onSubmit = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({\n  claim: claim,\n  files: files,\n  submitFiles: onSubmit\n}, fileFormProps)));\ntree.subTree('AddFilesForm').props.onSubmit();\n(0, _chai.expect)(onSubmit.calledWith(1, null, files)).to.be.true;",
                  "err": {},
                  "uuid": "213e486e-4867-4285-add6-50a5e2daa6fe",
                  "parentUUID": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reset uploads on mount",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open should reset uploads on mount",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var resetUploads = _sinon.default.spy();\nvar mainDiv = document.createElement('div');\nmainDiv.classList.add('va-nav-breadcrumbs');\ndocument.body.appendChild(mainDiv);\n_testUtils.default.renderIntoDocument(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: _helpers.uploadStore\n}, /*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n  claim: claim,\n  uploadField: {\n    value: null,\n    dirty: false\n  },\n  resetUploads: resetUploads\n}))));\n(0, _chai.expect)(resetUploads.called).to.be.true;",
                  "err": {},
                  "uuid": "a61680f6-d8d2-42c5-b76b-331d709af410",
                  "parentUUID": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set details and go to files page if complete",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open should set details and go to files page if complete",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var getClaim = _sinon.default.spy();\nvar resetUploads = _sinon.default.spy();\nvar navigate = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n  claim: claim,\n  uploadComplete: true,\n  navigate: navigate,\n  getClaim: getClaim,\n  resetUploads: resetUploads\n})));\ntree.getMountedInstance().UNSAFE_componentWillReceiveProps({\n  uploadComplete: true\n});\n(0, _chai.expect)(getClaim.calledWith(1)).to.be.true;\n(0, _chai.expect)(navigate.calledWith('../files')).to.be.true;",
                  "err": {},
                  "uuid": "22335f18-140a-46d3-845f-34ee36192b74",
                  "parentUUID": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shows va-alerts when files are needed",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open shows va-alerts when files are needed",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var filesNeeded = [{\n  id: 1,\n  status: 'NEEDED_FROM_YOU',\n  displayName: 'Test',\n  description: 'Test',\n  suspenseDate: '2024-02-01'\n}];\nvar filesOptional = [{\n  id: 2,\n  status: 'NEEDED_FROM_OTHERS',\n  displayName: 'Test',\n  description: 'Test'\n}];\nvar _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore\n  }, /*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n    claim: claim,\n    router: getRouter(),\n    filesNeeded: filesNeeded,\n    filesOptional: filesOptional\n  })), \",\")),\n  container = _renderWithRouter.container;\n(0, _chai.expect)((0, _index.$)('.primary-alert', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.optional-alert', container)).to.exist;",
                  "err": {},
                  "uuid": "6021069c-5622-4a66-b3d3-72a11d5a47ec",
                  "parentUUID": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "doesn’t show va-alerts when no files are needed",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open doesn’t show va-alerts when no files are needed",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore\n  }, /*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n    claim: claim,\n    router: getRouter()\n  })))),\n  container = _render2.container;\n(0, _chai.expect)((0, _index.$)('.primary-alert', container)).not.to.exist;\n(0, _chai.expect)((0, _index.$)('.optional-alert', container)).not.to.exist;",
                  "err": {},
                  "uuid": "bc44d498-3c2d-4b94-8f22-b5057d0ad798",
                  "parentUUID": "093f17a9-216d-4710-8fc1-4d4f4a00716c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e7d401a-4d77-4559-9624-02bf5f25347f",
                "b84f3743-19c0-45e4-be74-3f67eb59b0e1",
                "8b606751-e935-4754-8792-a2ec898a1b16",
                "938e6606-5b61-4980-9a2c-4b73472c3f07",
                "79f69e36-35f4-41f5-bccd-cdb70f82c3e9",
                "58bc50b9-69d4-418b-b9b2-4ef0c8b58de6",
                "213e486e-4867-4285-add6-50a5e2daa6fe",
                "a61680f6-d8d2-42c5-b76b-331d709af410",
                "22335f18-140a-46d3-845f-34ee36192b74",
                "6021069c-5622-4a66-b3d3-72a11d5a47ec",
                "bc44d498-3c2d-4b94-8f22-b5057d0ad798"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "fbbca794-d243-4290-99a2-fc6715a67b6c",
              "title": "when claim is open with automated 5103 and standard 5103",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/AdditionalEvidencePage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/AdditionalEvidencePage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shows va-alert for automated 5103 notice when files are needed",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open with automated 5103 and standard 5103 shows va-alert for automated 5103 notice when files are needed",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var filesNeeded = [{\n  description: 'Automated 5103 Notice Response',\n  displayName: 'Automated 5103 Notice Response',\n  id: 467558,\n  overdue: true,\n  requestedDate: '2024-01-19',\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: '2024-03-07',\n  uploadsAllowed: true\n}];\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore\n  }, /*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n    claim: claim,\n    router: getRouter(),\n    filesNeeded: filesNeeded\n  })), \",\")),\n  container = _renderWithRouter2.container,\n  getByText = _renderWithRouter2.getByText,\n  getByTestId = _renderWithRouter2.getByTestId;\n(0, _chai.expect)((0, _index.$)('.primary-alert', container)).to.exist;\n(0, _chai.expect)(getByTestId(\"item-\".concat(claim.attributes.trackedItems[0].id))).to.exist;\ngetByText('Automated 5103 Notice Response');",
                  "err": {},
                  "uuid": "4539fad4-f4d2-4d0a-bb51-c3303608e49f",
                  "parentUUID": "fbbca794-d243-4290-99a2-fc6715a67b6c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4539fad4-f4d2-4d0a-bb51-c3303608e49f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "eff0620d-87ae-43b4-a9e8-f4eb28c752bf",
              "title": "when claim is open with only standard 5103",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/AdditionalEvidencePage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/AdditionalEvidencePage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "doesnt show va-alert for standard 5103 notice",
                  "fullTitle": "<AdditionalEvidencePage> when claim is open with only standard 5103 doesnt show va-alert for standard 5103 notice",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore\n  }, /*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n    claim: claim,\n    router: getRouter()\n  })), \",\")),\n  queryByText = _renderWithRouter3.queryByText,\n  queryByTestId = _renderWithRouter3.queryByTestId;\n(0, _chai.expect)(queryByTestId('standard-5103-notice-alert')).to.not.exist;\n(0, _chai.expect)(queryByText('5103 Evidence Notice')).to.be.null;\n(0, _chai.expect)(queryByText('Automated 5103 Notice Response')).to.be.null;",
                  "err": {},
                  "uuid": "5db2f783-b5fe-4394-9141-c536757cbf8b",
                  "parentUUID": "eff0620d-87ae-43b4-a9e8-f4eb28c752bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5db2f783-b5fe-4394-9141-c536757cbf8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "07225acd-3fc0-4aa1-9e38-9d607194e195",
              "title": "when claim is closed",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/AdditionalEvidencePage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/AdditionalEvidencePage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render loading div",
                  "fullTitle": "<AdditionalEvidencePage> when claim is closed should render loading div",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n    claim: claim,\n    resetUploads: resetUploads,\n    uploadComplete: true,\n    loading: true\n  }))),\n  container = _render3.container;\nvar additionalEvidenceSection = (0, _index.$)('.additional-evidence-container', container);\n(0, _chai.expect)(additionalEvidenceSection).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
                  "err": {},
                  "uuid": "97e5cd14-0184-4d08-b795-310d89fb7227",
                  "parentUUID": "07225acd-3fc0-4aa1-9e38-9d607194e195",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render closed message",
                  "fullTitle": "<AdditionalEvidencePage> when claim is closed should render closed message",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render4 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore\n  }, /*#__PURE__*/_react.default.createElement(_AdditionalEvidencePage.AdditionalEvidencePage, _extends({}, fileFormProps, {\n    claim: claim,\n    resetUploads: resetUploads,\n    uploadComplete: true\n  })), \",\")),\n  container = _render4.container,\n  getByText = _render4.getByText;\nvar additionalEvidenceSection = (0, _index.$)('.additional-evidence-container', container);\n(0, _chai.expect)(additionalEvidenceSection).to.exist;\nvar text = 'The claim is closed so you can no longer submit any additional evidence.';\n(0, _chai.expect)(getByText(text)).to.exist;",
                  "err": {},
                  "uuid": "5d5ad800-70e7-4b97-aa96-374058f70deb",
                  "parentUUID": "07225acd-3fc0-4aa1-9e38-9d607194e195",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97e5cd14-0184-4d08-b795-310d89fb7227",
                "5d5ad800-70e7-4b97-aa96-374058f70deb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c29baf7a-c25c-4181-a4e3-5f1ce6b27f64",
          "title": "<ClaimFileHeader>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/ClaimFileHeader.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-files-tab/ClaimFileHeader.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4965cc56-8dc8-4d5a-ada7-5fe80b1994e8",
              "title": "when isOpen is true",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/ClaimFileHeader.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/ClaimFileHeader.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a ClaimFileHeader section with is open text",
                  "fullTitle": "<ClaimFileHeader> when isOpen is true should render a ClaimFileHeader section with is open text",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimFileHeader.default, {\n    isOpen: true\n  })),\n  container = _render.container,\n  getByText = _render.getByText;\nvar text = 'If you need to add evidence, you can do that here. You can also review the files associated with this claim.';\n(0, _chai.expect)((0, _index.$)('.claim-file-header-container', container)).to.exist;\n(0, _chai.expect)(getByText(text)).to.exist;",
                  "err": {},
                  "uuid": "d81416cc-9aa3-42e2-a9af-1b18a0d85fb9",
                  "parentUUID": "4965cc56-8dc8-4d5a-ada7-5fe80b1994e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d81416cc-9aa3-42e2-a9af-1b18a0d85fb9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5b255dea-b822-4d15-857b-47584468cb83",
              "title": "when isOpen is false",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/ClaimFileHeader.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/ClaimFileHeader.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a ClaimFileHeader section with is closed text",
                  "fullTitle": "<ClaimFileHeader> when isOpen is false should render a ClaimFileHeader section with is closed text",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimFileHeader.default, {\n    isOpen: false\n  })),\n  container = _render2.container,\n  getByText = _render2.getByText;\nvar text = 'You can see the files associated with this claim.';\n(0, _chai.expect)((0, _index.$)('.claim-file-header-container', container)).to.exist;\n(0, _chai.expect)(getByText(text)).to.exist;",
                  "err": {},
                  "uuid": "89001e96-fb0f-4cf2-bb5c-9a714864b86a",
                  "parentUUID": "5b255dea-b822-4d15-857b-47584468cb83",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89001e96-fb0f-4cf2-bb5c-9a714864b86a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ca6b86cb-dddc-4882-af3d-0ef3b72b7756",
          "title": "<DocumentsFiled>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dd6ca64c-9b95-44f2-8b17-eac0557c7200",
              "title": "when claim is open, doesnt have trackedItems or supportingDocs",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render DocumentsFiled section with message",
                  "fullTitle": "<DocumentsFiled> when claim is open, doesnt have trackedItems or supportingDocs should render DocumentsFiled section with message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DocumentsFiled.default, {\n    claim: claim\n  })),\n  container = _render.container,\n  getByText = _render.getByText;\nvar text = 'You haven’t turned in any documents to the VA.';\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)(getByText(text)).to.exist;",
                  "err": {},
                  "uuid": "792cdd0d-7fb4-406e-a6db-1200cc4763cb",
                  "parentUUID": "dd6ca64c-9b95-44f2-8b17-eac0557c7200",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "792cdd0d-7fb4-406e-a6db-1200cc4763cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f3f621de-8389-4549-8382-675e24e54b43",
              "title": "when claim status SUBMITTED_AWAITING_REVIEW, has a trackedItem with no documents",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render, show pending review and the received date is the item date",
                  "fullTitle": "<DocumentsFiled> when claim status SUBMITTED_AWAITING_REVIEW, has a trackedItem with no documents should render, show pending review and the received date is the item date",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DocumentsFiled.default, {\n    claim: claim\n  })),\n  container = _render2.container,\n  getByText = _render2.getByText,\n  queryByText = _render2.queryByText;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)(getByText('File name unknown')).to.exist;\n(0, _chai.expect)(getByText('Request type: Request 1')).to.exist;\n(0, _chai.expect)(queryByText('Document type: Correspondence')).not.to.exist;\n(0, _chai.expect)(getByText('Pending review')).to.exist;\n(0, _chai.expect)(getByText('Received on January 1, 2024')).to.exist;",
                  "err": {},
                  "uuid": "35c8bda0-7899-4129-b2fa-f93386317753",
                  "parentUUID": "f3f621de-8389-4549-8382-675e24e54b43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35c8bda0-7899-4129-b2fa-f93386317753"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "00f66957-b790-4e38-9e09-8536aa22c850",
              "title": "when claim status SUBMITTED_AWAITING_REVIEW, has a trackedItem with documents and a null upload date",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render, show pending review and the received date is the item date",
                  "fullTitle": "<DocumentsFiled> when claim status SUBMITTED_AWAITING_REVIEW, has a trackedItem with documents and a null upload date should render, show pending review and the received date is the item date",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DocumentsFiled.default, {\n    claim: claim\n  })),\n  container = _render3.container,\n  getByText = _render3.getByText;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)(getByText('file.pdf')).to.exist;\n(0, _chai.expect)(getByText('Request type: Request 1')).to.exist;\n(0, _chai.expect)(getByText('Document type: Correspondence')).to.exist;\n(0, _chai.expect)(getByText('Pending review')).to.exist;\n(0, _chai.expect)(getByText('Received on January 1, 2024')).to.exist;",
                  "err": {},
                  "uuid": "4d6dc8d8-c773-4148-a58c-95da5b08f37d",
                  "parentUUID": "00f66957-b790-4e38-9e09-8536aa22c850",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d6dc8d8-c773-4148-a58c-95da5b08f37d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2e91ea22-40d2-411c-827a-118c0f2bc93b",
              "title": "when claim status SUBMITTED_AWAITING_REVIEW, has a trackedItem with documents and an upload date",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render, show pending review and the received date is the upload date",
                  "fullTitle": "<DocumentsFiled> when claim status SUBMITTED_AWAITING_REVIEW, has a trackedItem with documents and an upload date should render, show pending review and the received date is the upload date",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render4 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DocumentsFiled.default, {\n    claim: claim\n  })),\n  container = _render4.container,\n  getByText = _render4.getByText;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)(getByText('file.pdf')).to.exist;\n(0, _chai.expect)(getByText('Request type: Request 1')).to.exist;\n(0, _chai.expect)(getByText('Document type: Correspondence')).to.exist;\n(0, _chai.expect)(getByText('Pending review')).to.exist;\n(0, _chai.expect)(getByText('Received on January 2, 2024')).to.exist;",
                  "err": {},
                  "uuid": "b373ab45-3901-40bb-9b67-72ecaefbb4fe",
                  "parentUUID": "2e91ea22-40d2-411c-827a-118c0f2bc93b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b373ab45-3901-40bb-9b67-72ecaefbb4fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "163f3997-2c69-4a14-a8d1-fbdae5720bc9",
              "title": "when claim status INITIAL_REVIEW_COMPLETE, has a trackedItem with documents and an upload date",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render, show pending review and the received date is the upload date",
                  "fullTitle": "<DocumentsFiled> when claim status INITIAL_REVIEW_COMPLETE, has a trackedItem with documents and an upload date should render, show pending review and the received date is the upload date",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render5 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DocumentsFiled.default, {\n    claim: claim\n  })),\n  container = _render5.container,\n  getByText = _render5.getByText;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)(getByText('file.pdf')).to.exist;\n(0, _chai.expect)(getByText('Request type: Request 1')).to.exist;\n(0, _chai.expect)(getByText('Document type: Correspondence')).to.exist;\n(0, _chai.expect)(getByText('Reviewed by VA on January 3, 2024')).to.exist;\n(0, _chai.expect)(getByText('Received on January 2, 2024')).to.exist;",
                  "err": {},
                  "uuid": "19ffaf9b-64bc-4263-8d58-39c8f1f9f259",
                  "parentUUID": "163f3997-2c69-4a14-a8d1-fbdae5720bc9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19ffaf9b-64bc-4263-8d58-39c8f1f9f259"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0e12a706-3d8a-483f-b516-329b2d4028e1",
              "title": "when claim status ACCEPTED, has a trackedItem with documents and an upload date",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render, show pending review and the received date is the upload date",
                  "fullTitle": "<DocumentsFiled> when claim status ACCEPTED, has a trackedItem with documents and an upload date should render, show pending review and the received date is the upload date",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render6 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DocumentsFiled.default, {\n    claim: claim\n  })),\n  container = _render6.container,\n  getByText = _render6.getByText;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)(getByText('file.pdf')).to.exist;\n(0, _chai.expect)(getByText('Request type: Request 1')).to.exist;\n(0, _chai.expect)(getByText('Document type: Correspondence')).to.exist;\n(0, _chai.expect)(getByText('Reviewed by VA on January 3, 2024')).to.exist;\n(0, _chai.expect)(getByText('Received on January 2, 2024')).to.exist;",
                  "err": {},
                  "uuid": "bb25ef57-1285-46b9-889f-073b38124284",
                  "parentUUID": "0e12a706-3d8a-483f-b516-329b2d4028e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb25ef57-1285-46b9-889f-073b38124284"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "75a4f96e-d9c4-4277-8a5b-0d22a1b8a787",
              "title": "when claim status NO_LONGER_REQUIRED, has a closedDate, has a trackedItem with documents and an upload date",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render, show pending review and the received date is the upload date",
                  "fullTitle": "<DocumentsFiled> when claim status NO_LONGER_REQUIRED, has a closedDate, has a trackedItem with documents and an upload date should render, show pending review and the received date is the upload date",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render7 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DocumentsFiled.default, {\n    claim: claim\n  })),\n  container = _render7.container,\n  getByText = _render7.getByText;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)(getByText('file.pdf')).to.exist;\n(0, _chai.expect)(getByText('Request type: Request 1')).to.exist;\n(0, _chai.expect)(getByText('Document type: Correspondence')).to.exist;\n(0, _chai.expect)(getByText('No longer needed')).to.exist;\n(0, _chai.expect)(getByText('Received on January 2, 2024')).to.exist;",
                  "err": {},
                  "uuid": "d31ae9ec-1e3a-4e9b-b81a-3164a41245d2",
                  "parentUUID": "75a4f96e-d9c4-4277-8a5b-0d22a1b8a787",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d31ae9ec-1e3a-4e9b-b81a-3164a41245d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "22265190-8896-4c70-856c-23b910cb915a",
              "title": "when claim status SUBMITTED_AWAITING_REVIEW, has a trackedItem with documents and no date",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render, show pending review and the received date is the upload date",
                  "fullTitle": "<DocumentsFiled> when claim status SUBMITTED_AWAITING_REVIEW, has a trackedItem with documents and no date should render, show pending review and the received date is the upload date",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render8 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DocumentsFiled.default, {\n    claim: claim\n  })),\n  container = _render8.container,\n  getByText = _render8.getByText,\n  queryByText = _render8.queryByText;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)(getByText('file.pdf')).to.exist;\n(0, _chai.expect)(getByText('Request type: Request 1')).to.exist;\n(0, _chai.expect)(getByText('Document type: Correspondence')).to.exist;\n(0, _chai.expect)(getByText('Pending review')).to.exist;\n(0, _chai.expect)(queryByText('Received on January 2, 2024')).not.to.exist;",
                  "err": {},
                  "uuid": "21a8ac42-ab5d-450e-ad59-70eeb7615bc3",
                  "parentUUID": "22265190-8896-4c70-856c-23b910cb915a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21a8ac42-ab5d-450e-ad59-70eeb7615bc3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "064b4d4b-6210-4ab6-8e53-106c4ee096e3",
              "title": "when claim status SUBMITTED_AWAITING_REVIEW, has a trackedItem with multiple documents and a null upload date",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a DocumentsFiled section with multiple items in a request",
                  "fullTitle": "<DocumentsFiled> when claim status SUBMITTED_AWAITING_REVIEW, has a trackedItem with multiple documents and a null upload date should render a DocumentsFiled section with multiple items in a request",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render9 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DocumentsFiled.default, {\n    claim: claim\n  })),\n  container = _render9.container,\n  getByText = _render9.getByText,\n  getAllByText = _render9.getAllByText;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)(getByText('file1.pdf')).to.exist;\n(0, _chai.expect)(getByText('file2.pdf')).to.exist;\n(0, _chai.expect)(getAllByText('Request type: Request 1').length).to.equal(2);\n(0, _chai.expect)(getAllByText('Document type: Correspondence').length).to.equal(2);\n(0, _chai.expect)(getAllByText('Received on January 1, 2024').length).to.equal(2);\n(0, _chai.expect)(getByText('Pending review')).to.exist;",
                  "err": {},
                  "uuid": "5add430a-d517-4017-8e0e-a65bc48229e8",
                  "parentUUID": "064b4d4b-6210-4ab6-8e53-106c4ee096e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5add430a-d517-4017-8e0e-a65bc48229e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d1198524-2ff2-43c8-9a1f-98cb404eb620",
              "title": "when claim has a multiple trackedItems",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/DocumentsFiled.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a DocumentsFiled section with multiple items in a request",
                  "fullTitle": "<DocumentsFiled> when claim has a multiple trackedItems should render a DocumentsFiled section with multiple items in a request",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render10 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DocumentsFiled.default, {\n    claim: claim\n  })),\n  container = _render10.container,\n  getByText = _render10.getByText,\n  getAllByText = _render10.getAllByText,\n  getByRole = _render10.getByRole;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n// Check order of docsFiled\nvar list = getByRole('list');\nvar _within = (0, _react2.within)(list),\n  getAllByRole = _within.getAllByRole;\nvar items = getAllByRole('listitem');\nvar docsFiled = items.map(function (item) {\n  return item.textContent;\n});\n(0, _chai.expect)(docsFiled[0]).to.contain('file4.pdfRequest');\n(0, _chai.expect)(docsFiled[1]).to.contain('file1.pdfRequest');\n(0, _chai.expect)(docsFiled[1]).to.contain('file2.pdfRequest');\n(0, _chai.expect)(docsFiled[2]).to.contain('file3.pdfRequest');\n// Item 1\n(0, _chai.expect)(getByText('file4.pdf')).to.exist;\n(0, _chai.expect)(getAllByText('Request type: Request 3')).to.exist;\n(0, _chai.expect)(getAllByText('Document type: Submit buddy statement(s)')).to.exist;\n(0, _chai.expect)(getAllByText('Received on January 15, 2024')).to.exist;\n(0, _chai.expect)(getByText('No longer needed')).to.exist;\n// Item 2\n(0, _chai.expect)(getByText('file1.pdf')).to.exist;\n(0, _chai.expect)(getByText('file2.pdf')).to.exist;\n(0, _chai.expect)(getAllByText('Request type: Request 1').length).to.equal(2);\n(0, _chai.expect)(getAllByText('Document type: Correspondence').length).to.equal(2);\n(0, _chai.expect)(getAllByText('Received on January 14, 2024').length).to.equal(1);\n(0, _chai.expect)(getByText('Pending review')).to.exist;\n// Item 3\n(0, _chai.expect)(getByText('file3.pdf')).to.exist;\n(0, _chai.expect)(getAllByText('Request type: Request 2')).to.exist;\n(0, _chai.expect)(getAllByText('Document type: Military Personnel Record')).to.exist;\n(0, _chai.expect)(getAllByText('Received on January 8, 2024')).to.exist;\n(0, _chai.expect)(getByText('Reviewed by VA on January 9, 2024')).to.exist;",
                  "err": {},
                  "uuid": "2d1499bc-32fd-4323-abec-df085ba2dcbb",
                  "parentUUID": "d1198524-2ff2-43c8-9a1f-98cb404eb620",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mask filenames from Datadog (no PII)",
                  "fullTitle": "<DocumentsFiled> when claim has a multiple trackedItems should mask filenames from Datadog (no PII)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render11 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DocumentsFiled.default, {\n    claim: claim\n  })),\n  container = _render11.container;\n(0, _chai.expect)((0, _index.$)('.filename-title', container).getAttribute('data-dd-privacy')).to.equal('mask');",
                  "err": {},
                  "uuid": "0a1b62a2-878e-4254-a8d1-64a36f86d22e",
                  "parentUUID": "d1198524-2ff2-43c8-9a1f-98cb404eb620",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d1499bc-32fd-4323-abec-df085ba2dcbb",
                "0a1b62a2-878e-4254-a8d1-64a36f86d22e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 32,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "6796f1c1-2478-4b36-a4a5-f8fc18c439ad",
          "title": "<FilesNeeded>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2c1cae6c-05ec-4ff2-b873-be4100561225",
              "title": "when user navigates to page directly",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render va-alert with item data and show DueDate",
                  "fullTitle": "<FilesNeeded> when user navigates to page directly should render va-alert with item data and show DueDate",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_FilesNeeded.default, {\n    item: item\n  }))),\n  getByText = _renderWithRouter.getByText;\ngetByText('December 1, 2024', {\n  exact: false\n});\ngetByText(item.displayName);\ngetByText(item.description);\ngetByText('Details');\n(0, _chai.expect)(sessionStorage.getItem('previousPage')).to.not.exist;",
                  "err": {},
                  "uuid": "625de6db-7f53-4a2d-8b43-8e374c313460",
                  "parentUUID": "2c1cae6c-05ec-4ff2-b873-be4100561225",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "47722b38-b601-47ff-994e-45f3f5c2b462",
                  "title": "when item type is Automated 5103 Notice Response",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "197d094b-cfaf-4f0a-bf05-0d319e9c906f",
                      "title": "when evidenceWaiverSubmitted5103 is false",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render va-alert with item data and hide DueDate",
                          "fullTitle": "<FilesNeeded> when user navigates to page directly when item type is Automated 5103 Notice Response when evidenceWaiverSubmitted5103 is false should render va-alert with item data and hide DueDate",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_FilesNeeded.default, {\n    item: item5103\n  }))),\n  queryByText = _renderWithRouter2.queryByText,\n  getByText = _renderWithRouter2.getByText;\n(0, _chai.expect)(queryByText('December 1, 2024')).to.not.exist;\n(0, _chai.expect)(queryByText('We sent you a “List of evidence we may need (5103 notice)” letter. This letter lets you know if submitting additional evidence will help decide your claim.')).to.exist;\n(0, _chai.expect)(queryByText('Review evidence list (5103 notice)')).to.exist;\ngetByText('Details');",
                          "err": {},
                          "uuid": "1dbae0ab-c010-4fd9-8b0e-356087811e59",
                          "parentUUID": "197d094b-cfaf-4f0a-bf05-0d319e9c906f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "1dbae0ab-c010-4fd9-8b0e-356087811e59"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 3,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [
                "625de6db-7f53-4a2d-8b43-8e374c313460"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "43d603d5-be24-40c3-8a0a-c74849878c06",
              "title": "when user navigates to page from the files tab",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "clicking details link should set session storage",
                  "fullTitle": "<FilesNeeded> when user navigates to page from the files tab clicking details link should set session storage",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_FilesNeeded.default, {\n    item: item,\n    previousPage: filesTab\n  }))),\n  getByRole = _renderWithRouter3.getByRole;\n_dom.fireEvent.click(getByRole('link'));\n(0, _chai.expect)(sessionStorage.getItem('previousPage')).to.equal(filesTab);",
                  "err": {},
                  "uuid": "f830018e-d524-4f69-9537-2398d38c39cc",
                  "parentUUID": "43d603d5-be24-40c3-8a0a-c74849878c06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f830018e-d524-4f69-9537-2398d38c39cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "da8b80b0-2790-4882-8b80-e0e20b73bbc5",
              "title": "when user navigates to page from the status tab",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "clicking details link should set session storage",
                  "fullTitle": "<FilesNeeded> when user navigates to page from the status tab clicking details link should set session storage",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_FilesNeeded.default, {\n    item: item,\n    previousPage: statusTab\n  }))),\n  getByRole = _renderWithRouter4.getByRole;\n_dom.fireEvent.click(getByRole('link'));\n(0, _chai.expect)(sessionStorage.getItem('previousPage')).to.equal(statusTab);",
                  "err": {},
                  "uuid": "b64b2c77-ae02-4c02-90e5-5a08355035e1",
                  "parentUUID": "da8b80b0-2790-4882-8b80-e0e20b73bbc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b64b2c77-ae02-4c02-90e5-5a08355035e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8115de4f-0a79-4518-b67e-74d5c5672f3f",
              "title": "when cstFriendlyEvidenceRequests is true",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/FilesNeeded.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should dispaly friendly description of 21-4142",
                  "fullTitle": "<FilesNeeded> when cstFriendlyEvidenceRequests is true should dispaly friendly description of 21-4142",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var item214142 = {\n  closedDate: null,\n  description: '21-4142 text',\n  displayName: '21-4142/21-4142a',\n  friendlyName: 'Authorization to Disclose Information',\n  friendlyDescription: 'good description',\n  canUploadFile: true,\n  supportAliases: ['VA Form 21-4142'],\n  id: 14268,\n  overdue: true,\n  receivedDate: null,\n  requestedDate: '2024-03-07',\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: '2024-12-01',\n  uploadsAllowed: true,\n  documents: '[]',\n  date: '2024-03-07'\n};\nvar _renderWithRouter5 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true, true)\n  }, /*#__PURE__*/_react.default.createElement(_FilesNeeded.default, {\n    item: item214142\n  }))),\n  getByText = _renderWithRouter5.getByText;\ngetByText('good description');",
                  "err": {},
                  "uuid": "02e00074-f835-4c3f-9c89-6ef9471be3d3",
                  "parentUUID": "8115de4f-0a79-4518-b67e-74d5c5672f3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02e00074-f835-4c3f-9c89-6ef9471be3d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "42236f95-3cbd-48e9-bc43-b91bded34c1c",
          "title": "<FilesOptional>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/FilesOptional.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-files-tab/FilesOptional.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render alert with item data",
              "fullTitle": "<FilesOptional> should render alert with item data",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_FilesOptional.default, {\n    item: item\n  })),\n  getByText = _renderWithRouter.getByText;\ngetByText(item.displayName);\ngetByText(item.description);\ngetByText('You don’t have to do anything, but if you have this information you can');\ngetByText('add it here.');",
              "err": {},
              "uuid": "6a7d929e-f9ca-4350-95af-33f41442119b",
              "parentUUID": "42236f95-3cbd-48e9-bc43-b91bded34c1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a7d929e-f9ca-4350-95af-33f41442119b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "1e06afee-3a74-45da-bd56-93af7f037d2a",
          "title": "<RemoveFileModal>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/RemoveFileModal.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-files-tab/RemoveFileModal.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render component",
              "fullTitle": "<RemoveFileModal> should render component",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_RemoveFileModal.default, props)),\n  container = _render.container,\n  getByText = _render.getByText;\n(0, _chai.expect)((0, _index.$)('#remove-file', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-modal', container).getAttribute('primary-button-text')).to.equal('Yes, remove this');\n(0, _chai.expect)((0, _index.$)('va-modal', container).getAttribute('secondary-button-text')).to.equal('No, keep this');\n(0, _chai.expect)(getByText(props.removeFileName)).to.exist;",
              "err": {},
              "uuid": "14cd61ab-c949-4bc9-88f4-e132cb476d25",
              "parentUUID": "1e06afee-3a74-45da-bd56-93af7f037d2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calls removeFile when primary button is clicked",
              "fullTitle": "<RemoveFileModal> calls removeFile when primary button is clicked",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var removeFile = _sinon.default.spy();\nvar _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_RemoveFileModal.default, _extends({}, props, {\n    removeFile: removeFile\n  }))),\n  container = _render2.container;\n(0, _index.$)('va-modal', container).__events.primaryButtonClick();\n(0, _chai.expect)(removeFile.calledOnce).to.be.true;",
              "err": {},
              "uuid": "dd7b0d79-a03e-4845-a438-46a568f16847",
              "parentUUID": "1e06afee-3a74-45da-bd56-93af7f037d2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calls closeModal when secondary button is clicked",
              "fullTitle": "<RemoveFileModal> calls closeModal when secondary button is clicked",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var closeModal = _sinon.default.spy();\nvar _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_RemoveFileModal.default, _extends({}, props, {\n    closeModal: closeModal\n  }))),\n  container = _render3.container;\n(0, _index.$)('va-modal', container).__events.secondaryButtonClick();\n(0, _chai.expect)(closeModal.calledOnce).to.be.true;",
              "err": {},
              "uuid": "0c1e3662-e337-477d-b586-57b180efd77f",
              "parentUUID": "1e06afee-3a74-45da-bd56-93af7f037d2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calls closeModal when close button is clicked",
              "fullTitle": "<RemoveFileModal> calls closeModal when close button is clicked",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var closeModal = _sinon.default.spy();\nvar _render4 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_RemoveFileModal.default, _extends({}, props, {\n    closeModal: closeModal\n  }))),\n  container = _render4.container;\n(0, _index.$)('va-modal', container).__events.closeEvent();\n(0, _chai.expect)(closeModal.calledOnce).to.be.true;",
              "err": {},
              "uuid": "f4492569-62dc-434b-94ee-9f61adc6b6e1",
              "parentUUID": "1e06afee-3a74-45da-bd56-93af7f037d2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should mask filename from Datadog (no PII)",
              "fullTitle": "<RemoveFileModal> should mask filename from Datadog (no PII)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render5 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_RemoveFileModal.default, props)),\n  container = _render5.container;\n(0, _chai.expect)((0, _index.$)('strong', container).getAttribute('data-dd-privacy')).to.equal('mask');",
              "err": {},
              "uuid": "ea72ec67-a672-4c26-8719-603700ce8649",
              "parentUUID": "1e06afee-3a74-45da-bd56-93af7f037d2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14cd61ab-c949-4bc9-88f4-e132cb476d25",
            "dd7b0d79-a03e-4845-a438-46a568f16847",
            "0c1e3662-e337-477d-b586-57b180efd77f",
            "f4492569-62dc-434b-94ee-9f61adc6b6e1",
            "ea72ec67-a672-4c26-8719-603700ce8649"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "64010fec-bd64-435e-9896-81c4ecc7087c",
          "title": "<Standard5103Alert>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/Standard5103Alert.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-files-tab/Standard5103Alert.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "59f3cbe5-feac-4ec6-9cd5-a74d5f752bdb",
              "title": "when user navigates to page directly",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/Standard5103Alert.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/Standard5103Alert.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render va-alert with item data",
                  "fullTitle": "<Standard5103Alert> when user navigates to page directly should render va-alert with item data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_Standard5103Alert.default, null)),\n  getByText = _renderWithRouter.getByText;\ngetByText('Review evidence list (5103 notice)');\ngetByText('We sent you a “List of evidence we may need (5103 notice)” letter. This letter lets you know if submitting additional evidence will help decide your claim.');\ngetByText('Details');\n(0, _chai.expect)(sessionStorage.getItem('previousPage')).to.not.exist;",
                  "err": {},
                  "uuid": "233c69fd-d3b0-441d-975f-28ff60bc5f6b",
                  "parentUUID": "59f3cbe5-feac-4ec6-9cd5-a74d5f752bdb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "233c69fd-d3b0-441d-975f-28ff60bc5f6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2b396b2e-0435-4823-ba57-f1033e314022",
              "title": "when user navigates to page from the files tab",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/Standard5103Alert.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/Standard5103Alert.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "clicking details link should set session storage",
                  "fullTitle": "<Standard5103Alert> when user navigates to page from the files tab clicking details link should set session storage",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_Standard5103Alert.default, {\n    previousPage: filesTab\n  })),\n  getByRole = _renderWithRouter2.getByRole;\n_dom.fireEvent.click(getByRole('link'));\n(0, _chai.expect)(sessionStorage.getItem('previousPage')).to.equal(filesTab);",
                  "err": {},
                  "uuid": "33d96ecd-5783-4316-ac9c-634122847597",
                  "parentUUID": "2b396b2e-0435-4823-ba57-f1033e314022",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33d96ecd-5783-4316-ac9c-634122847597"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f334f798-ea11-4232-9127-2adfdb51abe8",
              "title": "when user navigates to page from the status tab",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-files-tab/Standard5103Alert.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-files-tab/Standard5103Alert.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "clicking details link should set session storage",
                  "fullTitle": "<Standard5103Alert> when user navigates to page from the status tab clicking details link should set session storage",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_Standard5103Alert.default, {\n    previousPage: statusTab\n  })),\n  getByRole = _renderWithRouter3.getByRole;\n_dom.fireEvent.click(getByRole('link'));\n(0, _chai.expect)(sessionStorage.getItem('previousPage')).to.equal(statusTab);",
                  "err": {},
                  "uuid": "da709af6-a0b0-44a7-88b5-43d4265b1bcd",
                  "parentUUID": "f334f798-ea11-4232-9127-2adfdb51abe8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da709af6-a0b0-44a7-88b5-43d4265b1bcd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "49d70ad9-a25e-4b12-88dd-e73042603dc2",
          "title": "<ClaimLetterList>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-letters/ClaimLetterList.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-letters/ClaimLetterList.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<ClaimLetterList> should render",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimLetterList.default, {\n    letters: fakeLetters\n  })),\n  container = _render.container;\n(0, _chai.expect)(container).to.exist;",
              "err": {},
              "uuid": "46e01300-b01b-4e02-9150-75275d579ea1",
              "parentUUID": "49d70ad9-a25e-4b12-88dd-e73042603dc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should contain 2 elements",
              "fullTitle": "<ClaimLetterList> should contain 2 elements",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var screen = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimLetterList.default, {\n  letters: fakeLetters\n}));\nvar list = screen.getByRole('list');\nvar listItems = (0, _react2.within)(list).getAllByRole('listitem');\n(0, _chai.expect)(listItems).to.exist;\n(0, _chai.expect)(listItems.length).to.equal(2);",
              "err": {},
              "uuid": "28b8ac80-bde3-4f17-be9f-786043abf5a9",
              "parentUUID": "49d70ad9-a25e-4b12-88dd-e73042603dc2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46e01300-b01b-4e02-9150-75275d579ea1",
            "28b8ac80-bde3-4f17-be9f-786043abf5a9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "42b5f5b2-3836-4b1d-baf2-e9e2615725cb",
          "title": "<ClaimLetterListItem>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-letters/ClaimLetterListItem.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-letters/ClaimLetterListItem.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<ClaimLetterListItem> should render",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimLetterListItem.default, {\n    letter: mockLetter\n  })),\n  container = _render.container;\n(0, _chai.expect)(container).to.exist;",
              "err": {},
              "uuid": "0b24e46a-111c-4f34-a6ca-68b6a7d84870",
              "parentUUID": "42b5f5b2-3836-4b1d-baf2-e9e2615725cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have the correct title and description",
              "fullTitle": "<ClaimLetterListItem> should have the correct title and description",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimLetterListItem.default, {\n    letter: mockLetter\n  })),\n  getByRole = _render2.getByRole;\nvar title = getByRole('heading', {\n  level: 2\n});\n// Both the title and description are contained in the <h2>\n(0, _chai.expect)(title.textContent).to.eq('Notification letter September 22, 2022');",
              "err": {},
              "uuid": "2d76a837-a272-4e26-bcb2-b3e73b455759",
              "parentUUID": "42b5f5b2-3836-4b1d-baf2-e9e2615725cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use the default description when no `typeDescription` is provided",
              "fullTitle": "<ClaimLetterListItem> should use the default description when no `typeDescription` is provided",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimLetterListItem.default, {\n    letter: mockLetterWithouttypeDescription\n  })),\n  getByText = _render3.getByText;\ngetByText('Notification letter');",
              "err": {},
              "uuid": "98fb4bd8-6570-454e-ba24-d8da43000e0a",
              "parentUUID": "42b5f5b2-3836-4b1d-baf2-e9e2615725cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": " when click Download Letter link, should call record event",
              "fullTitle": "<ClaimLetterListItem>  when click Download Letter link, should call record event",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var recordEventStub = _sinon.default.stub(recordEventModule, 'default');\nvar _render4 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimLetterListItem.default, {\n    letter: mockLetter\n  })),\n  container = _render4.container;\nvar downloadLetterLink = (0, _index.$)('va-link', container);\n_dom.fireEvent.click(downloadLetterLink);\n(0, _chai.expect)(recordEventStub.calledWith({\n  event: 'claim-letters-download',\n  'gtm.element.textContent': 'Download Claim Letter (PDF)',\n  'gtm.elementUrl': \"\".concat(_index2.default.API_URL, \"/v0/claim_letters/[\").concat(mockLetter.docType, \"]:id.pdf\"),\n  'letter-type': 'Claim decision or other notification'\n})).to.be.true;\nrecordEventStub.restore();",
              "err": {},
              "uuid": "6ca35f55-baf3-4f08-8381-19e7e78e1383",
              "parentUUID": "42b5f5b2-3836-4b1d-baf2-e9e2615725cb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0b24e46a-111c-4f34-a6ca-68b6a7d84870",
            "2d76a837-a272-4e26-bcb2-b3e73b455759",
            "98fb4bd8-6570-454e-ba24-d8da43000e0a",
            "6ca35f55-baf3-4f08-8381-19e7e78e1383"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b1f80170-9f31-4c02-9262-9acaecff3631",
          "title": "<ClaimLetterSection>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-letters/ClaimLetterSection.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-letters/ClaimLetterSection.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c970977c-888d-4f4d-ad6f-b81fa980f583",
              "title": "cstIncludeDdlBoaLetters feature toggle false",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-letters/ClaimLetterSection.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-letters/ClaimLetterSection.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a ClaimLetterSection section",
                  "fullTitle": "<ClaimLetterSection> cstIncludeDdlBoaLetters feature toggle false should render a ClaimLetterSection section",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var screen = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_ClaimLetterSection.default, null)));\nscreen.getByText('Your claim letters');\nscreen.getByText('Download your VA claim letters');\nscreen.getByText('You can download your decision letters online. You can also get other letters related to your claims.');",
                  "err": {},
                  "uuid": "e9d4b03f-0ad5-4f16-90a7-d881bf0e9498",
                  "parentUUID": "c970977c-888d-4f4d-ad6f-b81fa980f583",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e9d4b03f-0ad5-4f16-90a7-d881bf0e9498"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8144f092-29fc-49b4-9f7f-6e984b194733",
              "title": "cstIncludeDdlBoaLetters feature toggle true",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-letters/ClaimLetterSection.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-letters/ClaimLetterSection.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a ClaimLetterSection section",
                  "fullTitle": "<ClaimLetterSection> cstIncludeDdlBoaLetters feature toggle true should render a ClaimLetterSection section",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var screen = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore(true)\n}, /*#__PURE__*/_react.default.createElement(_ClaimLetterSection.default, null)));\nscreen.getByText('Your claim letters');\nscreen.getByText('Download your VA claim letters');\nscreen.getByText('You can download your decision letters online. You can also get other letters related to your claims and appeals.');",
                  "err": {},
                  "uuid": "8d5fb06b-34a3-4f7c-bb32-c434d1187410",
                  "parentUUID": "8144f092-29fc-49b4-9f7f-6e984b194733",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d5fb06b-34a3-4f7c-bb32-c434d1187410"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8153896f-1d55-45b8-b505-25efb3c77623",
          "title": "<YourClaimLetters>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-letters/YourClaimLetters.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-letters/YourClaimLetters.unit.spec.jsx",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"<YourClaimLetters>\"",
              "fullTitle": "<YourClaimLetters> \"before all\" hook in \"<YourClaimLetters>\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "store = (0, _redux.createStore)(_index.default.disability);",
              "err": {},
              "uuid": "91ea0c9c-ef6a-4cf2-99b5-52add27b499e",
              "parentUUID": "8153896f-1d55-45b8-b505-25efb3c77623",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"<YourClaimLetters>\"",
              "fullTitle": "<YourClaimLetters> \"before each\" hook in \"<YourClaimLetters>\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "showLettersFeatureStub = _sinon.default.stub(selectors, 'showClaimLettersFeature').returns(true);\nisLoadingFeaturesStub = _sinon.default.stub(selectors, 'isLoadingFeatures').returns(false);\ngetClaimLettersStub = _sinon.default.stub(actions, 'getClaimLetters');",
              "err": {},
              "uuid": "3d7b278a-6b65-490d-aa8b-20309c1cddb0",
              "parentUUID": "8153896f-1d55-45b8-b505-25efb3c77623",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"<YourClaimLetters>\"",
              "fullTitle": "<YourClaimLetters> \"after each\" hook in \"<YourClaimLetters>\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "showLettersFeatureStub.restore();\nisLoadingFeaturesStub.restore();\ngetClaimLettersStub.restore();",
              "err": {},
              "uuid": "979a855d-056d-46bb-b23f-73df01b2646a",
              "parentUUID": "8153896f-1d55-45b8-b505-25efb3c77623",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "541c31ec-08f4-4a99-a2a7-fee2d3c97109",
              "title": "cannot show claims",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-letters/YourClaimLetters.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-letters/YourClaimLetters.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a helpful message if there are no letters",
                  "fullTitle": "<YourClaimLetters> cannot show claims should render a helpful message if there are no letters",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "b0f629ce-394e-4a3e-91ae-ad46ae4ff790",
                  "parentUUID": "541c31ec-08f4-4a99-a2a7-fee2d3c97109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render a rollout message if the showLetters feature flag is false",
                  "fullTitle": "<YourClaimLetters> cannot show claims should render a rollout message if the showLetters feature flag is false",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "73a94dc3-d53d-4899-9c21-a1db75e2fa55",
                  "parentUUID": "541c31ec-08f4-4a99-a2a7-fee2d3c97109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render a message alerting the user to a problem if unable to retrieve letters",
                  "fullTitle": "<YourClaimLetters> cannot show claims should render a message alerting the user to a problem if unable to retrieve letters",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "534749be-1099-4475-b6b6-df1d62e00889",
                  "parentUUID": "541c31ec-08f4-4a99-a2a7-fee2d3c97109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render a message alerting the user that they are unauthenticated",
                  "fullTitle": "<YourClaimLetters> cannot show claims should render a message alerting the user that they are unauthenticated",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "f5ad6dba-f26f-4b1d-b38c-9e70bae10faa",
                  "parentUUID": "541c31ec-08f4-4a99-a2a7-fee2d3c97109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render a message alerting the user that they are unauthorized",
                  "fullTitle": "<YourClaimLetters> cannot show claims should render a message alerting the user that they are unauthorized",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "b3748583-dd25-4d43-b358-968a068b8b1e",
                  "parentUUID": "541c31ec-08f4-4a99-a2a7-fee2d3c97109",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0f629ce-394e-4a3e-91ae-ad46ae4ff790",
                "73a94dc3-d53d-4899-9c21-a1db75e2fa55",
                "534749be-1099-4475-b6b6-df1d62e00889",
                "f5ad6dba-f26f-4b1d-b38c-9e70bae10faa",
                "b3748583-dd25-4d43-b358-968a068b8b1e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 37,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4f27a677-62d9-40d0-a93d-8da26b998a19",
              "title": "a list of letters",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-letters/YourClaimLetters.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-letters/YourClaimLetters.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a list of letters with no pagination",
                  "fullTitle": "<YourClaimLetters> a list of letters should render a list of letters with no pagination",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "fe2f77db-f1f2-410c-9263-3e1ed6c3f11e",
                  "parentUUID": "4f27a677-62d9-40d0-a93d-8da26b998a19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe2f77db-f1f2-410c-9263-3e1ed6c3f11e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e262a0c5-0980-4d42-a5b6-f241afaa1187",
          "title": "<ClaimOverviewHeader>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9c667dbf-2396-4e31-8078-5001d3ab5ef4",
              "title": "cstClaimPhases feature flag enabled and compenstaiton claim type code",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a ClaimOverviewHeader section",
                  "fullTitle": "<ClaimOverviewHeader> cstClaimPhases feature flag enabled and compenstaiton claim type code should render a ClaimOverviewHeader section",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimOverviewHeader.default, {\n    claimTypeCode: compensationClaimTypeCode\n  }))),\n  container = _render.container,\n  getByText = _render.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-overview-header-container', container)).to.exist;\ngetByText('There are 8 steps in the claim process. It’s common for claims to repeat steps 3 to 6 if we need more information.');",
                  "err": {},
                  "uuid": "c3a93a4f-ff23-4ab6-bc5d-cc03a74ff5b5",
                  "parentUUID": "9c667dbf-2396-4e31-8078-5001d3ab5ef4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c3a93a4f-ff23-4ab6-bc5d-cc03a74ff5b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8de485c9-7219-4d9a-91d3-9d7fa3b27118",
              "title": "cstClaimPhases feature flag enabled and dependency claim type code",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a ClaimOverviewHeader section",
                  "fullTitle": "<ClaimOverviewHeader> cstClaimPhases feature flag enabled and dependency claim type code should render a ClaimOverviewHeader section",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimOverviewHeader.default, {\n    claimTypeCode: dependencyClaimTypeCode\n  }))),\n  container = _render2.container,\n  getByText = _render2.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-overview-header-container', container)).to.exist;\ngetByText('Learn about the VA claim process and what happens after you file your claim.');",
                  "err": {},
                  "uuid": "6de01fec-8efd-4017-b403-2db29df8d42b",
                  "parentUUID": "8de485c9-7219-4d9a-91d3-9d7fa3b27118",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6de01fec-8efd-4017-b403-2db29df8d42b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "19f58e4c-9860-42f1-867e-7c3cd14f9b73",
              "title": "cstClaimPhases feature flag disabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "4f53bf9f-24c0-414f-ab0e-0309a36670de",
                  "title": "cstClaimPhases feature flag enabled and compenstaiton claim type code",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render a ClaimOverviewHeader section",
                      "fullTitle": "<ClaimOverviewHeader> cstClaimPhases feature flag disabled cstClaimPhases feature flag enabled and compenstaiton claim type code should render a ClaimOverviewHeader section",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimOverviewHeader.default, {\n    claimTypeCode: compensationClaimTypeCode\n  }))),\n  container = _render3.container,\n  getByText = _render3.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-overview-header-container', container)).to.exist;\ngetByText('Learn about the VA claim process and what happens after you file your claim.');",
                      "err": {},
                      "uuid": "32420f49-64be-471f-852b-65030c543ab2",
                      "parentUUID": "4f53bf9f-24c0-414f-ab0e-0309a36670de",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "32420f49-64be-471f-852b-65030c543ab2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "50f87547-a9c1-490b-9497-622b183e7513",
                  "title": "cstClaimPhases feature flag enabled and dependency claim type code",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-overview-tab/ClaimOverviewHeader.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render a ClaimOverviewHeader section",
                      "fullTitle": "<ClaimOverviewHeader> cstClaimPhases feature flag disabled cstClaimPhases feature flag enabled and dependency claim type code should render a ClaimOverviewHeader section",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _render4 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimOverviewHeader.default, {\n    claimTypeCode: dependencyClaimTypeCode\n  }))),\n  container = _render4.container,\n  getByText = _render4.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-overview-header-container', container)).to.exist;\ngetByText('Learn about the VA claim process and what happens after you file your claim.');",
                      "err": {},
                      "uuid": "492fb063-c659-4c68-be35-9497981c733c",
                      "parentUUID": "50f87547-a9c1-490b-9497-622b183e7513",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "492fb063-c659-4c68-be35-9497981c733c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "223af406-3770-4089-8a1c-e890fbc07dd0",
          "title": "<ClaimPhaseStepper>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-overview-tab/ClaimPhaseStepper.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-overview-tab/ClaimPhaseStepper.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render a ClaimPhaseStepper section where there is accessibility text",
              "fullTitle": "<ClaimPhaseStepper> should render a ClaimPhaseStepper section where there is accessibility text",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPhaseStepper.default, {\n    claimDate: claimDate,\n    currentClaimPhaseDate: currentClaimPhaseDate,\n    currentPhase: 3\n  })),\n  container = _renderWithRouter.container;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\nvar phaseCurrent = (0, _index.$)('#phase3 va-icon.phase-current', container);\n(0, _chai.expect)(phaseCurrent).to.have.attr('srtext', 'Current');\nvar phase2Complete = (0, _index.$)('#phase2 va-icon.phase-complete', container);\n(0, _chai.expect)(phase2Complete).to.have.attr('srtext', 'Completed');",
              "err": {},
              "uuid": "89fb4d33-88e9-48da-a924-6bd6c4fb53aa",
              "parentUUID": "223af406-3770-4089-8a1c-e890fbc07dd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a ClaimPhaseStepper section where step 1 is the current step",
              "fullTitle": "<ClaimPhaseStepper> should render a ClaimPhaseStepper section where step 1 is the current step",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPhaseStepper.default, {\n    claimDate: claimDate,\n    currentClaimPhaseDate: currentClaimPhaseDate,\n    currentPhase: 1\n  })),\n  container = _renderWithRouter2.container,\n  getByText = _renderWithRouter2.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\nvar currentPhase = (0, _index.$)('#phase1 .current-phase', container);\n(0, _chai.expect)((0, _react2.within)(currentPhase).getByText('Your claim is in this step as of March 7, 2024.')).to.exist;\nvar phaseComplete = (0, _index.$)('#phase1 va-icon.phase-current', container);\n(0, _chai.expect)(phaseComplete).to.exist;\ngetByText('We started working on your claim on January 16, 2024');",
              "err": {},
              "uuid": "600bde1d-3202-4c94-9889-beb66ffb49c6",
              "parentUUID": "223af406-3770-4089-8a1c-e890fbc07dd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a ClaimPhaseStepper section where step 2 is the current step",
              "fullTitle": "<ClaimPhaseStepper> should render a ClaimPhaseStepper section where step 2 is the current step",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPhaseStepper.default, {\n    claimDate: claimDate,\n    currentClaimPhaseDate: currentClaimPhaseDate,\n    currentPhase: 2\n  })),\n  container = _renderWithRouter3.container,\n  getByText = _renderWithRouter3.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\nvar currentPhase = (0, _index.$)('#phase2 .current-phase', container);\n(0, _chai.expect)((0, _react2.within)(currentPhase).getByText('Your claim is in this step as of March 7, 2024.')).to.exist;\nvar phaseComplete = (0, _index.$)('#phase2 va-icon.phase-current', container);\n(0, _chai.expect)(phaseComplete).to.exist;\ngetByText('We’ll check your claim for basic information we need, like your name and Social Security number.');\ngetByText('If information is missing, we’ll contact you.');",
              "err": {},
              "uuid": "3c0e3098-2c83-4bb3-9f08-74e1666fe1d5",
              "parentUUID": "223af406-3770-4089-8a1c-e890fbc07dd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a ClaimPhaseStepper section where step 3 is the current step",
              "fullTitle": "<ClaimPhaseStepper> should render a ClaimPhaseStepper section where step 3 is the current step",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPhaseStepper.default, {\n    claimDate: claimDate,\n    currentClaimPhaseDate: currentClaimPhaseDate,\n    currentPhase: 3\n  })),\n  container = _renderWithRouter4.container,\n  getByText = _renderWithRouter4.getByText,\n  getByTestId = _renderWithRouter4.getByTestId;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\nvar currentPhase = (0, _index.$)('#phase3 .current-phase', container);\n(0, _chai.expect)((0, _react2.within)(currentPhase).getByText('Your claim is in this step as of March 7, 2024.')).to.exist;\nvar phaseComplete = (0, _index.$)('#phase3 va-icon.phase-current', container);\n(0, _chai.expect)(phaseComplete).to.exist;\nvar phaseRepeats = (0, _index.$)('#phase3 .repeat-phase', container);\n(0, _chai.expect)(phaseRepeats).to.exist;\ngetByText('We’ll review your claim and make sure we have all the evidence and information we need. If we need more evidence to decide your claim, we may gather it in these ways:');\ngetByText('This is usually the longest step in the process.');\ngetByText('Note: You can submit evidence at any time. But if you submit evidence after this step, your claim will go back to this step for review.');\n(0, _chai.expect)(getByTestId('upload-evidence-link').textContent).to.equal('Upload your evidence here');\n(0, _chai.expect)((0, _react2.within)((0, _index.$)('#phase3 ul', container)).getByRole('link')).to.have.text('Learn more about VA claim exams');",
              "err": {},
              "uuid": "4a5018dc-60f7-4ae3-945e-d26067b56b86",
              "parentUUID": "223af406-3770-4089-8a1c-e890fbc07dd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a ClaimPhaseStepper section where step 4 is the current step",
              "fullTitle": "<ClaimPhaseStepper> should render a ClaimPhaseStepper section where step 4 is the current step",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter5 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPhaseStepper.default, {\n    claimDate: claimDate,\n    currentClaimPhaseDate: currentClaimPhaseDate,\n    currentPhase: 4\n  })),\n  container = _renderWithRouter5.container,\n  getByText = _renderWithRouter5.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\nvar currentPhase = (0, _index.$)('#phase4 .current-phase', container);\n(0, _chai.expect)((0, _react2.within)(currentPhase).getByText('Your claim is in this step as of March 7, 2024.')).to.exist;\nvar phaseComplete = (0, _index.$)('#phase4 va-icon.phase-current', container);\n(0, _chai.expect)(phaseComplete).to.exist;\nvar phaseRepeats = (0, _index.$)('#phase4 .repeat-phase', container);\n(0, _chai.expect)(phaseRepeats).to.exist;\ngetByText('We’ll review all the evidence for your claim.');\nvar phaseText = (0, _index.$)('#phase4, container');\n(0, _chai.expect)((0, _react2.within)(phaseText).getByText('If we need more evidence or you submit more evidence, your claim will go back to Step 3: Evidence gathering.')).to.exist;",
              "err": {},
              "uuid": "661b8e90-246d-4f3a-937f-5e96ba5a71ae",
              "parentUUID": "223af406-3770-4089-8a1c-e890fbc07dd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a ClaimPhaseStepper section where step 5 is the current step",
              "fullTitle": "<ClaimPhaseStepper> should render a ClaimPhaseStepper section where step 5 is the current step",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter6 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPhaseStepper.default, {\n    claimDate: claimDate,\n    currentClaimPhaseDate: currentClaimPhaseDate,\n    currentPhase: 5\n  })),\n  container = _renderWithRouter6.container,\n  getByText = _renderWithRouter6.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\nvar currentPhase = (0, _index.$)('#phase5 .current-phase', container);\n(0, _chai.expect)((0, _react2.within)(currentPhase).getByText('Your claim is in this step as of March 7, 2024.')).to.exist;\nvar phaseComplete = (0, _index.$)('#phase5 va-icon.phase-current', container);\n(0, _chai.expect)(phaseComplete).to.exist;\nvar phaseRepeats = (0, _index.$)('#phase5 .repeat-phase', container);\n(0, _chai.expect)(phaseRepeats).to.exist;\ngetByText('We’ll decide your claim and determine your disability rating.');\nvar phaseText = (0, _index.$)('#phase6, container');\n(0, _chai.expect)((0, _react2.within)(phaseText).getByText('If we need more evidence or you submit more evidence, your claim will go back to Step 3: Evidence gathering.')).to.exist;",
              "err": {},
              "uuid": "12b26214-3e4e-454a-81b0-14565260c506",
              "parentUUID": "223af406-3770-4089-8a1c-e890fbc07dd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a va-alert when currentPhaseBack is true for the current phase",
              "fullTitle": "<ClaimPhaseStepper> should render a va-alert when currentPhaseBack is true for the current phase",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter7 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPhaseStepper.default, {\n    claimDate: claimDate,\n    currentClaimPhaseDate: currentClaimPhaseDate,\n    currentPhase: 3,\n    currentPhaseBack: true\n  })),\n  container = _renderWithRouter7.container,\n  getByText = _renderWithRouter7.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\nvar alert = container.querySelector('.optional-alert');\n(0, _chai.expect)(alert).to.exist;\ngetByText('We moved your claim back to this step because we needed to find or review more evidence');\nvar phaseRepeats = (0, _index.$)('#phase3 .repeat-phase', container);\n(0, _chai.expect)(phaseRepeats).to.not.exist;",
              "err": {},
              "uuid": "f5ab5b98-ff42-44a1-a3ed-47234a148b35",
              "parentUUID": "223af406-3770-4089-8a1c-e890fbc07dd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the \"Step may repeat\" message for other phases when currentPhaseBack is true",
              "fullTitle": "<ClaimPhaseStepper> should render the \"Step may repeat\" message for other phases when currentPhaseBack is true",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter8 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPhaseStepper.default, {\n    claimDate: claimDate,\n    currentClaimPhaseDate: currentClaimPhaseDate,\n    currentPhase: 4,\n    currentPhaseBack: true\n  })),\n  container = _renderWithRouter8.container,\n  getByText = _renderWithRouter8.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\ngetByText('We moved your claim back to this step because we needed to find or review more evidence');\nvar phase3Repeat = (0, _index.$)('#phase3 .repeat-phase', container);\n(0, _chai.expect)(phase3Repeat).to.exist;\nvar phase5Repeat = (0, _index.$)('#phase5 .repeat-phase', container);\n(0, _chai.expect)(phase5Repeat).to.exist;\nvar phase6Repeat = (0, _index.$)('#phase6 .repeat-phase', container);\n(0, _chai.expect)(phase6Repeat).to.exist;",
              "err": {},
              "uuid": "2e34c444-9826-470c-b02d-62a845229175",
              "parentUUID": "223af406-3770-4089-8a1c-e890fbc07dd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a ClaimPhaseStepper section where step 6 is the current step",
              "fullTitle": "<ClaimPhaseStepper> should render a ClaimPhaseStepper section where step 6 is the current step",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter9 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPhaseStepper.default, {\n    claimDate: claimDate,\n    currentClaimPhaseDate: currentClaimPhaseDate,\n    currentPhase: 6\n  })),\n  container = _renderWithRouter9.container,\n  getByText = _renderWithRouter9.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\nvar currentPhase = (0, _index.$)('#phase6 .current-phase', container);\n(0, _chai.expect)((0, _react2.within)(currentPhase).getByText('Your claim is in this step as of March 7, 2024.')).to.exist;\nvar phaseComplete = (0, _index.$)('#phase6 va-icon.phase-current', container);\n(0, _chai.expect)(phaseComplete).to.exist;\nvar phaseRepeats = (0, _index.$)('#phase6 .repeat-phase', container);\n(0, _chai.expect)(phaseRepeats).to.exist;\ngetByText('We’ll prepare your decision letter.');\ngetByText('If you’re eligible for disability benefits, this letter will include your disability rating, the amount of your monthly payments, and the date your payments will start.');\nvar phaseText = (0, _index.$)('#phase6, container');\n(0, _chai.expect)((0, _react2.within)(phaseText).getByText('If we need more evidence or you submit more evidence, your claim will go back to Step 3: Evidence gathering.')).to.exist;",
              "err": {},
              "uuid": "6a14632b-c574-4e14-80e9-864f91a2e473",
              "parentUUID": "223af406-3770-4089-8a1c-e890fbc07dd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a ClaimPhaseStepper section where step 7 is the current step",
              "fullTitle": "<ClaimPhaseStepper> should render a ClaimPhaseStepper section where step 7 is the current step",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter10 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPhaseStepper.default, {\n    claimDate: claimDate,\n    currentClaimPhaseDate: currentClaimPhaseDate,\n    currentPhase: 7\n  })),\n  container = _renderWithRouter10.container,\n  getByText = _renderWithRouter10.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\nvar currentPhase = (0, _index.$)('#phase7 .current-phase', container);\n(0, _chai.expect)((0, _react2.within)(currentPhase).getByText('Your claim is in this step as of March 7, 2024.')).to.exist;\nvar phaseComplete = (0, _index.$)('#phase7 va-icon.phase-current', container);\n(0, _chai.expect)(phaseComplete).to.exist;\nvar phaseRepeats = (0, _index.$)('#phase7 .repeat-phase', container);\n(0, _chai.expect)(phaseRepeats).to.not.exist;\ngetByText('A senior reviewer will do a final review of your claim and the decision letter.');",
              "err": {},
              "uuid": "8fdd75c7-dac9-408e-a83b-796e09f77d75",
              "parentUUID": "223af406-3770-4089-8a1c-e890fbc07dd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a ClaimPhaseStepper section where step 8 is the current step",
              "fullTitle": "<ClaimPhaseStepper> should render a ClaimPhaseStepper section where step 8 is the current step",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter11 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPhaseStepper.default, {\n    claimDate: claimDate,\n    currentClaimPhaseDate: currentClaimPhaseDate,\n    currentPhase: 8\n  })),\n  container = _renderWithRouter11.container,\n  getByText = _renderWithRouter11.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\nvar currentPhase = (0, _index.$)('#phase8 .current-phase', container);\n(0, _chai.expect)((0, _react2.within)(currentPhase).getByText('Your claim is in this step as of March 7, 2024.')).to.exist;\n(0, _chai.expect)((0, _react2.within)((0, _index.$)('#phase8', container)).getByRole('link')).to.have.text('Go to the claim letters page');\nvar phaseComplete = (0, _index.$)('#phase8 va-icon.phase-complete', container);\n(0, _chai.expect)(phaseComplete).to.exist;\nvar phaseRepeats = (0, _index.$)('#phase8 .repeat-phase', container);\n(0, _chai.expect)(phaseRepeats).to.not.exist;\ngetByText('You’ll be able to view and download your decision letter on the status page for this claim.');\ngetByText('We’ll also send you a copy of your decision letter by mail. It should arrive within 10 business days, but it may take longer.');",
              "err": {},
              "uuid": "6fc659f7-59d6-4d89-9da4-b75bd304f741",
              "parentUUID": "223af406-3770-4089-8a1c-e890fbc07dd0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "89fb4d33-88e9-48da-a924-6bd6c4fb53aa",
            "600bde1d-3202-4c94-9889-beb66ffb49c6",
            "3c0e3098-2c83-4bb3-9f08-74e1666fe1d5",
            "4a5018dc-60f7-4ae3-945e-d26067b56b86",
            "661b8e90-246d-4f3a-937f-5e96ba5a71ae",
            "12b26214-3e4e-454a-81b0-14565260c506",
            "f5ab5b98-ff42-44a1-a3ed-47234a148b35",
            "2e34c444-9826-470c-b02d-62a845229175",
            "6a14632b-c574-4e14-80e9-864f91a2e473",
            "8fdd75c7-dac9-408e-a83b-796e09f77d75",
            "6fc659f7-59d6-4d89-9da4-b75bd304f741"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 100,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7190f852-aa27-41d2-85b7-cf8fff7233ab",
          "title": "<DesktopClaimPhaseDiagram>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-overview-tab/DesktopClaimPhaseDiagram.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-overview-tab/DesktopClaimPhaseDiagram.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render a DesktopClaimPhaseDiagram section",
              "fullTitle": "<DesktopClaimPhaseDiagram> should render a DesktopClaimPhaseDiagram section",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_DesktopClaimPhaseDiagram.default, {\n    currentPhase: 1\n  })),\n  container = _render.container,\n  getByTitle = _render.getByTitle;\n(0, _chai.expect)((0, _index.$)('.desktop', container)).to.exist;\n(0, _chai.expect)(getByTitle('Your current step is 1 of 8 in the claims process. Steps 3 through 6 can be repeated.'));",
              "err": {},
              "uuid": "555bca28-490b-4609-8446-9c6fb990544c",
              "parentUUID": "7190f852-aa27-41d2-85b7-cf8fff7233ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "555bca28-490b-4609-8446-9c6fb990544c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3e84b670-fa40-4e84-8250-7b08f6e20b4d",
          "title": "<MobileClaimPhaseDiagram>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-overview-tab/MobileClaimPhaseDiagram.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-overview-tab/MobileClaimPhaseDiagram.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render a MobileClaimPhaseDiagram section",
              "fullTitle": "<MobileClaimPhaseDiagram> should render a MobileClaimPhaseDiagram section",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_MobileClaimPhaseDiagram.default, {\n    currentPhase: 1\n  })),\n  container = _render.container,\n  getByTitle = _render.getByTitle;\n(0, _chai.expect)((0, _index.$)('.mobile', container)).to.exist;\n(0, _chai.expect)(getByTitle('Your current step is 1 of 8 in the claims process. Steps 3 through 6 can be repeated.'));",
              "err": {},
              "uuid": "2b78f7d5-f916-4ac5-b605-d52ef68e3539",
              "parentUUID": "3e84b670-fa40-4e84-8250-7b08f6e20b4d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b78f7d5-f916-4ac5-b605-d52ef68e3539"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "dab6bffc-331d-47cd-b42f-ab8a23a52e87",
          "title": "<ClosedClaimAlert>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "54b9a67c-a269-46a3-ba74-2a5849773707",
              "title": "when closeDate null",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9b82123a-afcf-4168-8c6d-3761e42b76ea",
                  "title": "when decisionLetterSent false",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render message without date ",
                      "fullTitle": "<ClosedClaimAlert> when closeDate null when decisionLetterSent false should render message without date ",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClosedClaimAlert.default, {\n    closeDate: date\n  })),\n  container = _render.container,\n  queryByText = _render.queryByText;\nvar link = (0, _index.$)('.link-action-container', container);\n(0, _chai.expect)(link).not.to.exist;\n(0, _chai.expect)(queryByText('We closed your claim')).to.exist;",
                      "err": {},
                      "uuid": "1b660b02-f5db-43d2-bb97-0772d4abfb5a",
                      "parentUUID": "9b82123a-afcf-4168-8c6d-3761e42b76ea",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1b660b02-f5db-43d2-bb97-0772d4abfb5a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "47d8f25d-d96c-4e2d-9c8f-015d8c185a2d",
                  "title": "when decisionLetterSent true",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render message without date and with a link",
                      "fullTitle": "<ClosedClaimAlert> when closeDate null when decisionLetterSent true should render message without date and with a link",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClosedClaimAlert.default, {\n    closeDate: date,\n    decisionLetterSent: \"true\"\n  })),\n  container = _renderWithRouter.container,\n  queryByText = _renderWithRouter.queryByText;\nvar link = (0, _index.$)('.link-action-container', container);\n(0, _chai.expect)(link).to.exist;\n(0, _chai.expect)(queryByText('We closed your claim')).to.exist;",
                      "err": {},
                      "uuid": "3a7229df-02be-42a0-b260-b11da60cb35f",
                      "parentUUID": "47d8f25d-d96c-4e2d-9c8f-015d8c185a2d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3a7229df-02be-42a0-b260-b11da60cb35f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2f76617f-1e93-4be4-90a0-ea3c8312a0dd",
              "title": "when closeDate exists",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "77f1d1c6-4d53-4df2-9bb6-45913989a51c",
                  "title": "when decisionLetterSent false",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render message with date",
                      "fullTitle": "<ClosedClaimAlert> when closeDate exists when decisionLetterSent false should render message with date",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClosedClaimAlert.default, {\n    closeDate: date\n  })),\n  container = _render2.container,\n  queryByText = _render2.queryByText;\nvar link = (0, _index.$)('.link-action-container', container);\n(0, _chai.expect)(link).not.to.exist;\n(0, _chai.expect)(queryByText('We closed your claim on March 1, 2010')).to.exist;",
                      "err": {},
                      "uuid": "2d2eb61b-708c-4dba-b345-9f5a1141a044",
                      "parentUUID": "77f1d1c6-4d53-4df2-9bb6-45913989a51c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2d2eb61b-708c-4dba-b345-9f5a1141a044"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "ff79d9e1-3bc6-4b9f-a5dd-0e543eb4a662",
                  "title": "when decisionLetterSent true",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/ClosedClaimAlert.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render message with date and with a link",
                      "fullTitle": "<ClosedClaimAlert> when closeDate exists when decisionLetterSent true should render message with date and with a link",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClosedClaimAlert.default, {\n    closeDate: date,\n    decisionLetterSent: \"true\"\n  })),\n  container = _renderWithRouter2.container,\n  queryByText = _renderWithRouter2.queryByText;\nvar link = (0, _index.$)('.link-action-container', container);\n(0, _chai.expect)(link).to.exist;\n(0, _chai.expect)(queryByText('We closed your claim on March 1, 2010')).to.exist;",
                      "err": {},
                      "uuid": "011f4fad-af51-4516-828e-ae636ac86945",
                      "parentUUID": "ff79d9e1-3bc6-4b9f-a5dd-0e543eb4a662",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "011f4fad-af51-4516-828e-ae636ac86945"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a6bfdf32-b093-4ad1-97eb-252269a745fe",
          "title": "<NextSteps>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/NextSteps.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-status-tab/NextSteps.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render next steps section with 4 links",
              "fullTitle": "<NextSteps> should render next steps section with 4 links",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_NextSteps.default, null)),\n  container = _render.container,\n  queryByText = _render.queryByText;\nvar links = (0, _index.$$)('a', container);\n(0, _chai.expect)(links.length).to.eq(4);\n(0, _chai.expect)(queryByText('Next steps')).to.exist;",
              "err": {},
              "uuid": "f0238448-95ce-4c8f-b411-432ff8cdefdf",
              "parentUUID": "a6bfdf32-b093-4ad1-97eb-252269a745fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f0238448-95ce-4c8f-b411-432ff8cdefdf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c307b4e5-38ae-4a84-8278-ccdc921f7b53",
          "title": "<Payments>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/Payments.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-status-tab/Payments.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render payments section",
              "fullTitle": "<Payments> should render payments section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_Payments.default, null)),\n  getByText = _render.getByText;\ngetByText('Payments');\nvar text = 'If you are entitled to back payment (based on an effective date), you can expect to receive payment within 1 month of your claim’s decision date.';\ngetByText(text);",
              "err": {},
              "uuid": "1e8fb8f9-700e-469d-b8ac-cb00508a4a8b",
              "parentUUID": "c307b4e5-38ae-4a84-8278-ccdc921f7b53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1e8fb8f9-700e-469d-b8ac-cb00508a4a8b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "35688643-53a4-497b-93f6-83824d19cac6",
          "title": "<RecentActivity>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "212153ae-57c2-4065-bd36-9ca7904e276e",
              "title": "when cstClaimPhasesEnabled enabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "33e571ab-3365-4316-8de7-6eb90dc9fce5",
                  "title": "when claim doesn’t have trackedItems",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "1d9ce2a5-7542-4c91-b666-c1a0879ea06d",
                      "title": "when claim in phase 1",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render recent activities section with 1 item",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim doesn’t have trackedItems when claim in phase 1 should render recent activities section with 1 item",
                          "timedOut": false,
                          "duration": 6,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep1\n  }))),\n  container = _renderWithRouter.container,\n  getByText = _renderWithRouter.getByText;\ngetByText('Recent activity');\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(1);\ngetByText('We received your claim in our system');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "2c3e7bb4-ad7f-4e5e-a767-92cb17a9491c",
                          "parentUUID": "1d9ce2a5-7542-4c91-b666-c1a0879ea06d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "2c3e7bb4-ad7f-4e5e-a767-92cb17a9491c"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 6,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "e9e4f23c-dc18-40de-bdc1-ade99bc3e931",
                      "title": "when claim in phase 3 and has phased back",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render recent activities section with 3 items",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim doesn’t have trackedItems when claim in phase 3 and has phased back should render recent activities section with 3 items",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3PhaseBack\n  }))),\n  container = _renderWithRouter2.container,\n  getByText = _renderWithRouter2.getByText;\ngetByText('Recent activity');\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(3);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved back to Step 3: Evidence gathering');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "22818dd2-f839-4007-a5b5-0c5c35c625a3",
                          "parentUUID": "e9e4f23c-dc18-40de-bdc1-ade99bc3e931",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "22818dd2-f839-4007-a5b5-0c5c35c625a3"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "74a5255c-523a-47a6-b2db-cf4b511f10f6",
                      "title": "when claim in phase 7",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render recent activities section with 7 item",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim doesn’t have trackedItems when claim in phase 7 should render recent activities section with 7 item",
                          "timedOut": false,
                          "duration": 11,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep7\n  }))),\n  container = _renderWithRouter3.container,\n  getByText = _renderWithRouter3.getByText;\ngetByText('Recent activity');\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(7);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('Your claim moved into Step 4: Evidence review');\ngetByText('Your claim moved into Step 5: Rating');\ngetByText('Your claim moved into Step 6: Preparing decision letter');\ngetByText('Your claim moved into Step 7: Final review');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "4147b5ff-a008-48d1-b754-9a50c2fb4a97",
                          "parentUUID": "74a5255c-523a-47a6-b2db-cf4b511f10f6",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "4147b5ff-a008-48d1-b754-9a50c2fb4a97"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 11,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "592a24b1-44bb-4970-800e-fd9f298f0110",
                      "title": "when claim is closed - phase 8",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render recent activities section with 2 items",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim doesn’t have trackedItems when claim is closed - phase 8 should render recent activities section with 2 items",
                          "timedOut": false,
                          "duration": 6,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: closedClaimStep8\n  }))),\n  container = _renderWithRouter4.container,\n  getByText = _renderWithRouter4.getByText;\ngetByText('Recent activity');\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(2);\ngetByText('We received your claim in our system');\ngetByText('Your claim was decided');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "c32ebbc4-7216-42e9-80af-eef47b90e854",
                          "parentUUID": "592a24b1-44bb-4970-800e-fd9f298f0110",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c32ebbc4-7216-42e9-80af-eef47b90e854"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 6,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "16d7dde8-ae26-469e-b576-8ce6ce612d4f",
                  "title": "when claim has trackedItems",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "62c9b682-6d24-4a78-8a75-abdd2709ac5a",
                      "title": "when claim in phase 3",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render recent activities section with NEEDED_FROM_YOU record",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim in phase 3 should render recent activities section with NEEDED_FROM_YOU record",
                          "timedOut": false,
                          "duration": 7,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter5 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithNeededFromYouItem\n  }))),\n  container = _renderWithRouter5.container,\n  getByText = _renderWithRouter5.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('Request for you');\ngetByText('We opened a request: \"Needed from you Request\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "73f3e346-174a-4564-aa43-0695267bfb90",
                          "parentUUID": "62c9b682-6d24-4a78-8a75-abdd2709ac5a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should render recent activities section with NEEDED_FROM_OTHERS record",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim in phase 3 should render recent activities section with NEEDED_FROM_OTHERS record",
                          "timedOut": false,
                          "duration": 10,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter6 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithNeededFromOthersItem\n  }))),\n  container = _renderWithRouter6.container,\n  getByText = _renderWithRouter6.getByText,\n  getByLabelText = _renderWithRouter6.getByLabelText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('Request for others');\ngetByText('We opened a request: \"Needed from others Request\"');\n(0, _chai.expect)((0, _index.$)('va-alert', container)).to.exist;\ngetByLabelText('Add information for Needed from others Request');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "68284db4-19cf-4930-a4eb-ed5664e95697",
                          "parentUUID": "62c9b682-6d24-4a78-8a75-abdd2709ac5a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should render recent activities section with NO_LONGER_REQUIRED record",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim in phase 3 should render recent activities section with NO_LONGER_REQUIRED record",
                          "timedOut": false,
                          "duration": 10,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter7 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithNoLongerRequiredItem\n  }))),\n  container = _renderWithRouter7.container,\n  getByText = _renderWithRouter7.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('We closed a request: \"No longer required Request\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "9ef1ebeb-cfad-4e0e-8c77-fbf72f3a89cc",
                          "parentUUID": "62c9b682-6d24-4a78-8a75-abdd2709ac5a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should render recent activities section with SUBMITTED_AWAITING_REVIEW",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim in phase 3 should render recent activities section with SUBMITTED_AWAITING_REVIEW",
                          "timedOut": false,
                          "duration": 8,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter8 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithSubmittedAwaitingReviewItem\n  }))),\n  container = _renderWithRouter8.container,\n  getByText = _renderWithRouter8.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('We received your document(s) for the request: \"Submitted awaiting Request\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "7474cb63-aa78-4fde-9526-5828955d57a3",
                          "parentUUID": "62c9b682-6d24-4a78-8a75-abdd2709ac5a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should render recent activities section with INITIAL_REVIEW_COMPLETE",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim in phase 3 should render recent activities section with INITIAL_REVIEW_COMPLETE",
                          "timedOut": false,
                          "duration": 7,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter9 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithInitialReviewCompleteItem\n  }))),\n  container = _renderWithRouter9.container,\n  getByText = _renderWithRouter9.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('We completed a review for the request: \"Initial review complete Request\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "33e614a7-c077-4055-8e00-3d1e8cd5a6f9",
                          "parentUUID": "62c9b682-6d24-4a78-8a75-abdd2709ac5a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should render recent activities section with ACCEPTED",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim in phase 3 should render recent activities section with ACCEPTED",
                          "timedOut": false,
                          "duration": 8,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter10 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithAcceptedItem\n  }))),\n  container = _renderWithRouter10.container,\n  getByText = _renderWithRouter10.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(5);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText(\"We opened a request: \\\"Accepted Request\\\"\");\ngetByText('We completed a review for the request: \"Accepted Request\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "0f3e0f81-48b7-4168-b177-393b7830c2c1",
                          "parentUUID": "62c9b682-6d24-4a78-8a75-abdd2709ac5a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should mask activity descriptions from Datadog because they sometimes contain filenames (no PII)",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim in phase 3 should mask activity descriptions from Datadog because they sometimes contain filenames (no PII)",
                          "timedOut": false,
                          "duration": 3,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter11 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithAcceptedItem\n  }))),\n  container = _renderWithRouter11.container;\n(0, _chai.expect)((0, _index.$)('.item-description', container).getAttribute('data-dd-privacy')).to.equal('mask');",
                          "err": {},
                          "uuid": "cac4f195-af59-4da1-9ef6-f3b33442e9d8",
                          "parentUUID": "62c9b682-6d24-4a78-8a75-abdd2709ac5a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "73f3e346-174a-4564-aa43-0695267bfb90",
                        "68284db4-19cf-4930-a4eb-ed5664e95697",
                        "9ef1ebeb-cfad-4e0e-8c77-fbf72f3a89cc",
                        "7474cb63-aa78-4fde-9526-5828955d57a3",
                        "33e614a7-c077-4055-8e00-3d1e8cd5a6f9",
                        "0f3e0f81-48b7-4168-b177-393b7830c2c1",
                        "cac4f195-af59-4da1-9ef6-f3b33442e9d8"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 53,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "a1f3d276-4efe-402e-82e7-1b6c331174fc",
                      "title": "when claim is in phase 4",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render list with pagination",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim is in phase 4 should render list with pagination",
                          "timedOut": false,
                          "duration": 13,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter12 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithOver10Items\n  }))),\n  container = _renderWithRouter12.container;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(10);\nvar pagination = (0, _index.$)('va-pagination', container);\n(0, _chai.expect)(pagination).to.exist;\n(0, _chai.expect)(pagination.pages).to.equal(2);",
                          "err": {},
                          "uuid": "3b274090-4ff4-4051-b3c6-25b9c16eca77",
                          "parentUUID": "a1f3d276-4efe-402e-82e7-1b6c331174fc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "shows closed tracked item history in recent activity",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim is in phase 4 shows closed tracked item history in recent activity",
                          "timedOut": false,
                          "duration": 8,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter13 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithClosedItem\n  }))),\n  container = _renderWithRouter13.container,\n  getByText = _renderWithRouter13.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(6);\ngetByText('May 2, 2024');\ngetByText('We received your claim in our system');\ngetByText('May 10, 2024');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('May 20, 2024');\ngetByText(\"We opened a request: \\\"No longer required Request\\\"\");\ngetByText('May 22, 2024');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('May 24, 2024');\ngetByText(\"We closed a request: \\\"No longer required Request\\\"\");\ngetByText('June 7, 2024');\ngetByText(\"Your claim moved into Step 4: Evidence review\");",
                          "err": {},
                          "uuid": "81a27a14-6bc2-4d3e-adaa-8d33d383eb6b",
                          "parentUUID": "a1f3d276-4efe-402e-82e7-1b6c331174fc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "shows documents submitted tracked item history in recent activity",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim is in phase 4 shows documents submitted tracked item history in recent activity",
                          "timedOut": false,
                          "duration": 13,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter14 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithDocumentsSubmittedForTrackedItem\n  }))),\n  container = _renderWithRouter14.container,\n  getByText = _renderWithRouter14.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(6);\ngetByText('May 2, 2024');\ngetByText('We received your claim in our system');\ngetByText('May 10, 2024');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('May 20, 2024');\ngetByText(\"We opened a request: \\\"Submitted awaiting Request\\\"\");\ngetByText('May 22, 2024');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('May 24, 2024');\ngetByText(\"We received your document(s) for the request: \\\"Submitted awaiting Request\\\"\");\ngetByText('June 7, 2024');\ngetByText(\"Your claim moved into Step 4: Evidence review\");",
                          "err": {},
                          "uuid": "5629a490-3f56-4d86-80c5-781ab9a3b9d5",
                          "parentUUID": "a1f3d276-4efe-402e-82e7-1b6c331174fc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "shows documents submitted tracked item history in recent activity",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim is in phase 4 shows documents submitted tracked item history in recent activity",
                          "timedOut": false,
                          "duration": 14,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter15 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithDocumentsReceivedForTrackedItem\n  }))),\n  container = _renderWithRouter15.container,\n  getByText = _renderWithRouter15.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(7);\ngetByText('May 2, 2024');\ngetByText('We received your claim in our system');\ngetByText('May 10, 2024');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('May 20, 2024');\ngetByText(\"We opened a request: \\\"Submitted and received Request\\\"\");\ngetByText('May 22, 2024');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('May 24, 2024');\ngetByText(\"We received your document(s) for the request: \\\"Submitted and received Request\\\"\");\ngetByText('May 27, 2024');\ngetByText(\"We completed a review for the request: \\\"Submitted and received Request\\\"\");\ngetByText('June 7, 2024');\ngetByText(\"Your claim moved into Step 4: Evidence review\");",
                          "err": {},
                          "uuid": "2192dd77-41b4-4078-94cf-f3dd3db252fa",
                          "parentUUID": "a1f3d276-4efe-402e-82e7-1b6c331174fc",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "aff12ac7-18a3-4cef-bac0-e9828ceba92b",
                          "title": "when cst5103UpdateEnabled and has an Automated 5103 Notice Response item",
                          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should render list",
                              "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim is in phase 4 when cst5103UpdateEnabled and has an Automated 5103 Notice Response item should render list",
                              "timedOut": false,
                              "duration": 8,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "var _renderWithRouter16 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true, true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithAuto5103Notice\n  }))),\n  container = _renderWithRouter16.container,\n  getByText = _renderWithRouter16.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(5);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('Your claim moved into Step 4: Evidence review');\ngetByText('Request for you');\ngetByText('We opened a request: \"List of evidence we may need (5103 notice)\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                              "err": {},
                              "uuid": "e241c621-32b3-48ae-ab8c-b5ab6b6a69d8",
                              "parentUUID": "aff12ac7-18a3-4cef-bac0-e9828ceba92b",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "e241c621-32b3-48ae-ab8c-b5ab6b6a69d8"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 8,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 10000
                        },
                        {
                          "uuid": "6313ae1f-7ebe-4988-af8f-0d826869cdb8",
                          "title": "when cst5103UpdateEnabled disabled and has an Automated 5103 Notice Response item",
                          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should render list",
                              "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim is in phase 4 when cst5103UpdateEnabled disabled and has an Automated 5103 Notice Response item should render list",
                              "timedOut": false,
                              "duration": 6,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "var _renderWithRouter17 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true, false)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithAuto5103Notice\n  }))),\n  container = _renderWithRouter17.container,\n  getByText = _renderWithRouter17.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(5);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('Your claim moved into Step 4: Evidence review');\ngetByText('Request for you');\ngetByText('We opened a request: \"Automated 5103 Notice Response\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                              "err": {},
                              "uuid": "74699beb-7bb4-4801-8f79-92a4160fcdea",
                              "parentUUID": "6313ae1f-7ebe-4988-af8f-0d826869cdb8",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "74699beb-7bb4-4801-8f79-92a4160fcdea"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 6,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 10000
                        },
                        {
                          "uuid": "71ce93ec-d246-439b-b75d-c7d31c1c2fbf",
                          "title": "when cst5103UpdateEnabled and has a closed 5103 Notice Response item",
                          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should render list",
                              "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim is in phase 4 when cst5103UpdateEnabled and has a closed 5103 Notice Response item should render list",
                              "timedOut": false,
                              "duration": 9,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "var _renderWithRouter18 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true, true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithClosed5103Notice\n  }))),\n  container = _renderWithRouter18.container,\n  getByText = _renderWithRouter18.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(6);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText(\"We opened a request: \\\"List of evidence we may need (5103 notice)\\\"\");\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('Your claim moved into Step 4: Evidence review');\ngetByText('We closed a request: \"List of evidence we may need (5103 notice)\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                              "err": {},
                              "uuid": "9aa086d7-489b-4cfb-978b-a77b41a95515",
                              "parentUUID": "71ce93ec-d246-439b-b75d-c7d31c1c2fbf",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "9aa086d7-489b-4cfb-978b-a77b41a95515"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 9,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 10000
                        },
                        {
                          "uuid": "f78b129f-df80-4c20-940c-c4349999922f",
                          "title": "when cst5103UpdateEnabled disabled and has a closed 5103 Notice Response item",
                          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should render list",
                              "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled enabled when claim has trackedItems when claim is in phase 4 when cst5103UpdateEnabled disabled and has a closed 5103 Notice Response item should render list",
                              "timedOut": false,
                              "duration": 14,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "var _renderWithRouter19 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true, false)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithClosed5103Notice\n  }))),\n  container = _renderWithRouter19.container,\n  getByText = _renderWithRouter19.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(6);\ngetByText('We received your claim in our system');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText(\"We opened a request: \\\"5103 Notice Response\\\"\");\ngetByText('Your claim moved into Step 3: Evidence gathering');\ngetByText('Your claim moved into Step 4: Evidence review');\ngetByText('We closed a request: \"5103 Notice Response\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                              "err": {},
                              "uuid": "1665e6b9-972f-4cd1-8685-18af13db9bf1",
                              "parentUUID": "f78b129f-df80-4c20-940c-c4349999922f",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "1665e6b9-972f-4cd1-8685-18af13db9bf1"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 14,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 10000
                        }
                      ],
                      "passes": [
                        "3b274090-4ff4-4051-b3c6-25b9c16eca77",
                        "81a27a14-6bc2-4d3e-adaa-8d33d383eb6b",
                        "5629a490-3f56-4d86-80c5-781ab9a3b9d5",
                        "2192dd77-41b4-4078-94cf-f3dd3db252fa"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 48,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c327b354-9cb7-421b-9611-b2284fc1872b",
              "title": "when cstClaimPhasesEnabled disabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "0912af21-c827-4829-bccf-14d4c50fcdf6",
                  "title": "when claim doesn’t have trackedItems",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "1f298275-b751-4ca0-8e51-2300085d9ac3",
                      "title": "when claim in phase 1",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render recent activities section with 1 item",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim doesn’t have trackedItems when claim in phase 1 should render recent activities section with 1 item",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter20 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep1\n  }))),\n  container = _renderWithRouter20.container,\n  getByText = _renderWithRouter20.getByText;\ngetByText('Recent activity');\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(1);\ngetByText('Your claim moved into Step 1: Claim received');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "ddc4c2c5-160e-41f8-9699-c7859ee89e54",
                          "parentUUID": "1f298275-b751-4ca0-8e51-2300085d9ac3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "ddc4c2c5-160e-41f8-9699-c7859ee89e54"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "82bb268a-3d95-434c-813b-853eaf05cb93",
                      "title": "when claim in phase 3 and has phased back",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render recent activities section with 3 items",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim doesn’t have trackedItems when claim in phase 3 and has phased back should render recent activities section with 3 items",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter21 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3PhaseBack\n  }))),\n  container = _renderWithRouter21.container,\n  getByText = _renderWithRouter21.getByText;\ngetByText('Recent activity');\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(3);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved back to Step 3: Evidence gathering, review, and decision');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "43a6a3a1-743d-4b23-8f9c-e256801de648",
                          "parentUUID": "82bb268a-3d95-434c-813b-853eaf05cb93",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "43a6a3a1-743d-4b23-8f9c-e256801de648"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 4,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "635f002f-663a-41e2-abdb-265e84c54482",
                      "title": "when claim in phase 7",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render recent activities section with 4 items",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim doesn’t have trackedItems when claim in phase 7 should render recent activities section with 4 items",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter22 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep7\n  }))),\n  container = _renderWithRouter22.container,\n  getByText = _renderWithRouter22.getByText;\ngetByText('Recent activity');\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('Your claim moved into Step 4: Preparation for notification');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "c406ed32-1f74-4173-87bf-734d0a1da888",
                          "parentUUID": "635f002f-663a-41e2-abdb-265e84c54482",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c406ed32-1f74-4173-87bf-734d0a1da888"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "18875ba6-055c-4c4c-a9ab-391fd153c7f3",
                      "title": "when claim is closed - phase 8",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render recent activities section with 2 items",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim doesn’t have trackedItems when claim is closed - phase 8 should render recent activities section with 2 items",
                          "timedOut": false,
                          "duration": 10,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter23 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: closedClaimStep8\n  }))),\n  container = _renderWithRouter23.container,\n  getByText = _renderWithRouter23.getByText;\ngetByText('Recent activity');\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(2);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 5: Closed');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "9970a91b-3ceb-4902-b311-a1c492993e1d",
                          "parentUUID": "18875ba6-055c-4c4c-a9ab-391fd153c7f3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "9970a91b-3ceb-4902-b311-a1c492993e1d"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 10,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "4a696bbd-7e59-4414-9fde-4b2edf8abff3",
                  "title": "when claim has trackedItems",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "619aee7c-14b3-4825-b24a-29d97cbbaa1a",
                      "title": "when claim in phase 3",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render recent activities section with NEEDED_FROM_YOU record",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim in phase 3 should render recent activities section with NEEDED_FROM_YOU record",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter24 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithNeededFromYouItem\n  }))),\n  container = _renderWithRouter24.container,\n  getByText = _renderWithRouter24.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('Request for you');\ngetByText('We opened a request: \"Needed from you Request\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "827f1c38-86b6-47f0-8496-689d28d24e91",
                          "parentUUID": "619aee7c-14b3-4825-b24a-29d97cbbaa1a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should render recent activities section with NEEDED_FROM_OTHERS record",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim in phase 3 should render recent activities section with NEEDED_FROM_OTHERS record",
                          "timedOut": false,
                          "duration": 6,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter25 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithNeededFromOthersItem\n  }))),\n  container = _renderWithRouter25.container,\n  getByText = _renderWithRouter25.getByText,\n  getByLabelText = _renderWithRouter25.getByLabelText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('Request for others');\ngetByText('We opened a request: \"Needed from others Request\"');\n(0, _chai.expect)((0, _index.$)('va-alert', container)).to.exist;\ngetByLabelText('Add information for Needed from others Request');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "4b6ff417-677a-4c84-858e-ca79956ae06c",
                          "parentUUID": "619aee7c-14b3-4825-b24a-29d97cbbaa1a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should render recent activities section with NO_LONGER_REQUIRED record",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim in phase 3 should render recent activities section with NO_LONGER_REQUIRED record",
                          "timedOut": false,
                          "duration": 4,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter26 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithNoLongerRequiredItem\n  }))),\n  container = _renderWithRouter26.container,\n  getByText = _renderWithRouter26.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('We closed a request: \"No longer required Request\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "1d341a3c-5b35-4a4d-b0cc-f8b6876455cb",
                          "parentUUID": "619aee7c-14b3-4825-b24a-29d97cbbaa1a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should render recent activities section with SUBMITTED_AWAITING_REVIEW",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim in phase 3 should render recent activities section with SUBMITTED_AWAITING_REVIEW",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter27 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithSubmittedAwaitingReviewItem\n  }))),\n  container = _renderWithRouter27.container,\n  getByText = _renderWithRouter27.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('We received your document(s) for the request: \"Submitted awaiting Request\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "74524842-628f-4559-a6bd-f7f99f4a9bcb",
                          "parentUUID": "619aee7c-14b3-4825-b24a-29d97cbbaa1a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should render recent activities section with INITIAL_REVIEW_COMPLETE",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim in phase 3 should render recent activities section with INITIAL_REVIEW_COMPLETE",
                          "timedOut": false,
                          "duration": 9,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter28 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithInitialReviewCompleteItem\n  }))),\n  container = _renderWithRouter28.container,\n  getByText = _renderWithRouter28.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('We completed a review for the request: \"Initial review complete Request\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "1c1e7ad0-6748-4d7c-a37b-c012aa2293b3",
                          "parentUUID": "619aee7c-14b3-4825-b24a-29d97cbbaa1a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should render recent activities section with ACCEPTED",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim in phase 3 should render recent activities section with ACCEPTED",
                          "timedOut": false,
                          "duration": 12,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter29 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithAcceptedItem\n  }))),\n  container = _renderWithRouter29.container,\n  getByText = _renderWithRouter29.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(5);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText(\"We opened a request: \\\"Accepted Request\\\"\");\ngetByText('We completed a review for the request: \"Accepted Request\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                          "err": {},
                          "uuid": "74df09fc-5bd6-4edc-9159-93111406866e",
                          "parentUUID": "619aee7c-14b3-4825-b24a-29d97cbbaa1a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should mask activity descriptions from Datadog because they sometimes contain filenames (no PII)",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim in phase 3 should mask activity descriptions from Datadog because they sometimes contain filenames (no PII)",
                          "timedOut": false,
                          "duration": 6,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter30 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep3WithAcceptedItem\n  }))),\n  container = _renderWithRouter30.container;\n(0, _chai.expect)((0, _index.$)('.item-description', container).getAttribute('data-dd-privacy')).to.equal('mask');",
                          "err": {},
                          "uuid": "4fda481f-c9c2-437f-bbef-c04560c2b64a",
                          "parentUUID": "619aee7c-14b3-4825-b24a-29d97cbbaa1a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "827f1c38-86b6-47f0-8496-689d28d24e91",
                        "4b6ff417-677a-4c84-858e-ca79956ae06c",
                        "1d341a3c-5b35-4a4d-b0cc-f8b6876455cb",
                        "74524842-628f-4559-a6bd-f7f99f4a9bcb",
                        "1c1e7ad0-6748-4d7c-a37b-c012aa2293b3",
                        "74df09fc-5bd6-4edc-9159-93111406866e",
                        "4fda481f-c9c2-437f-bbef-c04560c2b64a"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 46,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "539b14e3-e998-40ba-a8a6-4739c1246be3",
                      "title": "when claim is in phase 4",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should render list with pagination",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim is in phase 4 should render list with pagination",
                          "timedOut": false,
                          "duration": 14,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter31 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithOver10Items\n  }))),\n  container = _renderWithRouter31.container;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(10);\nvar pagination = (0, _index.$)('va-pagination', container);\n(0, _chai.expect)(pagination).to.exist;\n(0, _chai.expect)(pagination.pages).to.equal(2);",
                          "err": {},
                          "uuid": "8dde188b-005e-44ab-a834-a7747a1ab8be",
                          "parentUUID": "539b14e3-e998-40ba-a8a6-4739c1246be3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "shows closed tracked item history in recent activity",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim is in phase 4 shows closed tracked item history in recent activity",
                          "timedOut": false,
                          "duration": 6,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter32 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithClosedItem\n  }))),\n  container = _renderWithRouter32.container,\n  getByText = _renderWithRouter32.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(5);\ngetByText('May 2, 2024');\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('May 10, 2024');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('May 20, 2024');\ngetByText(\"We opened a request: \\\"No longer required Request\\\"\");\ngetByText('May 22, 2024');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('May 24, 2024');\ngetByText(\"We closed a request: \\\"No longer required Request\\\"\");",
                          "err": {},
                          "uuid": "a75b3ee3-fc78-4e31-a566-d5224b1cd63c",
                          "parentUUID": "539b14e3-e998-40ba-a8a6-4739c1246be3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "shows documents submitted tracked item history in recent activity",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim is in phase 4 shows documents submitted tracked item history in recent activity",
                          "timedOut": false,
                          "duration": 5,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter33 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithDocumentsSubmittedForTrackedItem\n  }))),\n  container = _renderWithRouter33.container,\n  getByText = _renderWithRouter33.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(5);\ngetByText('May 2, 2024');\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('May 10, 2024');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('May 20, 2024');\ngetByText(\"We opened a request: \\\"Submitted awaiting Request\\\"\");\ngetByText('May 22, 2024');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('May 24, 2024');\ngetByText(\"We received your document(s) for the request: \\\"Submitted awaiting Request\\\"\");",
                          "err": {},
                          "uuid": "c57a619c-f3e9-4e27-9a16-30347ada2a4c",
                          "parentUUID": "539b14e3-e998-40ba-a8a6-4739c1246be3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "shows documents submitted tracked item history in recent activity",
                          "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim is in phase 4 shows documents submitted tracked item history in recent activity",
                          "timedOut": false,
                          "duration": 14,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var _renderWithRouter34 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithDocumentsReceivedForTrackedItem\n  }))),\n  container = _renderWithRouter34.container,\n  getByText = _renderWithRouter34.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(6);\ngetByText('May 2, 2024');\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('May 10, 2024');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('May 20, 2024');\ngetByText(\"We opened a request: \\\"Submitted and received Request\\\"\");\ngetByText('May 22, 2024');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('May 24, 2024');\ngetByText(\"We received your document(s) for the request: \\\"Submitted and received Request\\\"\");\ngetByText('May 27, 2024');\ngetByText(\"We completed a review for the request: \\\"Submitted and received Request\\\"\");",
                          "err": {},
                          "uuid": "bd5fe336-a78c-40be-bb27-51c5a0ab2fd5",
                          "parentUUID": "539b14e3-e998-40ba-a8a6-4739c1246be3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "3bfc744b-4bbd-4d19-b103-f95e7669e5a4",
                          "title": "when cst5103UpdateEnabled and has an Automated 5103 Notice Response item",
                          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should render list",
                              "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim is in phase 4 when cst5103UpdateEnabled and has an Automated 5103 Notice Response item should render list",
                              "timedOut": false,
                              "duration": 8,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "var _renderWithRouter35 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false, true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithAuto5103Notice\n  }))),\n  container = _renderWithRouter35.container,\n  getByText = _renderWithRouter35.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('Request for you');\ngetByText('We opened a request: \"List of evidence we may need (5103 notice)\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                              "err": {},
                              "uuid": "db1a454e-c4cc-40cc-834e-7259237be854",
                              "parentUUID": "3bfc744b-4bbd-4d19-b103-f95e7669e5a4",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "db1a454e-c4cc-40cc-834e-7259237be854"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 8,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 10000
                        },
                        {
                          "uuid": "d00e3a11-7fd1-4b1f-97da-fe7ca318d87d",
                          "title": "when cst5103UpdateEnabled disabled and has an Automated 5103 Notice Response item",
                          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should render list",
                              "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim is in phase 4 when cst5103UpdateEnabled disabled and has an Automated 5103 Notice Response item should render list",
                              "timedOut": false,
                              "duration": 4,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "var _renderWithRouter36 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithAuto5103Notice\n  }))),\n  container = _renderWithRouter36.container,\n  getByText = _renderWithRouter36.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(4);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('Request for you');\ngetByText('We opened a request: \"Automated 5103 Notice Response\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                              "err": {},
                              "uuid": "d51b0711-98ea-4b4e-bfe0-ff60ddb39e41",
                              "parentUUID": "d00e3a11-7fd1-4b1f-97da-fe7ca318d87d",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "d51b0711-98ea-4b4e-bfe0-ff60ddb39e41"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 4,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 10000
                        },
                        {
                          "uuid": "28668fd9-50b5-447d-8912-a7298954725d",
                          "title": "when cst5103UpdateEnabled and has a closed Automated 5103 Notice Response item",
                          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should render list",
                              "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim is in phase 4 when cst5103UpdateEnabled and has a closed Automated 5103 Notice Response item should render list",
                              "timedOut": false,
                              "duration": 4,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "var _renderWithRouter37 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false, true)\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithClosed5103Notice\n  }))),\n  container = _renderWithRouter37.container,\n  getByText = _renderWithRouter37.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(5);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText(\"We opened a request: \\\"List of evidence we may need (5103 notice)\\\"\");\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('We closed a request: \"List of evidence we may need (5103 notice)\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                              "err": {},
                              "uuid": "b529c9b8-43c7-4de9-9bab-f990d52270e7",
                              "parentUUID": "28668fd9-50b5-447d-8912-a7298954725d",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "b529c9b8-43c7-4de9-9bab-f990d52270e7"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 4,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 10000
                        },
                        {
                          "uuid": "d13c265a-e839-469b-a8e2-791583be5c55",
                          "title": "when cst5103UpdateEnabled disabled and has a closed Automated 5103 Notice Response item",
                          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "file": "/src/applications/claims-status/tests/components/claim-status-tab/RecentActivity.unit.spec.jsx",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should render list",
                              "fullTitle": "<RecentActivity> when cstClaimPhasesEnabled disabled when claim has trackedItems when claim is in phase 4 when cst5103UpdateEnabled disabled and has a closed Automated 5103 Notice Response item should render list",
                              "timedOut": false,
                              "duration": 12,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "var _renderWithRouter38 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_RecentActivity.default, {\n    claim: openClaimStep4WithClosed5103Notice\n  }))),\n  container = _renderWithRouter38.container,\n  getByText = _renderWithRouter38.getByText;\nvar recentActivityList = (0, _index.$)('ol', container);\n(0, _chai.expect)(recentActivityList).to.exist;\n(0, _chai.expect)((0, _react2.within)(recentActivityList).getAllByRole('listitem').length).to.equal(5);\ngetByText('Your claim moved into Step 1: Claim received');\ngetByText('Your claim moved into Step 2: Initial review');\ngetByText(\"We opened a request: \\\"5103 Notice Response\\\"\");\ngetByText('Your claim moved into Step 3: Evidence gathering, review, and decision');\ngetByText('We closed a request: \"5103 Notice Response\"');\n(0, _chai.expect)((0, _index.$)('va-pagination', container)).not.to.exist;",
                              "err": {},
                              "uuid": "0404a343-c54c-4a45-bb1e-aa188d7a2c5a",
                              "parentUUID": "d13c265a-e839-469b-a8e2-791583be5c55",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "0404a343-c54c-4a45-bb1e-aa188d7a2c5a"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 12,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 10000
                        }
                      ],
                      "passes": [
                        "8dde188b-005e-44ab-a834-a7747a1ab8be",
                        "a75b3ee3-fc78-4e31-a566-d5224b1cd63c",
                        "c57a619c-f3e9-4e27-9a16-30347ada2a4c",
                        "bd5fe336-a78c-40be-bb27-51c5a0ab2fd5"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 39,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9143d183-b48f-4c2f-a962-503e836e8c76",
          "title": "<WhatWeAreDoing>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "07b0b602-b7de-4f17-85fd-4004eac6fc9a",
              "title": "cstClaimPhases feature flag enabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "7716c8f1-ab46-4ea8-a26c-5813eb1df6c3",
                  "title": "claim is a disability compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render a WhatWereDoing section when claim phase 1",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 1",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha = compensationClaimPhase1.attributes,\n  status = _compensationClaimPha.status,\n  claimPhaseDates = _compensationClaimPha.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseDates.latestPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter.getByText,\n  getByRole = _renderWithRouter.getByRole;\ngetByText((0, _helpers.getClaimPhaseTypeHeaderText)(claimPhaseType));\ngetByText((0, _helpers.getClaimPhaseTypeDescription)(claimPhaseType));\ngetByText('Moved to this step on February 8, 2023');\n(0, _chai.expect)(getByRole('link')).to.have.text('Learn more about this step');",
                      "err": {},
                      "uuid": "2a0eb6f0-5e84-4599-91fb-38cb818b395b",
                      "parentUUID": "7716c8f1-ab46-4ea8-a26c-5813eb1df6c3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 2",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 2",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha2 = compensationClaimPhase2.attributes,\n  status = _compensationClaimPha2.status,\n  claimPhaseDates = _compensationClaimPha2.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha2.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter2.getByText,\n  getByRole = _renderWithRouter2.getByRole;\ngetByText((0, _helpers.getClaimPhaseTypeHeaderText)(claimPhaseType));\ngetByText((0, _helpers.getClaimPhaseTypeDescription)(claimPhaseType));\ngetByText('Moved to this step on February 8, 2023');\n(0, _chai.expect)(getByRole('link')).to.have.text('Learn more about this step');",
                      "err": {},
                      "uuid": "7429ea38-8cf7-473f-91ef-c684a5787ec9",
                      "parentUUID": "7716c8f1-ab46-4ea8-a26c-5813eb1df6c3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 3",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 3",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha3 = compensationClaimPhase3.attributes,\n  status = _compensationClaimPha3.status,\n  claimPhaseDates = _compensationClaimPha3.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha3.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter3.getByText,\n  getByRole = _renderWithRouter3.getByRole;\ngetByText((0, _helpers.getClaimPhaseTypeHeaderText)(claimPhaseType));\ngetByText((0, _helpers.getClaimPhaseTypeDescription)(claimPhaseType));\ngetByText('Moved to this step on February 8, 2023');\n(0, _chai.expect)(getByRole('link')).to.have.text('Learn more about this step');",
                      "err": {},
                      "uuid": "7d270aa7-5e2d-4577-8c19-a2d988e49158",
                      "parentUUID": "7716c8f1-ab46-4ea8-a26c-5813eb1df6c3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 4",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 4",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha4 = compensationClaimPhase4.attributes,\n  status = _compensationClaimPha4.status,\n  claimPhaseDates = _compensationClaimPha4.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha4.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter4.getByText,\n  getByRole = _renderWithRouter4.getByRole;\ngetByText((0, _helpers.getClaimPhaseTypeHeaderText)(claimPhaseType));\ngetByText((0, _helpers.getClaimPhaseTypeDescription)(claimPhaseType));\ngetByText('Moved to this step on February 8, 2023');\n(0, _chai.expect)(getByRole('link')).to.have.text('Learn more about this step');",
                      "err": {},
                      "uuid": "132f37dc-83ad-4725-bc5d-659180173c2c",
                      "parentUUID": "7716c8f1-ab46-4ea8-a26c-5813eb1df6c3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 5",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 5",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha5 = compensationClaimPhase5.attributes,\n  status = _compensationClaimPha5.status,\n  claimPhaseDates = _compensationClaimPha5.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha5.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter5 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter5.getByText,\n  getByRole = _renderWithRouter5.getByRole;\ngetByText((0, _helpers.getClaimPhaseTypeHeaderText)(claimPhaseType));\ngetByText((0, _helpers.getClaimPhaseTypeDescription)(claimPhaseType));\ngetByText('Moved to this step on February 8, 2023');\n(0, _chai.expect)(getByRole('link')).to.have.text('Learn more about this step');",
                      "err": {},
                      "uuid": "2650a642-5557-4ced-8a9a-818206e093fc",
                      "parentUUID": "7716c8f1-ab46-4ea8-a26c-5813eb1df6c3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 6",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 6",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha6 = compensationClaimPhase6.attributes,\n  status = _compensationClaimPha6.status,\n  claimPhaseDates = _compensationClaimPha6.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha6.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter6 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter6.getByText,\n  getByRole = _renderWithRouter6.getByRole;\ngetByText((0, _helpers.getClaimPhaseTypeHeaderText)(claimPhaseType));\ngetByText((0, _helpers.getClaimPhaseTypeDescription)(claimPhaseType));\ngetByText('Moved to this step on February 8, 2023');\n(0, _chai.expect)(getByRole('link')).to.have.text('Learn more about this step');",
                      "err": {},
                      "uuid": "346f6bcd-e3ef-4594-835a-efc192e41a5e",
                      "parentUUID": "7716c8f1-ab46-4ea8-a26c-5813eb1df6c3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 7",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 7",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha7 = compensationClaimPhase7.attributes,\n  status = _compensationClaimPha7.status,\n  claimPhaseDates = _compensationClaimPha7.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha7.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter7 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter7.getByText,\n  getByRole = _renderWithRouter7.getByRole;\ngetByText((0, _helpers.getClaimPhaseTypeHeaderText)(claimPhaseType));\ngetByText((0, _helpers.getClaimPhaseTypeDescription)(claimPhaseType));\ngetByText('Moved to this step on February 8, 2023');\n(0, _chai.expect)(getByRole('link')).to.have.text('Learn more about this step');",
                      "err": {},
                      "uuid": "aa1a6709-8af3-435f-b2a1-9c28918a3ef4",
                      "parentUUID": "7716c8f1-ab46-4ea8-a26c-5813eb1df6c3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2a0eb6f0-5e84-4599-91fb-38cb818b395b",
                    "7429ea38-8cf7-473f-91ef-c684a5787ec9",
                    "7d270aa7-5e2d-4577-8c19-a2d988e49158",
                    "132f37dc-83ad-4725-bc5d-659180173c2c",
                    "2650a642-5557-4ced-8a9a-818206e093fc",
                    "346f6bcd-e3ef-4594-835a-efc192e41a5e",
                    "aa1a6709-8af3-435f-b2a1-9c28918a3ef4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 43,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "1ad5987e-d021-443c-ae33-6784e7be78ba",
                  "title": "claim is not a disability compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render a WhatWereDoing section when claim phase 1",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 1",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase = dependencyClaimPhase1.attributes,\n  status = _dependencyClaimPhase.status,\n  claimPhaseDates = _dependencyClaimPhase.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter8 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter8.getByText,\n  getByRole = _renderWithRouter8.getByRole,\n  queryByText = _renderWithRouter8.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "7263e1da-ff68-4df6-bd27-f31fb843883a",
                      "parentUUID": "1ad5987e-d021-443c-ae33-6784e7be78ba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 2",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 2",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase2 = dependencyClaimPhase2.attributes,\n  status = _dependencyClaimPhase2.status,\n  claimPhaseDates = _dependencyClaimPhase2.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase2.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter9 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter9.getByText,\n  getByRole = _renderWithRouter9.getByRole,\n  queryByText = _renderWithRouter9.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "2f3b51c3-c08d-4025-acfd-00b190d5b1b4",
                      "parentUUID": "1ad5987e-d021-443c-ae33-6784e7be78ba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 3",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 3",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase3 = dependencyClaimPhase3.attributes,\n  status = _dependencyClaimPhase3.status,\n  claimPhaseDates = _dependencyClaimPhase3.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase3.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter10 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter10.getByText,\n  getByRole = _renderWithRouter10.getByRole,\n  queryByText = _renderWithRouter10.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "321dad4b-146a-48cb-a650-6c2ab055e8f3",
                      "parentUUID": "1ad5987e-d021-443c-ae33-6784e7be78ba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 4",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 4",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase4 = dependencyClaimPhase4.attributes,\n  status = _dependencyClaimPhase4.status,\n  claimPhaseDates = _dependencyClaimPhase4.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase4.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter11 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter11.getByText,\n  getByRole = _renderWithRouter11.getByRole,\n  queryByText = _renderWithRouter11.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "f89a7533-a009-4f7c-aa40-7078d6e998bf",
                      "parentUUID": "1ad5987e-d021-443c-ae33-6784e7be78ba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 5",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 5",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase5 = dependencyClaimPhase5.attributes,\n  status = _dependencyClaimPhase5.status,\n  claimPhaseDates = _dependencyClaimPhase5.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase5.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter12 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter12.getByText,\n  getByRole = _renderWithRouter12.getByRole,\n  queryByText = _renderWithRouter12.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "8a54d56b-860d-4338-a6b2-a0396486e7c1",
                      "parentUUID": "1ad5987e-d021-443c-ae33-6784e7be78ba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 6",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 6",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase6 = dependencyClaimPhase6.attributes,\n  status = _dependencyClaimPhase6.status,\n  claimPhaseDates = _dependencyClaimPhase6.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase6.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter13 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter13.getByText,\n  getByRole = _renderWithRouter13.getByRole,\n  queryByText = _renderWithRouter13.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "75cef41a-4ea3-4039-b8e0-f76d7631956e",
                      "parentUUID": "1ad5987e-d021-443c-ae33-6784e7be78ba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 7",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag enabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 7",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase7 = dependencyClaimPhase7.attributes,\n  status = _dependencyClaimPhase7.status,\n  claimPhaseDates = _dependencyClaimPhase7.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase7.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter14 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter14.getByText,\n  getByRole = _renderWithRouter14.getByRole,\n  queryByText = _renderWithRouter14.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "e58bed5e-492e-425f-9aea-5ac78d3283ad",
                      "parentUUID": "1ad5987e-d021-443c-ae33-6784e7be78ba",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7263e1da-ff68-4df6-bd27-f31fb843883a",
                    "2f3b51c3-c08d-4025-acfd-00b190d5b1b4",
                    "321dad4b-146a-48cb-a650-6c2ab055e8f3",
                    "f89a7533-a009-4f7c-aa40-7078d6e998bf",
                    "8a54d56b-860d-4338-a6b2-a0396486e7c1",
                    "75cef41a-4ea3-4039-b8e0-f76d7631956e",
                    "e58bed5e-492e-425f-9aea-5ac78d3283ad"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 29,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "1ddc3836-a349-4a25-9801-7f616e8722eb",
              "title": "cstClaimPhases feature flag disabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "c9baba29-c843-4d30-bd9e-a2b58a2a3b78",
                  "title": "claim is a disability compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render a WhatWereDoing section when claim phase 1",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 1",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha8 = compensationClaimPhase1.attributes,\n  status = _compensationClaimPha8.status,\n  claimPhaseDates = _compensationClaimPha8.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha8.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter15 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter15.getByText,\n  getByRole = _renderWithRouter15.getByRole,\n  queryByText = _renderWithRouter15.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "cc634082-6a1b-44da-9bcf-4746bcf4998f",
                      "parentUUID": "c9baba29-c843-4d30-bd9e-a2b58a2a3b78",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 2",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 2",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha9 = compensationClaimPhase2.attributes,\n  status = _compensationClaimPha9.status,\n  claimPhaseDates = _compensationClaimPha9.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha9.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter16 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter16.getByText,\n  getByRole = _renderWithRouter16.getByRole,\n  queryByText = _renderWithRouter16.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "40ad4d86-bbf5-4ea9-8af9-a4228952b883",
                      "parentUUID": "c9baba29-c843-4d30-bd9e-a2b58a2a3b78",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 3",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 3",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha10 = compensationClaimPhase3.attributes,\n  status = _compensationClaimPha10.status,\n  claimPhaseDates = _compensationClaimPha10.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha10.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter17 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter17.getByText,\n  getByRole = _renderWithRouter17.getByRole,\n  queryByText = _renderWithRouter17.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "8a6687e3-faf7-4ad4-ae26-90583d251ede",
                      "parentUUID": "c9baba29-c843-4d30-bd9e-a2b58a2a3b78",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 4",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 4",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha11 = compensationClaimPhase4.attributes,\n  status = _compensationClaimPha11.status,\n  claimPhaseDates = _compensationClaimPha11.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha11.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter18 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter18.getByText,\n  getByRole = _renderWithRouter18.getByRole,\n  queryByText = _renderWithRouter18.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "8113fe72-f30c-47a4-8f83-9fa701cc498a",
                      "parentUUID": "c9baba29-c843-4d30-bd9e-a2b58a2a3b78",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 5",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 5",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha12 = compensationClaimPhase5.attributes,\n  status = _compensationClaimPha12.status,\n  claimPhaseDates = _compensationClaimPha12.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha12.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter19 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter19.getByText,\n  getByRole = _renderWithRouter19.getByRole,\n  queryByText = _renderWithRouter19.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "3b1fd0c3-3a18-4b18-8039-292186fefdb8",
                      "parentUUID": "c9baba29-c843-4d30-bd9e-a2b58a2a3b78",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 6",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 6",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha13 = compensationClaimPhase6.attributes,\n  status = _compensationClaimPha13.status,\n  claimPhaseDates = _compensationClaimPha13.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha13.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter20 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter20.getByText,\n  getByRole = _renderWithRouter20.getByRole,\n  queryByText = _renderWithRouter20.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "37c5869a-e2de-4642-9431-772e666ca473",
                      "parentUUID": "c9baba29-c843-4d30-bd9e-a2b58a2a3b78",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 7",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is a disability compensation claim should render a WhatWereDoing section when claim phase 7",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _compensationClaimPha14 = compensationClaimPhase7.attributes,\n  status = _compensationClaimPha14.status,\n  claimPhaseDates = _compensationClaimPha14.claimPhaseDates,\n  claimTypeCode = _compensationClaimPha14.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter21 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter21.getByText,\n  getByRole = _renderWithRouter21.getByRole,\n  queryByText = _renderWithRouter21.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "6b99a4b5-8bf7-40e3-a8ab-da92145c3562",
                      "parentUUID": "c9baba29-c843-4d30-bd9e-a2b58a2a3b78",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cc634082-6a1b-44da-9bcf-4746bcf4998f",
                    "40ad4d86-bbf5-4ea9-8af9-a4228952b883",
                    "8a6687e3-faf7-4ad4-ae26-90583d251ede",
                    "8113fe72-f30c-47a4-8f83-9fa701cc498a",
                    "3b1fd0c3-3a18-4b18-8039-292186fefdb8",
                    "37c5869a-e2de-4642-9431-772e666ca473",
                    "6b99a4b5-8bf7-40e3-a8ab-da92145c3562"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 30,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "709ce9d1-a2a6-4bde-ac14-49ade976ee23",
                  "title": "claim is not a disability compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/claim-status-tab/WhatWeAreDoing.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render a WhatWereDoing section when claim phase 1",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 1",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase8 = dependencyClaimPhase1.attributes,\n  status = _dependencyClaimPhase8.status,\n  claimPhaseDates = _dependencyClaimPhase8.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase8.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter22 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter22.getByText,\n  getByRole = _renderWithRouter22.getByRole,\n  queryByText = _renderWithRouter22.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "b3348034-9d17-450a-b419-bf07f1d6de73",
                      "parentUUID": "709ce9d1-a2a6-4bde-ac14-49ade976ee23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 2",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 2",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase9 = dependencyClaimPhase2.attributes,\n  status = _dependencyClaimPhase9.status,\n  claimPhaseDates = _dependencyClaimPhase9.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase9.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter23 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter23.getByText,\n  getByRole = _renderWithRouter23.getByRole,\n  queryByText = _renderWithRouter23.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "4050028b-6a73-4886-80c2-bc68fd7f88f6",
                      "parentUUID": "709ce9d1-a2a6-4bde-ac14-49ade976ee23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 3",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 3",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase10 = dependencyClaimPhase3.attributes,\n  status = _dependencyClaimPhase10.status,\n  claimPhaseDates = _dependencyClaimPhase10.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase10.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter24 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter24.getByText,\n  getByRole = _renderWithRouter24.getByRole,\n  queryByText = _renderWithRouter24.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "ef2f70ec-4230-4320-ad10-6526e4912ec9",
                      "parentUUID": "709ce9d1-a2a6-4bde-ac14-49ade976ee23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 4",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 4",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase11 = dependencyClaimPhase4.attributes,\n  status = _dependencyClaimPhase11.status,\n  claimPhaseDates = _dependencyClaimPhase11.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase11.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter25 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter25.getByText,\n  getByRole = _renderWithRouter25.getByRole,\n  queryByText = _renderWithRouter25.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "7c1f7319-f01e-4783-aa4e-7300d577a7a6",
                      "parentUUID": "709ce9d1-a2a6-4bde-ac14-49ade976ee23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 5",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 5",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase12 = dependencyClaimPhase5.attributes,\n  status = _dependencyClaimPhase12.status,\n  claimPhaseDates = _dependencyClaimPhase12.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase12.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter26 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter26.getByText,\n  getByRole = _renderWithRouter26.getByRole,\n  queryByText = _renderWithRouter26.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "2fd801b9-9ebc-4777-bac9-d14c0d152744",
                      "parentUUID": "709ce9d1-a2a6-4bde-ac14-49ade976ee23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 6",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 6",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase13 = dependencyClaimPhase6.attributes,\n  status = _dependencyClaimPhase13.status,\n  claimPhaseDates = _dependencyClaimPhase13.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase13.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter27 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter27.getByText,\n  getByRole = _renderWithRouter27.getByRole,\n  queryByText = _renderWithRouter27.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "beb2c42f-6137-4b03-a4c5-7c55b0fd0272",
                      "parentUUID": "709ce9d1-a2a6-4bde-ac14-49ade976ee23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when claim phase 7",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is not a disability compensation claim should render a WhatWereDoing section when claim phase 7",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase14 = dependencyClaimPhase7.attributes,\n  status = _dependencyClaimPhase14.status,\n  claimPhaseDates = _dependencyClaimPhase14.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase14.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar _renderWithRouter28 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter28.getByText,\n  getByRole = _renderWithRouter28.getByRole,\n  queryByText = _renderWithRouter28.queryByText;\ngetByText((0, _helpers.getStatusDescription)(status));\ngetByText((0, _helpers.getClaimStatusDescription)(status));\n(0, _chai.expect)(queryByText('Moved to this step on February 8, 2023')).to.not.exist;\n(0, _chai.expect)(getByRole('link')).to.have.text('Overview of the process');",
                      "err": {},
                      "uuid": "0c49b376-22a1-4dfb-8917-bc91948cad0f",
                      "parentUUID": "709ce9d1-a2a6-4bde-ac14-49ade976ee23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render a WhatWereDoing section when current phase back is set to true",
                      "fullTitle": "<WhatWeAreDoing> cstClaimPhases feature flag disabled claim is not a disability compensation claim should render a WhatWereDoing section when current phase back is set to true",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _dependencyClaimPhase15 = dependencyClaimPhase3.attributes,\n  status = _dependencyClaimPhase15.status,\n  claimPhaseDates = _dependencyClaimPhase15.claimPhaseDates,\n  claimTypeCode = _dependencyClaimPhase15.claimTypeCode;\nvar claimPhaseType = claimPhaseDates.latestPhaseType;\nvar currentPhaseBack = claimPhaseDates.currentPhaseBack;\nvar _renderWithRouter29 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_WhatWeAreDoing.default, {\n    status: status,\n    claimPhaseType: claimPhaseType,\n    currentPhaseBack: currentPhaseBack,\n    phaseChangeDate: claimPhaseDates.phaseChangeDate,\n    claimTypeCode: claimTypeCode\n  }))),\n  getByText = _renderWithRouter29.getByText;\ngetByText('We moved your claim back to this step because we needed to find or review more evidence');",
                      "err": {},
                      "uuid": "e051d980-42a8-4260-83f4-fe5bad120013",
                      "parentUUID": "709ce9d1-a2a6-4bde-ac14-49ade976ee23",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b3348034-9d17-450a-b419-bf07f1d6de73",
                    "4050028b-6a73-4886-80c2-bc68fd7f88f6",
                    "ef2f70ec-4230-4320-ad10-6526e4912ec9",
                    "7c1f7319-f01e-4783-aa4e-7300d577a7a6",
                    "2fd801b9-9ebc-4777-bac9-d14c0d152744",
                    "beb2c42f-6137-4b03-a4c5-7c55b0fd0272",
                    "0c49b376-22a1-4dfb-8917-bc91948cad0f",
                    "e051d980-42a8-4260-83f4-fe5bad120013"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 50,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "5bf0b1c4-c14f-46c7-83ef-716c247d8d34",
          "title": "<WhatYouNeedToDo>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/WhatYouNeedToDo.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/claim-status-tab/WhatYouNeedToDo.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render no-documents description when there are no tracked items or standard 5103",
              "fullTitle": "<WhatYouNeedToDo> should render no-documents description when there are no tracked items or standard 5103",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  attributes: {\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION',\n    closeDate: null,\n    evidenceWaiverSubmitted5103: true,\n    claimPhaseDates: {\n      latestPhaseType: 'GATHERING_OF_EVIDENCE',\n      previousPhases: {\n        phase1CompleteDate: '2024-01-17',\n        phase2CompleteDate: '2024-01-18'\n      }\n    }\n  }\n};\nvar _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore\n  }, /*#__PURE__*/_react.default.createElement(_WhatYouNeedToDo.default, {\n    claim: claim\n  }))),\n  container = _render.container,\n  getByText = _render.getByText;\ngetByText(nothingNeededText);\n(0, _chai.expect)((0, _index.$)('va-alert', container)).not.to.exist;",
              "err": {},
              "uuid": "f6b06acb-53c6-404f-b507-b941e0383b83",
              "parentUUID": "5bf0b1c4-c14f-46c7-83ef-716c247d8d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows va-alert when there is a tracked item",
              "fullTitle": "<WhatYouNeedToDo> shows va-alert when there is a tracked item",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  id: 1,\n  status: 'EVIDENCE_GATHERING_REVIEW_DECISION',\n  closeDate: null,\n  evidenceWaiverSubmitted5103: false,\n  attributes: {\n    claimPhaseDates: {\n      latestPhaseType: 'GATHERING_OF_EVIDENCE',\n      previousPhases: {\n        phase1CompleteDate: '2024-01-17',\n        phase2CompleteDate: '2024-01-18'\n      }\n    },\n    trackedItems: [{\n      id: 123,\n      status: 'NEEDED_FROM_YOU'\n    }]\n  }\n};\nvar _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore\n  }, /*#__PURE__*/_react.default.createElement(_WhatYouNeedToDo.default, {\n    claim: claim\n  }))),\n  container = _renderWithRouter.container,\n  queryByText = _renderWithRouter.queryByText;\n(0, _chai.expect)(queryByText(nothingNeededText)).not.to.exist;\n(0, _chai.expect)((0, _index.$)('va-alert', container)).to.exist;",
              "err": {},
              "uuid": "ce8ae824-16b1-4ad2-bfcf-963875862238",
              "parentUUID": "5bf0b1c4-c14f-46c7-83ef-716c247d8d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shouldn’t indicate that nothing is needed when files are needed",
              "fullTitle": "<WhatYouNeedToDo> shouldn’t indicate that nothing is needed when files are needed",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  id: 1,\n  status: 'EVIDENCE_GATHERING_REVIEW_DECISION',\n  closeDate: null,\n  evidenceWaiverSubmitted5103: false,\n  attributes: {\n    claimPhaseDates: {\n      latestPhaseType: 'GATHERING_OF_EVIDENCE',\n      previousPhases: {\n        phase1CompleteDate: '2024-01-17',\n        phase2CompleteDate: '2024-01-18'\n      }\n    },\n    trackedItems: [{\n      id: 123,\n      status: 'NEEDED_FROM_YOU'\n    }]\n  }\n};\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore\n  }, /*#__PURE__*/_react.default.createElement(_WhatYouNeedToDo.default, {\n    claim: claim\n  }))),\n  container = _renderWithRouter2.container,\n  queryByText = _renderWithRouter2.queryByText;\n(0, _chai.expect)(queryByText(nothingNeededText)).not.to.exist;\n(0, _chai.expect)((0, _index.$)('va-alert', container)).to.exist;",
              "err": {},
              "uuid": "044aff08-c40e-41b2-913f-afad48626562",
              "parentUUID": "5bf0b1c4-c14f-46c7-83ef-716c247d8d34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "ad3f6246-9b8b-4e4e-91a1-5864fd35c21b",
              "title": "when claim has a tracked item with an automated 5103 and a standard 5103",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/claim-status-tab/WhatYouNeedToDo.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/claim-status-tab/WhatYouNeedToDo.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shows va-alert for automated 5103 notice when files are needed",
                  "fullTitle": "<WhatYouNeedToDo> when claim has a tracked item with an automated 5103 and a standard 5103 shows va-alert for automated 5103 notice when files are needed",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION',\n    closeDate: null,\n    evidenceWaiverSubmitted5103: false,\n    claimPhaseDates: {\n      latestPhaseType: 'GATHERING_OF_EVIDENCE',\n      previousPhases: {\n        phase1CompleteDate: '2024-01-17',\n        phase2CompleteDate: '2024-01-18'\n      }\n    },\n    trackedItems: [{\n      description: 'Automated 5103 Notice Response',\n      displayName: 'Automated 5103 Notice Response',\n      id: 467558,\n      overdue: true,\n      requestedDate: '2024-01-19',\n      status: 'NEEDED_FROM_YOU',\n      suspenseDate: '2024-03-07',\n      uploadsAllowed: true\n    }]\n  }\n};\nvar _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore\n  }, /*#__PURE__*/_react.default.createElement(_WhatYouNeedToDo.default, {\n    claim: claim\n  }))),\n  container = _renderWithRouter3.container,\n  getByText = _renderWithRouter3.getByText,\n  queryByText = _renderWithRouter3.queryByText,\n  getByTestId = _renderWithRouter3.getByTestId;\n(0, _chai.expect)(queryByText(nothingNeededText)).not.to.exist;\n(0, _chai.expect)((0, _index.$)('va-alert', container)).to.exist;\n(0, _chai.expect)(getByTestId(\"item-\".concat(claim.attributes.trackedItems[0].id))).to.exist;\ngetByText('Automated 5103 Notice Response');",
                  "err": {},
                  "uuid": "b5ee67c4-c27a-4004-96c6-ad2e0b9e349e",
                  "parentUUID": "ad3f6246-9b8b-4e4e-91a1-5864fd35c21b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5ee67c4-c27a-4004-96c6-ad2e0b9e349e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "f6b06acb-53c6-404f-b507-b941e0383b83",
            "ce8ae824-16b1-4ad2-bfcf-963875862238",
            "044aff08-c40e-41b2-913f-afad48626562"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b2f02576-8a7a-4e54-9e82-4602b8f8570f",
          "title": "ClaimContentionList",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimContentionList.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/ClaimContentionList.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "renders the first 3 contentions by default",
              "fullTitle": "ClaimContentionList renders the first 3 contentions by default",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimContentionList.default, {\n    contentions: mockContentions\n  })),\n  queryByText = _render.queryByText;\n(0, _chai.expect)(queryByText(mockContentions[_ClaimContentionList.MAX_CONTENTIONS - 1].name)).to.exist;\n(0, _chai.expect)(queryByText(mockContentions[_ClaimContentionList.MAX_CONTENTIONS].name)).to.not.exist;",
              "err": {},
              "uuid": "52d1c068-35ec-42f8-8348-c14012b23abe",
              "parentUUID": "b2f02576-8a7a-4e54-9e82-4602b8f8570f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a button to show all contentions if there are more than 3",
              "fullTitle": "ClaimContentionList should render a button to show all contentions if there are more than 3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimContentionList.default, {\n    contentions: mockContentions\n  })),\n  container = _render2.container;\n(0, _chai.expect)((0, _index.$)('.show-all-button', container)).to.exist;",
              "err": {},
              "uuid": "4e729e5a-5f80-4904-84bd-0161ef6558fd",
              "parentUUID": "b2f02576-8a7a-4e54-9e82-4602b8f8570f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "renders a message when there are no contentions",
              "fullTitle": "ClaimContentionList renders a message when there are no contentions",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimContentionList.default, {\n    contentions: []\n  })),\n  getByText = _render3.getByText;\nvar noContentionsMessage = getByText('Not Available');\n(0, _chai.expect)(noContentionsMessage).to.exist;",
              "err": {},
              "uuid": "1b27778c-53a4-464d-9cc1-e57bd9ee848c",
              "parentUUID": "b2f02576-8a7a-4e54-9e82-4602b8f8570f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should mask contentions in DataDog (no PII)",
              "fullTitle": "ClaimContentionList should mask contentions in DataDog (no PII)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render4 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimContentionList.default, {\n    contentions: mockContentions\n  })),\n  container = _render4.container;\n(0, _chai.expect)((0, _index.$)('ul li', container).getAttribute('data-dd-privacy')).to.equal('mask');",
              "err": {},
              "uuid": "e46a33d6-f215-41f2-b904-29770a89f951",
              "parentUUID": "b2f02576-8a7a-4e54-9e82-4602b8f8570f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "52d1c068-35ec-42f8-8348-c14012b23abe",
            "4e729e5a-5f80-4904-84bd-0161ef6558fd",
            "1b27778c-53a4-464d-9cc1-e57bd9ee848c",
            "e46a33d6-f215-41f2-b904-29770a89f951"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b65c47c7-a145-4459-9428-7f1d297e6bed",
          "title": "<ClaimDetailLayout>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimDetailLayout.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/ClaimDetailLayout.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render loading indicator",
              "fullTitle": "<ClaimDetailLayout> should render loading indicator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimDetailLayout.default, {\n  loading: true\n}));\n(0, _chai.expect)(tree.everySubTree('va-loading-indicator')).not.to.be.empty;",
              "err": {},
              "uuid": "0d53ad67-7fec-42cb-9981-16f129971b05",
              "parentUUID": "b65c47c7-a145-4459-9428-7f1d297e6bed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render unavailable warning",
              "fullTitle": "<ClaimDetailLayout> should render unavailable warning",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = null;\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimDetailLayout.default, {\n  claim: claim\n}));\n(0, _chai.expect)(tree.everySubTree('ClaimsUnavailable')).to.have.lengthOf(1);",
              "err": {},
              "uuid": "b42cab35-fd75-4bbd-858d-53ccb25e6c84",
              "parentUUID": "b65c47c7-a145-4459-9428-7f1d297e6bed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render when the claim was submitted",
              "fullTitle": "<ClaimDetailLayout> should render when the claim was submitted",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  attributes: {\n    claimType: 'Compensation',\n    claimDate: '2023-11-23',\n    contentions: [{\n      name: 'Condition 1'\n    }, {\n      name: 'Condition 2'\n    }]\n  }\n};\nvar screen = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimDetailLayout.default, {\n  claim: claim\n}));\n(0, _chai.expect)(screen.getByRole('heading', {\n  level: 1\n})).to.contain.text('Received on November 23, 2023');",
              "err": {},
              "uuid": "e14967bb-7e57-40d3-b82f-be81bcb0d8a6",
              "parentUUID": "b65c47c7-a145-4459-9428-7f1d297e6bed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render adding details info if open",
              "fullTitle": "<ClaimDetailLayout> should render adding details info if open",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  attributes: {\n    closeDate: null,\n    contentions: [{\n      name: 'Condition 1'\n    }, {\n      name: 'Condition 2'\n    }],\n    status: 'INITIAL_REVIEW'\n  }\n};\nvar _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimDetailLayout.default, {\n    currentTab: \"Status\",\n    claim: claim\n  })),\n  getByText = _renderWithRouter.getByText,\n  container = _renderWithRouter.container;\n(0, _chai.expect)((0, _index.$)('va-alert', container)).to.exist;\ngetByText(\"We can't show all of the details of your claim. Please check back later.\");",
              "err": {},
              "uuid": "c1548917-07bc-4763-91ff-a8b00b433069",
              "parentUUID": "b65c47c7-a145-4459-9428-7f1d297e6bed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render adding details info if closed",
              "fullTitle": "<ClaimDetailLayout> should not render adding details info if closed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  attributes: {\n    closeDate: '2023-04-28',\n    contentions: [{\n      name: 'Condition 1'\n    }, {\n      name: 'Condition 2'\n    }],\n    status: 'COMPLETE'\n  }\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimDetailLayout.default, {\n  currentTab: \"Status\",\n  claim: claim\n}));\n(0, _chai.expect)(tree.everySubTree('AddingDetails')).to.be.empty;",
              "err": {},
              "uuid": "069be6ee-4181-492d-986e-c108ce16b65d",
              "parentUUID": "b65c47c7-a145-4459-9428-7f1d297e6bed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render 3 tabs",
              "fullTitle": "<ClaimDetailLayout> should render 3 tabs",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  attributes: {\n    claimType: 'Compensation',\n    claimDate: '2010-05-05',\n    contentions: [{\n      name: 'Condition 1'\n    }, {\n      name: 'Condition 2'\n    }]\n  }\n};\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimDetailLayout.default, {\n    currentTab: \"Files\",\n    claim: claim\n  })),\n  container = _renderWithRouter2.container;\nvar tabList = (0, _index.$)('.tabs', container);\n(0, _chai.expect)((0, _react2.within)(tabList).getAllByRole('listitem').length).to.equal(3);",
              "err": {},
              "uuid": "65489eca-6335-4c7b-a4e1-63431dbe5797",
              "parentUUID": "b65c47c7-a145-4459-9428-7f1d297e6bed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render normal info",
              "fullTitle": "<ClaimDetailLayout> should render normal info",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  attributes: {\n    claimType: 'Compensation',\n    claimDate: '2010-05-05',\n    contentions: [{\n      name: 'Condition 1'\n    }, {\n      name: 'Condition 2'\n    }]\n  }\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimDetailLayout.default, {\n  currentTab: \"Status\",\n  claim: claim\n}, /*#__PURE__*/_react.default.createElement(\"div\", {\n  className: \"child-content\"\n})));\n(0, _chai.expect)(tree.everySubTree('AddingDetails')).to.be.empty;\n(0, _chai.expect)(tree.everySubTree('.child-content')).not.to.be.empty;",
              "err": {},
              "uuid": "13889374-7615-4f36-84ce-df094123a1bc",
              "parentUUID": "b65c47c7-a145-4459-9428-7f1d297e6bed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render message",
              "fullTitle": "<ClaimDetailLayout> should render message",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  attributes: {\n    contentions: [{\n      name: 'Condition 1'\n    }, {\n      name: 'Condition 2'\n    }]\n  }\n};\nvar message = {\n  title: 'Test',\n  body: 'Testing'\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimDetailLayout.default, {\n  message: message,\n  claim: claim\n}));\n(0, _chai.expect)(tree.subTree('Notification')).not.to.be.false;",
              "err": {},
              "uuid": "1b00d190-36fe-4093-b0c7-d5dba9ae830b",
              "parentUUID": "b65c47c7-a145-4459-9428-7f1d297e6bed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render Notification and set focus on it",
              "fullTitle": "<ClaimDetailLayout> should render Notification and set focus on it",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "34e0b6e8-823f-4e9c-b2b1-9cf406577375",
              "parentUUID": "b65c47c7-a145-4459-9428-7f1d297e6bed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "36df461f-1984-4c0d-b4f7-cab8c2226508",
              "title": "<ClaimsBreadcrumbs>",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimDetailLayout.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/ClaimDetailLayout.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render default breadcrumbs for the Your Claims list page while loading",
                  "fullTitle": "<ClaimDetailLayout> <ClaimsBreadcrumbs> should render default breadcrumbs for the Your Claims list page while loading",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimDetailLayout.default, {\n  loading: true\n}));\n(0, _chai.expect)(tree.subTree('ClaimsBreadcrumbs').props.crumbs).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d60325db-e989-402e-956c-aa6770d67da3",
                  "parentUUID": "36df461f-1984-4c0d-b4f7-cab8c2226508",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render breadcrumbs specific to the claim once loaded",
                  "fullTitle": "<ClaimDetailLayout> <ClaimsBreadcrumbs> should render breadcrumbs specific to the claim once loaded",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  attributes: {\n    claimDate: '2024-09-04',\n    claimType: 'Dependency',\n    claimTypeCode: '130PSA'\n  }\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimDetailLayout.default, {\n  claim: claim,\n  currentTab: \"Status\"\n}));\n(0, _chai.expect)(tree.subTree('ClaimsBreadcrumbs').props.crumbs).to.deep.equal([{\n  href: '../status',\n  label: 'Status of your request to add or remove a dependent',\n  isRouterLink: true\n}]);",
                  "err": {},
                  "uuid": "12d1ac3a-81f3-4d3f-83d9-8b4a9c23851b",
                  "parentUUID": "36df461f-1984-4c0d-b4f7-cab8c2226508",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render a default breadcrumb if the claim fails to load",
                  "fullTitle": "<ClaimDetailLayout> <ClaimsBreadcrumbs> should render a default breadcrumb if the claim fails to load",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimDetailLayout.default, {\n  claim: null,\n  currentTab: \"Status\"\n}));\n(0, _chai.expect)(tree.subTree('ClaimsBreadcrumbs').props.crumbs).to.deep.equal([{\n  href: '../status',\n  label: 'Status of your claim',\n  isRouterLink: true\n}]);",
                  "err": {},
                  "uuid": "bfdf8955-8bb0-4612-a0f0-cba27913e004",
                  "parentUUID": "36df461f-1984-4c0d-b4f7-cab8c2226508",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d60325db-e989-402e-956c-aa6770d67da3",
                "12d1ac3a-81f3-4d3f-83d9-8b4a9c23851b",
                "bfdf8955-8bb0-4612-a0f0-cba27913e004"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "0d53ad67-7fec-42cb-9981-16f129971b05",
            "b42cab35-fd75-4bbd-858d-53ccb25e6c84",
            "e14967bb-7e57-40d3-b82f-be81bcb0d8a6",
            "c1548917-07bc-4763-91ff-a8b00b433069",
            "069be6ee-4181-492d-986e-c108ce16b65d",
            "65489eca-6335-4c7b-a4e1-63431dbe5797",
            "13889374-7615-4f36-84ce-df094123a1bc",
            "1b00d190-36fe-4093-b0c7-d5dba9ae830b",
            "34e0b6e8-823f-4e9c-b2b1-9cf406577375"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "01c6ae40-5da1-4fb7-83bc-8b4274c65670",
          "title": "<ClaimPage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimPage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/ClaimPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "calls getClaim when it is rendered",
              "fullTitle": "<ClaimPage> calls getClaim when it is rendered",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Reset sinon spies / set up props\nprops.getClaim = _sinon.default.spy();\n(0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPage.ClaimPage, props, /*#__PURE__*/_react.default.createElement(\"div\", null)));\n(0, _chai.expect)(props.getClaim.called).to.be.true;",
              "err": {},
              "uuid": "fecbd9b0-d263-4889-86a6-20fe486a58a3",
              "parentUUID": "01c6ae40-5da1-4fb7-83bc-8b4274c65670",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calls clearClaim when it unmounts",
              "fullTitle": "<ClaimPage> calls clearClaim when it unmounts",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "props.clearClaim = _sinon.default.spy();\nvar _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimPage.ClaimPage, props, /*#__PURE__*/_react.default.createElement(\"div\", null))),\n  unmount = _renderWithRouter.unmount;\nunmount();\n(0, _chai.expect)(props.clearClaim.called).to.be.true;",
              "err": {},
              "uuid": "dcecf598-60ee-4631-ab71-0b56b9777f8c",
              "parentUUID": "01c6ae40-5da1-4fb7-83bc-8b4274c65670",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fecbd9b0-d263-4889-86a6-20fe486a58a3",
            "dcecf598-60ee-4631-ab71-0b56b9777f8c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "90bf999e-f377-424d-a088-9ddb0b574286",
          "title": "<ClaimPhase>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimPhase.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/ClaimPhase.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be pending when \"current\" is less than \"phase\"",
              "fullTitle": "<ClaimPhase> should be pending when \"current\" is less than \"phase\"",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimPhase.default, {\n    current: 1,\n    phase: 2\n  })),\n  container = _render.container;\n(0, _chai.expect)((0, _index.$)('va-process-list-item', container).getAttribute('pending')).to.equal('true');",
              "err": {},
              "uuid": "5b6175b3-af6b-475e-bcc0-2a2529f01cc3",
              "parentUUID": "90bf999e-f377-424d-a088-9ddb0b574286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have a checkmark when \"current\" is greater than \"phase\"",
              "fullTitle": "<ClaimPhase> should have a checkmark when \"current\" is greater than \"phase\"",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimPhase.default, {\n    current: 2,\n    phase: 1\n  })),\n  container = _render2.container;\n(0, _chai.expect)((0, _index.$)('va-process-list-item', container).getAttribute('checkmark')).to.equal('true');",
              "err": {},
              "uuid": "110b8f0b-d552-47a4-a455-6085062ad425",
              "parentUUID": "90bf999e-f377-424d-a088-9ddb0b574286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be active when \"current\" is equal to \"phase\"",
              "fullTitle": "<ClaimPhase> should be active when \"current\" is equal to \"phase\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimPhase.default, {\n    current: 1,\n    phase: 1\n  })),\n  container = _render3.container;\n(0, _chai.expect)((0, _index.$)('va-process-list-item', container).getAttribute('active')).to.equal('true');",
              "err": {},
              "uuid": "788799c4-89fb-44ac-94c0-dc5ea4506182",
              "parentUUID": "90bf999e-f377-424d-a088-9ddb0b574286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the correct title for phase 1",
              "fullTitle": "<ClaimPhase> should show the correct title for phase 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render4 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimPhase.default, {\n    current: 1,\n    phase: 1\n  })),\n  container = _render4.container;\n(0, _chai.expect)((0, _index.$)('va-process-list-item', container).getAttribute('header')).to.equal('Claim received');",
              "err": {},
              "uuid": "b2e60a9f-5606-4d5c-85f5-a5cfd671229a",
              "parentUUID": "90bf999e-f377-424d-a088-9ddb0b574286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the correct title for phase 2",
              "fullTitle": "<ClaimPhase> should show the correct title for phase 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render5 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimPhase.default, {\n    current: 1,\n    phase: 2\n  })),\n  container = _render5.container;\n(0, _chai.expect)((0, _index.$)('va-process-list-item', container).getAttribute('header')).to.equal('Initial review');",
              "err": {},
              "uuid": "d8d91ff3-c06f-4d1c-90cc-532f09b5d4ed",
              "parentUUID": "90bf999e-f377-424d-a088-9ddb0b574286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the correct title for phase 3",
              "fullTitle": "<ClaimPhase> should show the correct title for phase 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render6 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimPhase.default, {\n    current: 1,\n    phase: 3\n  })),\n  container = _render6.container;\n(0, _chai.expect)((0, _index.$)('va-process-list-item', container).getAttribute('header')).to.equal('Evidence gathering, review, and decision');",
              "err": {},
              "uuid": "ee5372b8-2c1a-4ed6-a90a-2375f0dd7a8f",
              "parentUUID": "90bf999e-f377-424d-a088-9ddb0b574286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the correct title for phase 4",
              "fullTitle": "<ClaimPhase> should show the correct title for phase 4",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render7 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimPhase.default, {\n    current: 1,\n    phase: 4\n  })),\n  container = _render7.container;\n(0, _chai.expect)((0, _index.$)('va-process-list-item', container).getAttribute('header')).to.equal('Preparation for notification');",
              "err": {},
              "uuid": "4e4d3344-5019-49b9-8d69-5b30ed539df9",
              "parentUUID": "90bf999e-f377-424d-a088-9ddb0b574286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the correct title for phase 5",
              "fullTitle": "<ClaimPhase> should show the correct title for phase 5",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render8 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimPhase.default, {\n    current: 1,\n    phase: 5\n  })),\n  container = _render8.container;\n(0, _chai.expect)((0, _index.$)('va-process-list-item', container).getAttribute('header')).to.equal('Complete');",
              "err": {},
              "uuid": "4092fe2e-c74d-4d3c-8934-2716da35cb9d",
              "parentUUID": "90bf999e-f377-424d-a088-9ddb0b574286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show children elements",
              "fullTitle": "<ClaimPhase> should show children elements",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render9 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimPhase.default, {\n    current: 1,\n    phase: 5\n  }, /*#__PURE__*/_react.default.createElement(\"p\", null, \"Test\"))),\n  container = _render9.container;\n(0, _chai.expect)((0, _index.$)('va-process-list-item > p', container)).to.exist;",
              "err": {},
              "uuid": "e0eaac01-9e84-4b15-990f-e973189b0626",
              "parentUUID": "90bf999e-f377-424d-a088-9ddb0b574286",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b6175b3-af6b-475e-bcc0-2a2529f01cc3",
            "110b8f0b-d552-47a4-a455-6085062ad425",
            "788799c4-89fb-44ac-94c0-dc5ea4506182",
            "b2e60a9f-5606-4d5c-85f5-a5cfd671229a",
            "d8d91ff3-c06f-4d1c-90cc-532f09b5d4ed",
            "ee5372b8-2c1a-4ed6-a90a-2375f0dd7a8f",
            "4e4d3344-5019-49b9-8d69-5b30ed539df9",
            "4092fe2e-c74d-4d3c-8934-2716da35cb9d",
            "e0eaac01-9e84-4b15-990f-e973189b0626"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4dfd56ad-0fe7-45bc-ade3-6d2da98304bb",
          "title": "<ClaimsBreadcrumbs>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimsBreadcrumbs.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/ClaimsBreadcrumbs.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render base breadcrumbs",
              "fullTitle": "<ClaimsBreadcrumbs> should render base breadcrumbs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimsBreadcrumbs.default, null)),\n  container = _renderWithRouter.container;\nvar breadcrumbs = (0, _index.$)('va-breadcrumbs', container);\n(0, _chai.expect)(breadcrumbs.breadcrumbList[0].href).to.equal(_constants.CST_BREADCRUMB_BASE[0].href);\n(0, _chai.expect)(breadcrumbs.breadcrumbList[1].href).to.equal(_constants.CST_BREADCRUMB_BASE[1].href);",
              "err": {},
              "uuid": "8d2c80fd-1502-48ec-9891-00997d2513da",
              "parentUUID": "4dfd56ad-0fe7-45bc-ade3-6d2da98304bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d2c80fd-1502-48ec-9891-00997d2513da"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "38719919-9f8e-4ee7-b657-a7882d6dc276",
          "title": "<ClaimsListItem>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimsListItem.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/ClaimsListItem.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
              "title": "cstClaimPhases feature flag enabled and compenstaiton claim type code",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimsListItem.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/ClaimsListItem.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not show any flags and render proper fields",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should not show any flags and render proper fields",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimDate: '2024-06-08',\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'CLAIM_RECEIVED'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: false,\n    documentsNeeded: false,\n    status: 'CLAIM_RECEIVED'\n  }\n};\nvar _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  queryByRole = _renderWithRouter.queryByRole,\n  getByText = _renderWithRouter.getByText;\n(0, _chai.expect)(queryByRole('listitem')).not.to.exist;\ngetByText('Received on June 8, 2024');\ngetByText('Step 1 of 8: Claim received');\ngetByText('Moved to this step on June 8, 2024');",
                  "err": {},
                  "uuid": "31607e6b-9eca-4a96-8a88-5ff172ef8914",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show closed status",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should show closed status",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'COMPLETE'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'COMPLETE'\n  }\n};\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter2.getByText;\ngetByText('Step 8 of 8: Claim decided');",
                  "err": {},
                  "uuid": "d604a00a-0403-421a-b6a1-55ba5eb09185",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when UNDER_REVIEW",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should show the correct status when UNDER_REVIEW",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'UNDER_REVIEW'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'INITIAL_REVIEW'\n  }\n};\nvar _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter3.getByText;\ngetByText('Step 2 of 8: Initial review');",
                  "err": {},
                  "uuid": "8257f391-3d22-49e5-96be-e3f445f88811",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when REVIEW_OF_EVIDENCE",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should show the correct status when REVIEW_OF_EVIDENCE",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'REVIEW_OF_EVIDENCE'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION'\n  }\n};\nvar _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter4.getByText;\ngetByText('Step 4 of 8: Evidence review');",
                  "err": {},
                  "uuid": "f9c63cc8-9292-4aee-a2fc-3e103be257c5",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when PREPARATION_FOR_DECISION",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should show the correct status when PREPARATION_FOR_DECISION",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'PREPARATION_FOR_DECISION'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION'\n  }\n};\nvar _renderWithRouter5 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter5.getByText;\ngetByText('Step 5 of 8: Rating');",
                  "err": {},
                  "uuid": "60ef3019-5ce9-4742-b553-1edc7bfe7897",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when PENDING_DECISION_APPROVAL",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should show the correct status when PENDING_DECISION_APPROVAL",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'PENDING_DECISION_APPROVAL'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'PREPARATION_FOR_NOTIFICATION'\n  }\n};\nvar _renderWithRouter6 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter6.getByText;\ngetByText('Step 6 of 8: Preparing decision letter');",
                  "err": {},
                  "uuid": "bff3925e-110f-4fd0-9876-1b491557f8db",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when PREPARATION_FOR_NOTIFICATION",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should show the correct status when PREPARATION_FOR_NOTIFICATION",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'PREPARATION_FOR_NOTIFICATION'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'PREPARATION_FOR_NOTIFICATION'\n  }\n};\nvar _renderWithRouter7 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter7.getByText;\ngetByText('Step 7 of 8: Final review');",
                  "err": {},
                  "uuid": "6cfba6fd-6dbf-4682-922d-f47ed418535e",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show development letter flag",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should show development letter flag",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'GATHERING_OF_EVIDENCE'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: true,\n    documentsNeeded: false,\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION'\n  }\n};\nvar _renderWithRouter8 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter8.getByText;\ngetByText('We sent you a development letter');\ngetByText('Step 3 of 8: Evidence gathering');",
                  "err": {},
                  "uuid": "3fb252d8-31c8-4825-8279-eec1963cf850",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show decision letter flag decisionLetterSent is true, but not render the other flags",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should show decision letter flag decisionLetterSent is true, but not render the other flags",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'UNDER_REVIEW'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    decisionLetterSent: true,\n    developmentLetterSent: true,\n    documentsNeeded: true,\n    status: 'INITIAL_REVIEW'\n  }\n};\nvar _renderWithRouter9 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  queryByText = _renderWithRouter9.queryByText,\n  getByText = _renderWithRouter9.getByText;\n(0, _chai.expect)(queryByText('We sent you a development letter')).to.be.null;\n(0, _chai.expect)(queryByText('We requested more information from you:')).to.be.null;\n(0, _chai.expect)(getByText('You have a decision letter ready')).to.exist;\ngetByText('Step 2 of 8: Initial review');",
                  "err": {},
                  "uuid": "20d51c7b-4c8a-4989-9002-7e2bc1cda853",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show items needed flag",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should show items needed flag",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'UNDER_REVIEW'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: false,\n    documentsNeeded: true,\n    status: 'INITIAL_REVIEW'\n  }\n};\nvar _renderWithRouter10 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter10.getByText;\ngetByText('We requested more information from you:');\ngetByText('Check the claim details to learn more.');\ngetByText('This message will go away when we finish reviewing your response.');\ngetByText('Step 2 of 8: Initial review');",
                  "err": {},
                  "uuid": "8ab9188a-bbb6-4e16-9b70-52556e9811b4",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not show any flags when closed",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should not show any flags when closed",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'COMPLETE'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: true,\n    documentsNeeded: true,\n    status: 'COMPLETE'\n  }\n};\nvar _renderWithRouter11 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  queryByRole = _renderWithRouter11.queryByRole,\n  getByText = _renderWithRouter11.getByText;\n(0, _chai.expect)(queryByRole('listitem')).not.to.exist;\ngetByText('Step 8 of 8: Claim decided');",
                  "err": {},
                  "uuid": "36df113f-f744-41fe-b0ce-c40bf9ce9d48",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render a link to the claim status page",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and compenstaiton claim type code should render a link to the claim status page",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'COMPLETE'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'COMPLETE'\n  }\n};\nvar _renderWithRouter12 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByRole = _renderWithRouter12.getByRole;\n(0, _chai.expect)(getByRole('link')).to.have.text('Details');\n(0, _chai.expect)(getByRole('link').href).to.equal(\"http://localhost/your-claims/1/status\");",
                  "err": {},
                  "uuid": "f3b11f48-8ef5-4a9a-90e8-00ee179eb2f9",
                  "parentUUID": "fc124d4b-1bcb-4b90-b63b-84a6f370f1cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31607e6b-9eca-4a96-8a88-5ff172ef8914",
                "d604a00a-0403-421a-b6a1-55ba5eb09185",
                "8257f391-3d22-49e5-96be-e3f445f88811",
                "f9c63cc8-9292-4aee-a2fc-3e103be257c5",
                "60ef3019-5ce9-4742-b553-1edc7bfe7897",
                "bff3925e-110f-4fd0-9876-1b491557f8db",
                "6cfba6fd-6dbf-4682-922d-f47ed418535e",
                "3fb252d8-31c8-4825-8279-eec1963cf850",
                "20d51c7b-4c8a-4989-9002-7e2bc1cda853",
                "8ab9188a-bbb6-4e16-9b70-52556e9811b4",
                "36df113f-f744-41fe-b0ce-c40bf9ce9d48",
                "f3b11f48-8ef5-4a9a-90e8-00ee179eb2f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 36,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
              "title": "cstClaimPhases feature flag enabled and dependency claim type code",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimsListItem.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/ClaimsListItem.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not show any flags",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should not show any flags",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimDate: '2024-06-08',\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'CLAIM_RECEIVED'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: false,\n    documentsNeeded: false,\n    status: 'CLAIM_RECEIVED'\n  }\n};\nvar _renderWithRouter13 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  queryByRole = _renderWithRouter13.queryByRole,\n  getByText = _renderWithRouter13.getByText;\n(0, _chai.expect)(queryByRole('listitem')).not.to.exist;\ngetByText('Received on June 8, 2024');\ngetByText('Step 1 of 5: Claim received');\ngetByText('Moved to this step on June 8, 2024');",
                  "err": {},
                  "uuid": "7d365941-5064-4cc1-a038-79cfbad52341",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show closed status",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should show closed status",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'COMPLETE'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    status: 'COMPLETE'\n  }\n};\nvar _renderWithRouter14 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter14.getByText;\ngetByText('Step 5 of 5: Closed');",
                  "err": {},
                  "uuid": "9bfda92d-5846-4779-bce8-6ba0505655a1",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when UNDER_REVIEW",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should show the correct status when UNDER_REVIEW",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'UNDER_REVIEW'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    status: 'INITIAL_REVIEW'\n  }\n};\nvar _renderWithRouter15 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter15.getByText;\ngetByText('Step 2 of 5: Initial review');",
                  "err": {},
                  "uuid": "7071dcc7-dd51-4bd0-b656-22ba99999720",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when REVIEW_OF_EVIDENCE",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should show the correct status when REVIEW_OF_EVIDENCE",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'REVIEW_OF_EVIDENCE'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION'\n  }\n};\nvar _renderWithRouter16 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter16.getByText;\ngetByText('Step 3 of 5: Evidence gathering, review, and decision');",
                  "err": {},
                  "uuid": "c2d175ed-89d6-4404-bae7-47b21c7af037",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when PREPARATION_FOR_DECISION",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should show the correct status when PREPARATION_FOR_DECISION",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'PREPARATION_FOR_DECISION'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION'\n  }\n};\nvar _renderWithRouter17 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter17.getByText;\ngetByText('Step 3 of 5: Evidence gathering, review, and decision');",
                  "err": {},
                  "uuid": "1816b121-9b03-47da-91d3-7548cb00fcd6",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when PENDING_DECISION_APPROVAL",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should show the correct status when PENDING_DECISION_APPROVAL",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'PENDING_DECISION_APPROVAL'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    status: 'PREPARATION_FOR_NOTIFICATION'\n  }\n};\nvar _renderWithRouter18 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter18.getByText;\ngetByText('Step 4 of 5: Preparation for notification');",
                  "err": {},
                  "uuid": "6eedf72e-e868-4d6c-9061-ecc6e8ecc318",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when PREPARATION_FOR_NOTIFICATION",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should show the correct status when PREPARATION_FOR_NOTIFICATION",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'PREPARATION_FOR_NOTIFICATION'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    status: 'PREPARATION_FOR_NOTIFICATION'\n  }\n};\nvar _renderWithRouter19 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter19.getByText;\ngetByText('Step 4 of 5: Preparation for notification');",
                  "err": {},
                  "uuid": "bb67f3b9-71f4-403c-a012-70d9c6b83517",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show development letter flag",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should show development letter flag",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'GATHERING_OF_EVIDENCE'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: true,\n    documentsNeeded: false,\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION'\n  }\n};\nvar _renderWithRouter20 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter20.getByText;\ngetByText('We sent you a development letter');\ngetByText('Step 3 of 5: Evidence gathering, review, and decision');",
                  "err": {},
                  "uuid": "26cf22a8-3386-41c1-a89a-1c096d947482",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show decision letter flag decisionLetterSent is true, but not render the other flags",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should show decision letter flag decisionLetterSent is true, but not render the other flags",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'UNDER_REVIEW'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    decisionLetterSent: true,\n    developmentLetterSent: true,\n    documentsNeeded: true,\n    status: 'INITIAL_REVIEW'\n  }\n};\nvar _renderWithRouter21 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  queryByText = _renderWithRouter21.queryByText,\n  getByText = _renderWithRouter21.getByText;\n(0, _chai.expect)(queryByText('We sent you a development letter')).to.be.null;\n(0, _chai.expect)(queryByText('We requested more information from you:')).to.be.null;\n(0, _chai.expect)(getByText('You have a decision letter ready')).to.exist;\ngetByText('Step 2 of 5: Initial review');",
                  "err": {},
                  "uuid": "35adb914-8280-4891-90ae-dc3904bdff13",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show items needed flag",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should show items needed flag",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'UNDER_REVIEW'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: false,\n    documentsNeeded: true,\n    status: 'INITIAL_REVIEW'\n  }\n};\nvar _renderWithRouter22 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter22.getByText;\ngetByText('We requested more information from you:');\ngetByText('Check the claim details to learn more.');\ngetByText('This message will go away when we finish reviewing your response.');\ngetByText('Step 2 of 5: Initial review');",
                  "err": {},
                  "uuid": "6032815b-e57a-4a26-95ac-3bd3f8781143",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not show any flags when closed",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should not show any flags when closed",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'COMPLETE'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: true,\n    documentsNeeded: true,\n    status: 'COMPLETE'\n  }\n};\nvar _renderWithRouter23 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  queryByRole = _renderWithRouter23.queryByRole,\n  getByText = _renderWithRouter23.getByText;\n(0, _chai.expect)(queryByRole('listitem')).not.to.exist;\ngetByText('Step 5 of 5: Closed');",
                  "err": {},
                  "uuid": "36c5f5b0-b548-4278-bf1f-acbbe95e9e83",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render a link to the claim status page",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag enabled and dependency claim type code should render a link to the claim status page",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'COMPLETE'\n    },\n    claimTypeCode: dependencyClaimTypeCode,\n    status: 'COMPLETE'\n  }\n};\nvar _renderWithRouter24 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByRole = _renderWithRouter24.getByRole;\n(0, _chai.expect)(getByRole('link')).to.have.text('Details');\n(0, _chai.expect)(getByRole('link').href).to.equal(\"http://localhost/your-claims/1/status\");",
                  "err": {},
                  "uuid": "a3632fa7-4c00-4cc5-8a9f-dd457d23a3ac",
                  "parentUUID": "6eb8e5db-bb84-4abb-9c8c-8f5f8066f792",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d365941-5064-4cc1-a038-79cfbad52341",
                "9bfda92d-5846-4779-bce8-6ba0505655a1",
                "7071dcc7-dd51-4bd0-b656-22ba99999720",
                "c2d175ed-89d6-4404-bae7-47b21c7af037",
                "1816b121-9b03-47da-91d3-7548cb00fcd6",
                "6eedf72e-e868-4d6c-9061-ecc6e8ecc318",
                "bb67f3b9-71f4-403c-a012-70d9c6b83517",
                "26cf22a8-3386-41c1-a89a-1c096d947482",
                "35adb914-8280-4891-90ae-dc3904bdff13",
                "6032815b-e57a-4a26-95ac-3bd3f8781143",
                "36c5f5b0-b548-4278-bf1f-acbbe95e9e83",
                "a3632fa7-4c00-4cc5-8a9f-dd457d23a3ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
              "title": "cstClaimPhases feature flag disabled and compenstaiton claim type code",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimsListItem.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/ClaimsListItem.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not show any flags and render proper fields",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should not show any flags and render proper fields",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimDate: '2024-06-08',\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'CLAIM_RECEIVED'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: false,\n    documentsNeeded: false,\n    status: 'CLAIM_RECEIVED'\n  }\n};\nvar _renderWithRouter25 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  queryByRole = _renderWithRouter25.queryByRole,\n  getByText = _renderWithRouter25.getByText;\n(0, _chai.expect)(queryByRole('listitem')).not.to.exist;\ngetByText('Received on June 8, 2024');\ngetByText('Step 1 of 5: Claim received');\ngetByText('Moved to this step on June 8, 2024');",
                  "err": {},
                  "uuid": "85f86dd9-e910-45a3-a185-e3316fb3630f",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show closed status",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should show closed status",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'COMPLETE'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'COMPLETE'\n  }\n};\nvar _renderWithRouter26 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter26.getByText;\ngetByText('Step 5 of 5: Closed');",
                  "err": {},
                  "uuid": "50ce452d-6780-45ac-834f-193452dc1cfe",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when UNDER_REVIEW",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should show the correct status when UNDER_REVIEW",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'UNDER_REVIEW'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'INITIAL_REVIEW'\n  }\n};\nvar _renderWithRouter27 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter27.getByText;\ngetByText('Step 2 of 5: Initial review');",
                  "err": {},
                  "uuid": "3ecdd97b-73f5-4950-b1dd-d19b3f594514",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when REVIEW_OF_EVIDENCE",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should show the correct status when REVIEW_OF_EVIDENCE",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'REVIEW_OF_EVIDENCE'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION'\n  }\n};\nvar _renderWithRouter28 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter28.getByText;\ngetByText('Step 3 of 5: Evidence gathering, review, and decision');",
                  "err": {},
                  "uuid": "52ee2c9a-1a68-42bc-8d82-89bcf7519068",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when PREPARATION_FOR_DECISION",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should show the correct status when PREPARATION_FOR_DECISION",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'PREPARATION_FOR_DECISION'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION'\n  }\n};\nvar _renderWithRouter29 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter29.getByText;\ngetByText('Step 3 of 5: Evidence gathering, review, and decision');",
                  "err": {},
                  "uuid": "7d9cd612-a4b2-423a-bf74-1956dea0f91b",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when PENDING_DECISION_APPROVAL",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should show the correct status when PENDING_DECISION_APPROVAL",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'PENDING_DECISION_APPROVAL'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'PREPARATION_FOR_NOTIFICATION'\n  }\n};\nvar _renderWithRouter30 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter30.getByText;\ngetByText('Step 4 of 5: Preparation for notification');",
                  "err": {},
                  "uuid": "2833d4a1-f781-4504-a7c0-ee10891eb8e5",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show the correct status when PREPARATION_FOR_NOTIFICATION",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should show the correct status when PREPARATION_FOR_NOTIFICATION",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'PREPARATION_FOR_NOTIFICATION'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'PREPARATION_FOR_NOTIFICATION'\n  }\n};\nvar _renderWithRouter31 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter31.getByText;\ngetByText('Step 4 of 5: Preparation for notification');",
                  "err": {},
                  "uuid": "88e51c04-77a8-4304-a23e-f985c54e4067",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show development letter flag",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should show development letter flag",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'GATHERING_OF_EVIDENCE'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: true,\n    documentsNeeded: false,\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION'\n  }\n};\nvar _renderWithRouter32 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter32.getByText;\ngetByText('We sent you a development letter');\ngetByText('Step 3 of 5: Evidence gathering, review, and decision');",
                  "err": {},
                  "uuid": "ff86e512-5829-4dfe-904c-2c3d47df18a0",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show decision letter flag decisionLetterSent is true, but not render the other flags",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should show decision letter flag decisionLetterSent is true, but not render the other flags",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'UNDER_REVIEW'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    decisionLetterSent: true,\n    developmentLetterSent: true,\n    documentsNeeded: true,\n    status: 'INITIAL_REVIEW'\n  }\n};\nvar _renderWithRouter33 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  queryByText = _renderWithRouter33.queryByText,\n  getByText = _renderWithRouter33.getByText;\n(0, _chai.expect)(queryByText('We sent you a development letter')).to.be.null;\n(0, _chai.expect)(queryByText('We requested more information from you:')).to.be.null;\n(0, _chai.expect)(getByText('You have a decision letter ready')).to.exist;\ngetByText('Step 2 of 5: Initial review');",
                  "err": {},
                  "uuid": "4c8ecf6d-a60e-4b73-ab50-632363bb7c4e",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show items needed flag",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should show items needed flag",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'UNDER_REVIEW'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: false,\n    documentsNeeded: true,\n    status: 'INITIAL_REVIEW'\n  }\n};\nvar _renderWithRouter34 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByText = _renderWithRouter34.getByText;\ngetByText('We requested more information from you:');\ngetByText('Check the claim details to learn more.');\ngetByText('This message will go away when we finish reviewing your response.');\ngetByText('Step 2 of 5: Initial review');",
                  "err": {},
                  "uuid": "5cd2314b-fa15-4e7b-b37a-535cbcc3313c",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not show any flags when closed",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should not show any flags when closed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'COMPLETE'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    decisionLetterSent: false,\n    developmentLetterSent: true,\n    documentsNeeded: true,\n    status: 'COMPLETE'\n  }\n};\nvar _renderWithRouter35 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  queryByRole = _renderWithRouter35.queryByRole,\n  getByText = _renderWithRouter35.getByText;\n(0, _chai.expect)(queryByRole('listitem')).not.to.exist;\ngetByText('Step 5 of 5: Closed');",
                  "err": {},
                  "uuid": "eeef9e4e-ee79-4d3f-99bc-70e06c537c80",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render a link to the claim status page",
                  "fullTitle": "<ClaimsListItem> cstClaimPhases feature flag disabled and compenstaiton claim type code should render a link to the claim status page",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimPhaseDates: {\n      phaseChangeDate: '2024-06-08',\n      phaseType: 'COMPLETE'\n    },\n    claimTypeCode: compensationClaimTypeCode,\n    status: 'COMPLETE'\n  }\n};\nvar _renderWithRouter36 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_ClaimsListItem.default, {\n    claim: claim\n  }))),\n  getByRole = _renderWithRouter36.getByRole;\n(0, _chai.expect)(getByRole('link')).to.have.text('Details');\n(0, _chai.expect)(getByRole('link').href).to.equal(\"http://localhost/your-claims/1/status\");",
                  "err": {},
                  "uuid": "0f2d4857-5cb1-4c65-9072-0e6f13a992e0",
                  "parentUUID": "7fd776f9-9e97-466d-a1a7-1f8b21ad1f1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85f86dd9-e910-45a3-a185-e3316fb3630f",
                "50ce452d-6780-45ac-834f-193452dc1cfe",
                "3ecdd97b-73f5-4950-b1dd-d19b3f594514",
                "52ee2c9a-1a68-42bc-8d82-89bcf7519068",
                "7d9cd612-a4b2-423a-bf74-1956dea0f91b",
                "2833d4a1-f781-4504-a7c0-ee10891eb8e5",
                "88e51c04-77a8-4304-a23e-f985c54e4067",
                "ff86e512-5829-4dfe-904c-2c3d47df18a0",
                "4c8ecf6d-a60e-4b73-ab50-632363bb7c4e",
                "5cd2314b-fa15-4e7b-b37a-535cbcc3313c",
                "eeef9e4e-ee79-4d3f-99bc-70e06c537c80",
                "0f2d4857-5cb1-4c65-9072-0e6f13a992e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2222ed8c-031c-4530-94d7-f981770bb409",
          "title": "<AppContent>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimsStatusApp.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/ClaimsStatusApp.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render loading indicator if feature toggles are not available",
              "fullTitle": "<AppContent> should render loading indicator if feature toggles are not available",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimsStatusApp.AppContent, {\n    featureFlagsLoading: true\n  }, /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"data-testid\": \"children\"\n  }))),\n  getByTestId = _render.getByTestId,\n  queryByTestId = _render.queryByTestId;\n(0, _chai.expect)(getByTestId('feature-flags-loading')).to.exist;\n(0, _chai.expect)(queryByTestId('children')).to.not.exist;",
              "err": {},
              "uuid": "61e4d9ce-8f9f-4773-a2f1-5ac296f09fc0",
              "parentUUID": "2222ed8c-031c-4530-94d7-f981770bb409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render nested route if feature toggles are available",
              "fullTitle": "<AppContent> should render nested route if feature toggles are available",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    element: /*#__PURE__*/_react.default.createElement(_ClaimsStatusApp.AppContent, {\n      featureFlagsLoading: false\n    })\n  }, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    index: true,\n    element: /*#__PURE__*/_react.default.createElement(\"div\", {\n      \"data-testid\": \"children\"\n    })\n  }))))),\n  getByTestId = _render2.getByTestId,\n  queryByTestId = _render2.queryByTestId;\n(0, _chai.expect)(queryByTestId('feature-flags-loading')).to.not.exist;\n(0, _chai.expect)(getByTestId('children')).to.exist;",
              "err": {},
              "uuid": "212b5503-5293-4319-8975-6fa58891f39e",
              "parentUUID": "2222ed8c-031c-4530-94d7-f981770bb409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render ClaimsStatusApp",
              "fullTitle": "<AppContent> should render ClaimsStatusApp",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var store = (0, _redux.createStore)(function () {\n  return {\n    scheduledDowntime: {\n      globalDowntime: null,\n      isReady: true,\n      isPending: false,\n      serviceMap: new Map(),\n      dismissedDowntimeWarnings: []\n    }\n  };\n});\nvar props = {\n  dispatchSetLastPage: _sinon.default.spy(),\n  featureFlagsLoading: false,\n  user: {\n    login: {\n      currentlyLoggedIn: true,\n      hasCheckedKeepAlive: false\n    },\n    profile: {\n      services: [_backendServices.default.EVSS_CLAIMS, _backendServices.default.APPEALS_STATUS, _backendServices.default.LIGHTHOUSE],\n      verified: true\n    }\n  }\n};\nvar element = /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: store\n}, /*#__PURE__*/_react.default.createElement(_ClaimsStatusApp.ClaimsStatusApp, props));\nvar _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    element: element\n  }, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    index: true,\n    element: /*#__PURE__*/_react.default.createElement(\"div\", {\n      \"data-testid\": \"children\"\n    })\n  }))))),\n  getByTestId = _render3.getByTestId,\n  queryByTestId = _render3.queryByTestId,\n  unmount = _render3.unmount;\n(0, _chai.expect)(queryByTestId('feature-flags-loading')).to.not.exist;\n(0, _chai.expect)(getByTestId('children')).to.exist;\nunmount();\n(0, _chai.expect)(props.dispatchSetLastPage.called).to.be.true;",
              "err": {},
              "uuid": "a82793c2-7b0f-4b37-8313-bf8cfa330b85",
              "parentUUID": "2222ed8c-031c-4530-94d7-f981770bb409",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61e4d9ce-8f9f-4773-a2f1-5ac296f09fc0",
            "212b5503-5293-4319-8975-6fa58891f39e",
            "a82793c2-7b0f-4b37-8313-bf8cfa330b85"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9c61e1f0-77ad-4162-8d59-5c88fe767705",
          "title": "<ClaimStatusHeader>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimStatusHeader.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/ClaimStatusHeader.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "db2758b1-49c6-4249-a63b-3a0380384cd7",
              "title": "when the claim doesnt have tracked items",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimStatusHeader.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/ClaimStatusHeader.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a ClaimStatusHeader section for an In Progress claim",
                  "fullTitle": "<ClaimStatusHeader> when the claim doesnt have tracked items should render a ClaimStatusHeader section for an In Progress claim",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: '1',\n  attributes: {\n    supportingDocuments: [],\n    claimDate: '2023-01-01',\n    closeDate: null,\n    documentsNeeded: true,\n    decisionLetterSent: false,\n    status: 'INITIAL_REVIEW',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-02-18',\n      latestPhaseType: 'INITIAL_REVIEW',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08',\n        phase2CompleteDate: '2023-02-18'\n      }\n    }\n  }\n};\nvar _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimStatusHeader.default, {\n    claim: claim\n  })),\n  container = _render.container,\n  getByText = _render.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-status-header-container', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.usa-label', container)).to.exist;\n(0, _chai.expect)(getByText('In Progress')).to.exist;\n(0, _chai.expect)(getByText('Last updated: February 18, 2023')).to.exist;",
                  "err": {},
                  "uuid": "bc974d8c-cbdd-48fa-8cc2-bd70bf151c33",
                  "parentUUID": "db2758b1-49c6-4249-a63b-3a0380384cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render a ClaimStatusHeader section for a Complete claim",
                  "fullTitle": "<ClaimStatusHeader> when the claim doesnt have tracked items should render a ClaimStatusHeader section for a Complete claim",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: '1',\n  attributes: {\n    supportingDocuments: [],\n    claimDate: '2023-01-01',\n    closeDate: '2023-12-12',\n    documentsNeeded: true,\n    decisionLetterSent: false,\n    status: 'COMPLETE',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-12-12',\n      latestPhaseType: 'Complete',\n      previousPhases: {\n        phase7CompleteDate: '2023-12-12'\n      }\n    }\n  }\n};\nvar _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimStatusHeader.default, {\n    claim: claim\n  })),\n  container = _render2.container,\n  queryByText = _render2.queryByText;\n(0, _chai.expect)((0, _index.$)('.claim-status-header-container', container)).to.exist;\n(0, _chai.expect)(queryByText('In Progress')).not.to.exist;\n(0, _chai.expect)((0, _index.$)('.usa-label', container)).to.not.exist;\n(0, _chai.expect)(queryByText('Last updated')).not.to.exist;",
                  "err": {},
                  "uuid": "15e45257-9b99-4f6d-b7b2-290e86c16ef9",
                  "parentUUID": "db2758b1-49c6-4249-a63b-3a0380384cd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc974d8c-cbdd-48fa-8cc2-bd70bf151c33",
                "15e45257-9b99-4f6d-b7b2-290e86c16ef9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d9d7501f-491b-4013-b40e-4ae21a3f22ce",
              "title": "when the claim has tracked items",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimStatusHeader.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/ClaimStatusHeader.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a ClaimStatusHeader section for an In Progress claim",
                  "fullTitle": "<ClaimStatusHeader> when the claim has tracked items should render a ClaimStatusHeader section for an In Progress claim",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: '1',\n  attributes: {\n    supportingDocuments: [],\n    claimDate: '2023-01-01',\n    closeDate: null,\n    documentsNeeded: true,\n    decisionLetterSent: false,\n    status: 'INITIAL_REVIEW',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-02-18',\n      latestPhaseType: 'INITIAL_REVIEW',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08',\n        phase2CompleteDate: '2023-02-18'\n      }\n    },\n    trackedItems: [{\n      id: 1,\n      requestedDate: '2023-02-22',\n      receivedDate: '2023-02-25',\n      status: 'INITIAL_REVIEW_COMPLETE',\n      displayName: 'Initial review complete Request'\n    }, {\n      id: 2,\n      requestedDate: '2023-02-15',\n      receivedDate: '2023-02-15',\n      status: 'INITIAL_REVIEW_COMPLETE',\n      displayName: 'Initial review complete Request'\n    }]\n  }\n};\nvar _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimStatusHeader.default, {\n    claim: claim\n  })),\n  container = _render3.container,\n  getByText = _render3.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-status-header-container', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.usa-label', container)).to.exist;\n(0, _chai.expect)(getByText('In Progress')).to.exist;\n(0, _chai.expect)(getByText('Last updated: February 25, 2023')).to.exist;",
                  "err": {},
                  "uuid": "7fd5cf78-6811-4347-a5d6-487b5e3d453d",
                  "parentUUID": "d9d7501f-491b-4013-b40e-4ae21a3f22ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render a ClaimStatusHeader section for a Complete claim",
                  "fullTitle": "<ClaimStatusHeader> when the claim has tracked items should render a ClaimStatusHeader section for a Complete claim",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: '1',\n  attributes: {\n    supportingDocuments: [],\n    claimDate: '2023-01-01',\n    closeDate: '2023-12-12',\n    documentsNeeded: true,\n    decisionLetterSent: false,\n    status: 'COMPLETE',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-12-12',\n      latestPhaseType: 'Complete',\n      previousPhases: {\n        phase7CompleteDate: '2023-12-12'\n      }\n    }\n  }\n};\nvar _render4 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_ClaimStatusHeader.default, {\n    claim: claim\n  })),\n  container = _render4.container,\n  queryByText = _render4.queryByText;\n(0, _chai.expect)((0, _index.$)('.claim-status-header-container', container)).to.exist;\n(0, _chai.expect)(queryByText('In Progress')).not.to.exist;\n(0, _chai.expect)((0, _index.$)('.usa-label', container)).to.not.exist;\n(0, _chai.expect)(queryByText('Last updated')).not.to.exist;",
                  "err": {},
                  "uuid": "66e1eee2-f91a-4f7d-a5e0-132bf6e599db",
                  "parentUUID": "d9d7501f-491b-4013-b40e-4ae21a3f22ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7fd5cf78-6811-4347-a5d6-487b5e3d453d",
                "66e1eee2-f91a-4f7d-a5e0-132bf6e599db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "af736ca4-17e6-4ccd-95d2-632eaa520a90",
          "title": "<ClaimStatusPage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render null when there are no claims",
              "fullTitle": "<ClaimStatusPage> should render null when there are no claims",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, _extends({}, props, {\n    params: params\n  }))),\n  container = _renderWithRouter.container,\n  getByText = _renderWithRouter.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-status', container)).to.not.exist;\ngetByText('Claim status is unavailable');",
              "err": {},
              "uuid": "202da28a-d739-428b-8ef9-be7ebede85a8",
              "parentUUID": "af736ca4-17e6-4ccd-95d2-632eaa520a90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render null when claim is null",
              "fullTitle": "<ClaimStatusPage> should render null when claim is null",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, _extends({}, props, {\n    claim: null,\n    params: params\n  }))),\n  container = _renderWithRouter2.container,\n  getByText = _renderWithRouter2.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-status', container)).to.not.exist;\ngetByText('Claim status is unavailable');",
              "err": {},
              "uuid": "103617bf-ba52-4585-9df8-34c8edc74d18",
              "parentUUID": "af736ca4-17e6-4ccd-95d2-632eaa520a90",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "9e7e629d-b25d-4946-bc42-685d97a6e148",
              "title": "cstUseClaimDetailsV2 feature flag enabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a413295d-eec0-4f8d-af0c-6192a0d955d3",
                  "title": "document.title",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not update document title at mount-time if claim is not available",
                      "fullTitle": "<ClaimStatusPage> cstUseClaimDetailsV2 feature flag enabled document.title should not update document title at mount-time if claim is not available",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, _extends({}, props, {\n  params: params\n}))));\n(0, _chai.expect)(document.title).to.equal('');",
                      "err": {},
                      "uuid": "46cac277-2d47-47d8-85d3-d3c4dcb50cf3",
                      "parentUUID": "a413295d-eec0-4f8d-af0c-6192a0d955d3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update document title with claim details at mount-time if claim is already loaded",
                      "fullTitle": "<ClaimStatusPage> cstUseClaimDetailsV2 feature flag enabled document.title should update document title with claim details at mount-time if claim is already loaded",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, _extends({}, props, {\n  claim: claim,\n  params: params\n}))));\n(0, _chai.expect)(document.title).to.equal('Status of September 4, 2024 Compensation Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "a21e8664-ef79-4ba9-ab8a-e947ee19d3aa",
                      "parentUUID": "a413295d-eec0-4f8d-af0c-6192a0d955d3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update document title with claim details after mount once the claim has loaded",
                      "fullTitle": "<ClaimStatusPage> cstUseClaimDetailsV2 feature flag enabled document.title should update document title with claim details after mount once the claim has loaded",
                      "timedOut": false,
                      "duration": 19,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, _extends({}, props, {\n    loading: true,\n    params: params\n  })))),\n  rerender = _renderWithRouter3.rerender;\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, _extends({}, props, {\n  claim: claim,\n  params: params\n}))));\n(0, _chai.expect)(document.title).to.equal('Status of September 4, 2024 Compensation Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "8138fec3-8e77-4ea5-8327-f75594bfd608",
                      "parentUUID": "a413295d-eec0-4f8d-af0c-6192a0d955d3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update document title with a default message after mount once the claim fails to load",
                      "fullTitle": "<ClaimStatusPage> cstUseClaimDetailsV2 feature flag enabled document.title should update document title with a default message after mount once the claim fails to load",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, _extends({}, props, {\n    loading: true,\n    params: params\n  })))),\n  rerender = _renderWithRouter4.rerender;\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, _extends({}, props, {\n  claim: null,\n  params: params\n}))));\n(0, _chai.expect)(document.title).to.equal('Status of Your Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "f2af7203-045d-4af6-a3f7-e3b654ed9609",
                      "parentUUID": "a413295d-eec0-4f8d-af0c-6192a0d955d3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not update document title after mount if the loading status has not changed",
                      "fullTitle": "<ClaimStatusPage> cstUseClaimDetailsV2 feature flag enabled document.title should not update document title after mount if the loading status has not changed",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter5 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, _extends({}, props, {\n    loading: true,\n    params: params\n  })))),\n  rerender = _renderWithRouter5.rerender;\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, _extends({}, props, {\n  loading: true,\n  message: {\n    title: 'Test',\n    body: 'Body'\n  },\n  params: params\n}))));\n(0, _chai.expect)(document.title).to.equal('');",
                      "err": {},
                      "uuid": "f4f0c99e-d0b1-40db-af99-1eee35ff4a6d",
                      "parentUUID": "a413295d-eec0-4f8d-af0c-6192a0d955d3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "46cac277-2d47-47d8-85d3-d3c4dcb50cf3",
                    "a21e8664-ef79-4ba9-ab8a-e947ee19d3aa",
                    "8138fec3-8e77-4ea5-8327-f75594bfd608",
                    "f2af7203-045d-4af6-a3f7-e3b654ed9609",
                    "f4f0c99e-d0b1-40db-af99-1eee35ff4a6d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 45,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "e5ec7cd3-9248-4759-9ac6-0d6d38ac0f0a",
                  "title": "should render status page without a timeline",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "ced95902-2273-4691-9186-ef33ee1a3ef5",
                      "title": "shows ClaimStatusHeader, WhatWereDoing, WhatYouNeedToDo and RecentActivity sections",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "it shows without alerts when using lighthouse",
                          "fullTitle": "<ClaimStatusPage> cstUseClaimDetailsV2 feature flag enabled should render status page without a timeline shows ClaimStatusHeader, WhatWereDoing, WhatYouNeedToDo and RecentActivity sections it shows without alerts when using lighthouse",
                          "timedOut": false,
                          "duration": 13,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var claim = {\n  id: '1',\n  attributes: {\n    supportingDocuments: [],\n    claimDate: '2023-01-01',\n    closeDate: null,\n    documentsNeeded: false,\n    decisionLetterSent: false,\n    status: 'INITIAL_REVIEW',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2015-01-01',\n      latestPhaseType: 'UNDER_REVIEW',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08',\n        phase2CompleteDate: '2023-02-08'\n      }\n    },\n    trackedItems: [{\n      id: 1,\n      requestedDate: '2023-02-01',\n      status: 'INITIAL_REVIEW_COMPLETE',\n      displayName: 'Initial review complete Request'\n    }, {\n      id: 2,\n      requestedDate: '2023-02-01',\n      status: 'INITIAL_REVIEW_COMPLETE',\n      displayName: 'Initial review complete Request'\n    }]\n  }\n};\nvar _renderWithRouter6 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, {\n    claim: claim,\n    params: params,\n    clearNotification: function clearNotification() {}\n  }), \",\")),\n  container = _renderWithRouter6.container,\n  getByText = _renderWithRouter6.getByText;\nvar statusPage = (0, _index.$)('#tabPanelStatus', container);\n(0, _chai.expect)(statusPage).to.exist;\n(0, _chai.expect)(document.title).to.equal('Status of January 1, 2023 Disability Compensation Claim | Veterans Affairs');\n(0, _chai.expect)((0, _index.$)('va-process-list', container)).not.to.exist;\n(0, _chai.expect)((0, _index.$)('.claim-status-header-container', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.what-were-doing-container', container)).to.exist;\ngetByText('What you need to do');\n(0, _chai.expect)((0, _index.$)('.recent-activity-container', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-alert .primary-alert', container)).not.to.exist;\n(0, _chai.expect)((0, _index.$)('va-alert p', container).textContent).to.equal(\"We can't show all of the details of your claim. Please check back later.\");\n(0, _chai.expect)((0, _index.$)('.need-files-alert', container)).not.to.exist;",
                          "err": {},
                          "uuid": "e2225ddb-fe7b-43ae-baf1-8905f864c5b1",
                          "parentUUID": "ced95902-2273-4691-9186-ef33ee1a3ef5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "it shows with alerts when using lighthouse",
                          "fullTitle": "<ClaimStatusPage> cstUseClaimDetailsV2 feature flag enabled should render status page without a timeline shows ClaimStatusHeader, WhatWereDoing, WhatYouNeedToDo and RecentActivity sections it shows with alerts when using lighthouse",
                          "timedOut": false,
                          "duration": 17,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var claim = {\n  id: '1',\n  attributes: {\n    supportingDocuments: [],\n    claimDate: '2023-01-01',\n    closeDate: null,\n    documentsNeeded: true,\n    decisionLetterSent: false,\n    status: 'INITIAL_REVIEW',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2015-01-01',\n      latestPhaseType: 'INITIAL_REVIEW',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08',\n        phase2CompleteDate: '2023-02-08'\n      }\n    },\n    trackedItems: [{\n      id: 1,\n      status: 'NEEDED_FROM_YOU',\n      displayName: 'Test',\n      description: 'Test',\n      requestedDate: '2024-02-01',\n      date: '2023-01-01'\n    }]\n  }\n};\nvar _renderWithRouter7 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, {\n    claim: claim,\n    params: params,\n    clearNotification: function clearNotification() {}\n  }), \",\")),\n  container = _renderWithRouter7.container,\n  getByText = _renderWithRouter7.getByText;\nvar statusPage = (0, _index.$)('#tabPanelStatus', container);\n(0, _chai.expect)(statusPage).to.exist;\n(0, _chai.expect)(document.title).to.equal('Status of January 1, 2023 Disability Compensation Claim | Veterans Affairs');\n(0, _chai.expect)((0, _index.$)('va-process-list', container)).not.to.exist;\n(0, _chai.expect)((0, _index.$)('.claim-status-header-container', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.what-were-doing-container', container)).to.exist;\ngetByText('What you need to do');\n(0, _chai.expect)((0, _index.$)('.recent-activity-container', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-alert h4', container).textContent).to.equal(claim.attributes.trackedItems[0].displayName);\n(0, _chai.expect)((0, _index.$)('va-alert p', container).textContent).to.equal(\"We can't show all of the details of your claim. Please check back later.\");",
                          "err": {},
                          "uuid": "b5d3581d-03f1-4a43-b11d-02fade03822e",
                          "parentUUID": "ced95902-2273-4691-9186-ef33ee1a3ef5",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "e2225ddb-fe7b-43ae-baf1-8905f864c5b1",
                        "b5d3581d-03f1-4a43-b11d-02fade03822e"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 30,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9a904eb9-71ff-4183-997b-5c8e29e15725",
              "title": "when feature flags disabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not render need files from you when closed",
                  "fullTitle": "<ClaimStatusPage> when feature flags disabled should not render need files from you when closed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: '1',\n  type: 'claim',\n  attributes: {\n    claimDate: '2023-01-01',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-12-12',\n      latestPhaseType: 'INITIAL_REVIEW',\n      previousPhases: {\n        phase7CompleteDate: '2023-12-12'\n      }\n    },\n    closeDate: '2023-12-12',\n    documentsNeeded: false,\n    decisionLetterSent: false,\n    status: 'INITIAL_REVIEW',\n    supportingDocuments: [],\n    trackedItems: [{\n      id: 1,\n      status: 'ACCEPTED',\n      displayName: 'Test',\n      description: 'Test',\n      suspenseDate: '2024-02-01',\n      date: '2023-01-01'\n    }, {\n      id: 2,\n      status: 'INITIAL_REVIEW_COMPLETE',\n      displayName: 'Test',\n      description: 'Test',\n      suspenseDate: '2024-02-01',\n      date: '2023-01-01'\n    }]\n  }\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, {\n  claim: claim,\n  params: params\n}));\n(0, _chai.expect)(tree.subTree('NeedFilesFromYou')).to.be.false;",
                  "err": {},
                  "uuid": "a28b2ea1-03c6-40ef-8ac7-6904e7995def",
                  "parentUUID": "9a904eb9-71ff-4183-997b-5c8e29e15725",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not render files needed from you when decision letter sent",
                  "fullTitle": "<ClaimStatusPage> when feature flags disabled should not render files needed from you when decision letter sent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: '1',\n  type: 'claim',\n  attributes: {\n    claimDate: '2023-01-01',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-02-08',\n      latestPhaseType: 'INITIAL_REVIEW',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08'\n      }\n    },\n    closeDate: null,\n    documentsNeeded: true,\n    decisionLetterSent: true,\n    status: 'INITIAL_REVIEW',\n    supportingDocuments: [{\n      id: '123456',\n      originalFileName: 'test.pdf',\n      documentTypeLabel: 'Buddy / Lay Statement',\n      uploadDate: '2023-03-04'\n    }],\n    trackedItems: [{\n      id: 1,\n      status: 'NEEDED_FROM_YOU',\n      displayName: 'Test',\n      description: 'Test',\n      suspenseDate: '2024-02-01',\n      date: '2023-01-01'\n    }]\n  }\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, {\n  claim: claim,\n  params: params\n}));\n(0, _chai.expect)(tree.subTree('NeedFilesFromYou')).to.be.false;",
                  "err": {},
                  "uuid": "f3f5744c-67b2-41a9-a464-307809bd95cf",
                  "parentUUID": "9a904eb9-71ff-4183-997b-5c8e29e15725",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render empty content when loading",
                  "fullTitle": "<ClaimStatusPage> when feature flags disabled should render empty content when loading",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter8 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, _extends({}, props, {\n    loading: true,\n    params: params\n  }))),\n  container = _renderWithRouter8.container;\n(0, _chai.expect)((0, _index.$)('.claim-status', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
                  "err": {},
                  "uuid": "8ff4a73c-9816-4586-9a19-6916f8ff1882",
                  "parentUUID": "9a904eb9-71ff-4183-997b-5c8e29e15725",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render notification",
                  "fullTitle": "<ClaimStatusPage> when feature flags disabled should render notification",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, {\n  loading: true,\n  params: params,\n  message: {\n    title: 'Test',\n    body: 'Body'\n  },\n  claim: claim\n}));\n(0, _chai.expect)(tree.props.message).not.to.be.null;",
                  "err": {},
                  "uuid": "b781d316-08aa-4e7a-be78-017b7a4ab652",
                  "parentUUID": "9a904eb9-71ff-4183-997b-5c8e29e15725",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear alert",
                  "fullTitle": "<ClaimStatusPage> when feature flags disabled should clear alert",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: '1',\n  type: 'claim',\n  attributes: {\n    claimDate: '2023-01-01',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-02-08',\n      latestPhaseType: 'INITIAL_REVIEW',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08'\n      }\n    },\n    closeDate: null,\n    documentsNeeded: false,\n    decisionLetterSent: false,\n    status: 'INITIAL_REVIEW',\n    supportingDocuments: [{\n      id: '123456',\n      originalFileName: 'test.pdf',\n      documentTypeLabel: 'Buddy / Lay Statement',\n      uploadDate: '2023-03-04'\n    }],\n    trackedItems: []\n  }\n};\nvar clearNotification = _sinon.default.spy();\nvar message = {\n  title: 'Test',\n  body: 'Test'\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, {\n  params: params,\n  clearNotification: clearNotification,\n  message: message,\n  claim: claim\n}));\n(0, _chai.expect)(clearNotification.called).to.be.false;\ntree.subTree('ClaimDetailLayout').props.clearNotification();\n(0, _chai.expect)(clearNotification.called).to.be.true;",
                  "err": {},
                  "uuid": "fd717586-4c40-485a-be04-ddafb365db0d",
                  "parentUUID": "9a904eb9-71ff-4183-997b-5c8e29e15725",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear notification when leaving",
                  "fullTitle": "<ClaimStatusPage> when feature flags disabled should clear notification when leaving",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: '1',\n  type: 'claim',\n  attributes: {\n    claimDate: '2023-01-01',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-02-08',\n      latestPhaseType: 'INITIAL_REVIEW',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08'\n      }\n    },\n    closeDate: null,\n    documentsNeeded: false,\n    decisionLetterSent: false,\n    status: 'INITIAL_REVIEW',\n    supportingDocuments: [{\n      id: '123456',\n      originalFileName: 'test.pdf',\n      documentTypeLabel: 'Buddy / Lay Statement',\n      uploadDate: '2023-03-04'\n    }],\n    trackedItems: []\n  }\n};\nvar clearNotification = _sinon.default.spy();\nvar message = {\n  title: 'Test',\n  body: 'Test'\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, {\n  params: params,\n  clearNotification: clearNotification,\n  message: message,\n  claim: claim\n}));\n(0, _chai.expect)(clearNotification.called).to.be.false;\ntree.getMountedInstance().componentWillUnmount();\n(0, _chai.expect)(clearNotification.called).to.be.true;",
                  "err": {},
                  "uuid": "2bf13486-519b-4999-9e87-069560395394",
                  "parentUUID": "9a904eb9-71ff-4183-997b-5c8e29e15725",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a28b2ea1-03c6-40ef-8ac7-6904e7995def",
                "f3f5744c-67b2-41a9-a464-307809bd95cf",
                "8ff4a73c-9816-4586-9a19-6916f8ff1882",
                "b781d316-08aa-4e7a-be78-017b7a4ab652",
                "fd717586-4c40-485a-be04-ddafb365db0d",
                "2bf13486-519b-4999-9e87-069560395394"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "bf593ba4-f621-42d5-9321-ef02dfb40108",
              "title": "DDL feature flag is enabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/ClaimStatusPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render a link to the claim letters page when using Lighthouse",
                  "fullTitle": "<ClaimStatusPage> DDL feature flag is enabled should render a link to the claim letters page when using Lighthouse",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var screen = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: store\n}, /*#__PURE__*/_react.default.createElement(_ClaimStatusPage.ClaimStatusPage, {\n  claim: claim,\n  showClaimLettersLink: true,\n  params: params,\n  clearNotification: function clearNotification() {}\n})));\nscreen.getByText('Get your claim letters');",
                  "err": {},
                  "uuid": "e48d5c78-1863-4a05-8b03-4844e62f7b37",
                  "parentUUID": "bf593ba4-f621-42d5-9321-ef02dfb40108",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e48d5c78-1863-4a05-8b03-4844e62f7b37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "202da28a-d739-428b-8ef9-be7ebede85a8",
            "103617bf-ba52-4585-9df8-34c8edc74d18"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c1077dee-3210-4dd8-b697-9fd3029c71bf",
          "title": "<ClaimsUnavailable>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimsUnavailable.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/ClaimsUnavailable.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render component",
              "fullTitle": "<ClaimsUnavailable> should render component",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_ClaimsUnavailable.default, null)),\n  getByText = _renderWithRouter.getByText;\ngetByText('Claim status is unavailable');\ngetByText('VA.gov is having trouble loading claims information at this time. Please check back again in an hour. Please note: You are still able to review appeals information.');",
              "err": {},
              "uuid": "a2451406-0c54-4a64-8efb-9a5143247efd",
              "parentUUID": "c1077dee-3210-4dd8-b697-9fd3029c71bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a2451406-0c54-4a64-8efb-9a5143247efd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3e5aa7df-20ac-478f-b955-8b78512bbb01",
          "title": "<ClaimTimeline>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/ClaimTimeline.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/ClaimTimeline.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render 5 phases",
              "fullTitle": "<ClaimTimeline> should render 5 phases",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var events = [];\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimTimeline.default, {\n  events: events,\n  phase: 6\n}));\n(0, _chai.expect)(tree.everySubTree('ClaimPhase').length).to.equal(5);",
              "err": {},
              "uuid": "5c57283b-debe-4f03-811b-7283f1c86d7a",
              "parentUUID": "3e5aa7df-20ac-478f-b955-8b78512bbb01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render phase back warning box for phase 6",
              "fullTitle": "<ClaimTimeline> should render phase back warning box for phase 6",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var events = [];\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimTimeline.default, {\n  events: events,\n  currentPhaseBack: true,\n  phase: 6\n}));\n(0, _chai.expect)(tree.subTree('PhaseBackWarning')).not.to.be.false;",
              "err": {},
              "uuid": "83b5393f-f0de-4c1f-a38c-bd92ee5abefb",
              "parentUUID": "3e5aa7df-20ac-478f-b955-8b78512bbb01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render phase back warning box if not in phase 6",
              "fullTitle": "<ClaimTimeline> should not render phase back warning box if not in phase 6",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var events = [];\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_ClaimTimeline.default, {\n  events: events,\n  currentPhaseBack: true,\n  phase: 4\n}));\n(0, _chai.expect)(tree.subTree('PhaseBackWarning')).to.be.false;",
              "err": {},
              "uuid": "3c8a4c31-f089-4274-893e-350763759ffe",
              "parentUUID": "3e5aa7df-20ac-478f-b955-8b78512bbb01",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c57283b-debe-4f03-811b-7283f1c86d7a",
            "83b5393f-f0de-4c1f-a38c-bd92ee5abefb",
            "3c8a4c31-f089-4274-893e-350763759ffe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d3beda5a-3ff2-4d94-a94d-30be2e44bce0",
          "title": "<CopyOfExam>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/CopyOfExam.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/CopyOfExam.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render component",
              "fullTitle": "<CopyOfExam> should render component",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_CopyOfExam.default, null)),\n  getByRole = _render.getByRole,\n  getByText = _render.getByText;\ngetByRole('heading', {\n  name: 'Want a copy of your claim exam?'\n});\ngetByRole('link', {\n  name: 'VA Form 20-10206',\n  href: 'https://va.gov/find-forms/about-form-20-10206/'\n});\ngetByText(/You can submit the form using our online tool, or download a pdf of the form and send it by mail./i);",
              "err": {},
              "uuid": "f39add38-22f9-426c-bd93-19a25a1e3787",
              "parentUUID": "d3beda5a-3ff2-4d94-a94d-30be2e44bce0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f39add38-22f9-426c-bd93-19a25a1e3787"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 35,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f45f7e78-7a8a-4ecc-856e-d820860e9034",
          "title": "<DocumentRequestPage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/DocumentRequestPage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/DocumentRequestPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "484b2bf0-23ae-47ea-9c9f-8c4e5692394f",
              "title": "when cst5103UpdateEnabled is true",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/DocumentRequestPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/DocumentRequestPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render Default5103EvidenceNotice component when item is a 5103 notice",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is true should render Default5103EvidenceNotice component when item is a 5103 notice",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  closedDate: null,\n  description: 'Automated 5103 Notice Response',\n  displayName: 'Automated 5103 Notice Response',\n  id: 467558,\n  overdue: true,\n  receivedDate: null,\n  requestedDate: '2024-03-07',\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: '2024-04-07',\n  uploadsAllowed: true,\n  documents: '[]',\n  date: '2024-03-07'\n};\nvar _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem\n  })), \",\")),\n  container = _renderWithRouter.container;\n(0, _chai.expect)((0, _index.$)('#default-5103-notice-page', container)).to.exist;\nvar breadcrumbs = (0, _index.$)('va-breadcrumbs', container);\n(0, _chai.expect)(breadcrumbs.breadcrumbList[3].href).to.equal(\"../document-request/\".concat(trackedItem.id));\n(0, _chai.expect)(breadcrumbs.breadcrumbList[3].label).to.equal('Review evidence list (5103 notice)');\n(0, _chai.expect)(document.title).to.equal('Review evidence list (5103 notice) | Veterans Affairs');",
                  "err": {},
                  "uuid": "17fc1538-90db-4a3d-a298-f2f9506a01a4",
                  "parentUUID": "484b2bf0-23ae-47ea-9c9f-8c4e5692394f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not render Default5103EvidenceNotice component when item is a not a 5103 notice",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is true should not render Default5103EvidenceNotice component when item is a not a 5103 notice",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  closedDate: null,\n  description: 'Buddy statement text',\n  displayName: 'Submit buddy statement(s)',\n  id: 467558,\n  overdue: true,\n  receivedDate: null,\n  requestedDate: '2024-03-07',\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: '2024-04-07',\n  uploadsAllowed: true,\n  documents: '[]',\n  date: '2024-03-07'\n};\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem\n  })), \",\")),\n  container = _renderWithRouter2.container;\n(0, _chai.expect)((0, _index.$)('#default-5103-notice-page', container)).to.not.exist;\nvar breadcrumbs = (0, _index.$)('va-breadcrumbs', container);\n(0, _chai.expect)(breadcrumbs.breadcrumbList[3].href).to.equal(\"../document-request/\".concat(trackedItem.id));\n(0, _chai.expect)(breadcrumbs.breadcrumbList[3].label).to.equal(trackedItem.displayName);\n(0, _chai.expect)(document.title).to.equal(\"\".concat(trackedItem.displayName, \" | Veterans Affairs\"));",
                  "err": {},
                  "uuid": "e9a2f681-844c-4bc2-a19a-d0da8cec84a7",
                  "parentUUID": "484b2bf0-23ae-47ea-9c9f-8c4e5692394f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17fc1538-90db-4a3d-a298-f2f9506a01a4",
                "e9a2f681-844c-4bc2-a19a-d0da8cec84a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
              "title": "when cst5103UpdateEnabled is false",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/DocumentRequestPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/DocumentRequestPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when component mounts should set document title",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false when component mounts should set document title",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore(false)\n}, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n  loading: true\n})), \",\"));\n(0, _chai.expect)(document.title).to.equal('Document Request | Veterans Affairs');",
                  "err": {},
                  "uuid": "f3e0a5b6-cb37-4963-a990-069565c95f39",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when component mounts should scroll to breadcrumbs",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false when component mounts should scroll to breadcrumbs",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "65c32999-2562-4dad-a1b2-f0515d1902dc",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when component mounts without sessionStorage previousPage value should set previous breadcrumb to status",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false when component mounts without sessionStorage previousPage value should set previous breadcrumb to status",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  status: 'NEEDED_FROM_YOU',\n  displayName: 'Testing'\n};\nvar _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem\n  })), \",\")),\n  container = _renderWithRouter4.container;\nvar breadcrumbs = (0, _index.$)('va-breadcrumbs', container);\n(0, _chai.expect)(breadcrumbs.breadcrumbList[2].href).to.equal('../status');\n(0, _chai.expect)(breadcrumbs.breadcrumbList[2].label).to.equal('Status of your disability compensation claim');",
                  "err": {},
                  "uuid": "59b9b5da-fd28-4c34-b65c-a31ff85a349e",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when component mounts with sessionStorage previousPage value of files should set previous breadcrumb",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false when component mounts with sessionStorage previousPage value of files should set previous breadcrumb",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  status: 'NEEDED_FROM_YOU',\n  displayName: 'Testing'\n};\nsessionStorage.setItem('previousPage', 'files');\nvar _renderWithRouter5 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem\n  })), \",\")),\n  container = _renderWithRouter5.container;\nvar breadcrumbs = (0, _index.$)('va-breadcrumbs', container);\n(0, _chai.expect)(breadcrumbs.breadcrumbList[2].href).to.equal('../files');\n(0, _chai.expect)(breadcrumbs.breadcrumbList[2].label).to.equal('Files for your disability compensation claim');",
                  "err": {},
                  "uuid": "70139fa7-45d4-4074-a1c6-7da2056e8408",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when component mounts with sessionStorage previousPage value of status should set previous breadcrumb",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false when component mounts with sessionStorage previousPage value of status should set previous breadcrumb",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  status: 'NEEDED_FROM_YOU',\n  displayName: 'Testing'\n};\nsessionStorage.setItem('previousPage', 'status');\nvar _renderWithRouter6 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem\n  })), \",\")),\n  container = _renderWithRouter6.container;\nvar breadcrumbs = (0, _index.$)('va-breadcrumbs', container);\n(0, _chai.expect)(breadcrumbs.breadcrumbList[2].href).to.equal('../status');\n(0, _chai.expect)(breadcrumbs.breadcrumbList[2].label).to.equal('Status of your disability compensation claim');",
                  "err": {},
                  "uuid": "a71f9604-54f2-4e4e-a062-8de57657149b",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render loading div",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false should render loading div",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter7 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    loading: true\n  })), \",\")),\n  context = _renderWithRouter7.context;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', context)).to.exist;\n(0, _chai.expect)((0, _index.$)('.claim-container', context)).to.not.exist;",
                  "err": {},
                  "uuid": "a27b1196-5d9d-41c2-b829-132a72843015",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render upload error alert",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false should render upload error alert",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  status: 'NEEDED_FROM_YOU'\n};\nvar message = {\n  title: 'Test',\n  body: 'Testing'\n};\nvar _renderWithRouter8 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem,\n    message: message\n  })), \",\")),\n  context = _renderWithRouter8.context;\n(0, _chai.expect)((0, _index.$)('va-alert', context)).to.exist;",
                  "err": {},
                  "uuid": "a4a7eafe-20e0-4712-a8c5-c6128b410700",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render upload error alert when rerendered",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false should render upload error alert when rerendered",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  status: 'NEEDED_FROM_YOU'\n};\nvar _renderWithRouter9 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem\n  })), \",\")),\n  container = _renderWithRouter9.container,\n  rerender = _renderWithRouter9.rerender;\n(0, _chai.expect)((0, _index.$)('va-alert', container)).not.to.exist;\nvar message = {\n  title: 'Test',\n  body: 'Testing'\n};\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore(false)\n}, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n  trackedItem: trackedItem,\n  message: message\n})), \",\"));\n(0, _chai.expect)((0, _index.$)('va-alert', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-alert h2', container).textContent).to.equal(message.title);",
                  "err": {},
                  "uuid": "eef5679f-7a31-4508-8434-b487641437a1",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not clear notification after completed upload",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false should not clear notification after completed upload",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  status: 'NEEDED_FROM_YOU'\n};\nvar message = {\n  title: 'test',\n  body: 'test',\n  type: 'error'\n};\nvar clearNotification = _sinon.default.spy();\nvar _renderWithRouter10 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem,\n    clearNotification: clearNotification,\n    message: message\n  })), \",\")),\n  context = _renderWithRouter10.context;\n(0, _chai.expect)((0, _index.$)('va-alert', context)).to.exist;\n(0, _chai.expect)(clearNotification.called).to.be.false;",
                  "err": {},
                  "uuid": "eb117f84-27ec-4841-a123-bfc1efaa541b",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render due date info",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false should render due date info",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: '2010-05-10'\n};\nvar _renderWithRouter11 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem\n  })), \",\")),\n  context = _renderWithRouter11.context;\n(0, _chai.expect)((0, _index.$)('.due-date-header', context)).to.exist;",
                  "err": {},
                  "uuid": "d892ce15-b8f2-42a0-b4e5-063d981e989b",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render optional upload alert",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false should render optional upload alert",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  status: 'NEEDED_FROM_OTHERS',\n  suspenseDate: '2010-05-10'\n};\nvar _renderWithRouter12 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem\n  })), \",\")),\n  context = _renderWithRouter12.context;\n(0, _chai.expect)((0, _index.$)('.optional-upload', context)).to.exist;",
                  "err": {},
                  "uuid": "e84e8b1a-40be-425c-b5fc-1515466e7952",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle submit files",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false should handle submit files",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: '2010-05-10'\n};\nvar onSubmit = _sinon.default.spy();\nvar _renderWithRouter13 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem,\n    submitFiles: onSubmit\n  })), \",\")),\n  container = _renderWithRouter13.container,\n  rerender = _renderWithRouter13.rerender;\n// Create a file\nvar file = {\n  file: new File(['hello'], 'hello.jpg', {\n    name: 'hello.jpg',\n    type: _file.fileTypeSignatures.jpg.mime,\n    size: 9999\n  }),\n  docType: {\n    value: 'L029',\n    dirty: true\n  },\n  password: {\n    value: '',\n    dirty: false\n  },\n  isEncrypted: false\n};\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore(false)\n}, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n  trackedItem: trackedItem,\n  files: [file],\n  submitFiles: onSubmit\n})), \",\"));\n_dom.fireEvent.click((0, _index.$)('#submit', container));\n(0, _chai.expect)(onSubmit.called).to.be.true;",
                  "err": {},
                  "uuid": "6911f375-16dd-4f9a-b68e-10a557c49044",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle submit files lighthouse and navigate to files page",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false should handle submit files lighthouse and navigate to files page",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var submitFilesLighthouse = _sinon.default.spy();\nvar trackedItem = {\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: '2010-05-10',\n  displayName: 'Testing'\n};\nvar _renderWithRouter14 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem,\n    submitFilesLighthouse: submitFilesLighthouse,\n    documentsUseLighthouse: true\n  })), \",\")),\n  container = _renderWithRouter14.container,\n  rerender = _renderWithRouter14.rerender;\n// Create a file\nvar file = {\n  file: new File(['hello'], 'hello.jpg', {\n    name: 'hello.jpg',\n    type: _file.fileTypeSignatures.jpg.mime,\n    size: 9999\n  }),\n  docType: {\n    value: 'L029',\n    dirty: true\n  },\n  password: {\n    value: '',\n    dirty: false\n  },\n  isEncrypted: false\n};\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore(false)\n}, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n  trackedItem: trackedItem,\n  submitFilesLighthouse: submitFilesLighthouse,\n  files: [file],\n  documentsUseLighthouse: true\n})), \",\"));\n_dom.fireEvent.click((0, _index.$)('#submit', container));\n(0, _chai.expect)(submitFilesLighthouse.called).to.be.true;",
                  "err": {},
                  "uuid": "e0af345d-09e2-40e0-8d87-01236cb2c477",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reset uploads and set title on mount",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false should reset uploads and set title on mount",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  status: 'NEEDED_FROM_YOU',\n  displayName: 'Testing'\n};\nvar resetUploads = _sinon.default.spy();\nvar mainDiv = document.createElement('div');\nmainDiv.classList.add('va-nav-breadcrumbs');\ndocument.body.appendChild(mainDiv);\n(0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: _helpers.uploadStore\n}, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n  trackedItem: trackedItem,\n  resetUploads: resetUploads\n}))));\n(0, _chai.expect)(document.title).to.equal('Testing | Veterans Affairs');\n(0, _chai.expect)(resetUploads.called).to.be.true;",
                  "err": {},
                  "uuid": "c88dea20-3133-44dc-8068-757381c55085",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set details and go to files page if complete",
                  "fullTitle": "<DocumentRequestPage> when cst5103UpdateEnabled is false should set details and go to files page if complete",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var trackedItem = {\n  status: 'NEEDED_FROM_YOU',\n  displayName: 'Testing'\n};\nvar parameters = {\n  id: 339\n};\nvar getClaim = _sinon.default.spy();\nvar navigate = _sinon.default.spy();\nvar _renderWithRouter15 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n    trackedItem: trackedItem,\n    navigate: navigate,\n    params: parameters,\n    getClaim: getClaim\n  })))),\n  rerender = _renderWithRouter15.rerender;\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore(false)\n}, /*#__PURE__*/_react.default.createElement(_DocumentRequestPage.DocumentRequestPage, _extends({}, defaultProps, {\n  uploadComplete: true,\n  trackedItem: trackedItem,\n  navigate: navigate,\n  params: parameters,\n  getClaim: getClaim\n})), \",\"));\n(0, _chai.expect)(getClaim.calledWith(1)).to.be.true;\n(0, _chai.expect)(navigate.calledWith('../files')).to.be.true;",
                  "err": {},
                  "uuid": "b45ec6b8-44d0-4a16-8e97-6d051b989b18",
                  "parentUUID": "eefd3801-ab11-4df0-915a-af0fb83b67ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f3e0a5b6-cb37-4963-a990-069565c95f39",
                "65c32999-2562-4dad-a1b2-f0515d1902dc",
                "59b9b5da-fd28-4c34-b65c-a31ff85a349e",
                "70139fa7-45d4-4074-a1c6-7da2056e8408",
                "a71f9604-54f2-4e4e-a062-8de57657149b",
                "a27b1196-5d9d-41c2-b829-132a72843015",
                "a4a7eafe-20e0-4712-a8c5-c6128b410700",
                "eef5679f-7a31-4508-8434-b487641437a1",
                "eb117f84-27ec-4841-a123-bfc1efaa541b",
                "d892ce15-b8f2-42a0-b4e5-063d981e989b",
                "e84e8b1a-40be-425c-b5fc-1515466e7952",
                "6911f375-16dd-4f9a-b68e-10a557c49044",
                "e0af345d-09e2-40e0-8d87-01236cb2c477",
                "c88dea20-3133-44dc-8068-757381c55085",
                "b45ec6b8-44d0-4a16-8e97-6d051b989b18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8bfa1672-ca9b-40ab-b590-f06118fc09bc",
          "title": "<DueDate>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/DueDate.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/DueDate.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "40afd796-167a-4e23-b3bd-d25d88568135",
              "title": "past due dates",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/DueDate.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/DueDate.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render past due class when theres more than a years difference",
                  "fullTitle": "<DueDate> past due dates should render past due class when theres more than a years difference",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var testDate = createTestDate({\n  dateFn: _dateFns.subMonths,\n  amount: 15\n});\nrenderAndAssertDueDate(testDate);",
                  "err": {},
                  "uuid": "1b247c14-438a-4431-8def-63646f3d9daf",
                  "parentUUID": "40afd796-167a-4e23-b3bd-d25d88568135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render past due class when theres more than a months difference",
                  "fullTitle": "<DueDate> past due dates should render past due class when theres more than a months difference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var testDate = createTestDate({\n  dateFn: _dateFns.subMonths,\n  amount: 4\n});\nrenderAndAssertDueDate(testDate);",
                  "err": {},
                  "uuid": "35915348-1a9c-4d78-8b40-e05c93b9a561",
                  "parentUUID": "40afd796-167a-4e23-b3bd-d25d88568135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render past due class when theres more than a days difference",
                  "fullTitle": "<DueDate> past due dates should render past due class when theres more than a days difference",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var testDate = createTestDate({\n  dateFn: _dateFns.subDays,\n  amount: 3\n});\nrenderAndAssertDueDate(testDate);",
                  "err": {},
                  "uuid": "4ba72ad8-b7bb-46b3-a23f-58ccc38c51ea",
                  "parentUUID": "40afd796-167a-4e23-b3bd-d25d88568135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render past due class when theres more than a few hours difference",
                  "fullTitle": "<DueDate> past due dates should render past due class when theres more than a few hours difference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var testDate = createTestDate({\n  dateFn: _dateFns.subDays,\n  amount: 1\n});\nrenderAndAssertDueDate(testDate);",
                  "err": {},
                  "uuid": "74520083-615e-49fe-b9a0-40d40298c3f9",
                  "parentUUID": "40afd796-167a-4e23-b3bd-d25d88568135",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b247c14-438a-4431-8def-63646f3d9daf",
                "35915348-1a9c-4d78-8b40-e05c93b9a561",
                "4ba72ad8-b7bb-46b3-a23f-58ccc38c51ea",
                "74520083-615e-49fe-b9a0-40d40298c3f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c1b198d2-1374-46b9-8609-92ac6eab5cae",
              "title": "upcoming due dates",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/DueDate.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/DueDate.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render file due class when more than a days difference",
                  "fullTitle": "<DueDate> upcoming due dates should render file due class when more than a days difference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var testDate = createTestDate({\n  dateFn: _dateFns.addDays,\n  amount: 3\n});\nrenderAndAssertDueDate(testDate);",
                  "err": {},
                  "uuid": "571756aa-28fa-44e2-b37d-0fdec63a8e5b",
                  "parentUUID": "c1b198d2-1374-46b9-8609-92ac6eab5cae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render file due class when more than a months difference",
                  "fullTitle": "<DueDate> upcoming due dates should render file due class when more than a months difference",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var testDate = createTestDate({\n  dateFn: _dateFns.addMonths,\n  amount: 10\n});\nrenderAndAssertDueDate(testDate);",
                  "err": {},
                  "uuid": "778de63a-4120-4dbf-ad9b-efe739c3b067",
                  "parentUUID": "c1b198d2-1374-46b9-8609-92ac6eab5cae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render file due class when more than a years difference",
                  "fullTitle": "<DueDate> upcoming due dates should render file due class when more than a years difference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var testDate = createTestDate({\n  dateFn: _dateFns.addMonths,\n  amount: 15\n});\nrenderAndAssertDueDate(testDate);",
                  "err": {},
                  "uuid": "0254a4aa-fe3a-4004-999f-2ec5133f5c00",
                  "parentUUID": "c1b198d2-1374-46b9-8609-92ac6eab5cae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "571756aa-28fa-44e2-b37d-0fdec63a8e5b",
                "778de63a-4120-4dbf-ad9b-efe739c3b067",
                "0254a4aa-fe3a-4004-999f-2ec5133f5c00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d5526fef-209a-4bde-beeb-c46cf2a029b7",
          "title": "<FilesPage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"<FilesPage>\"",
              "fullTitle": "<FilesPage> \"before each\" hook in \"<FilesPage>\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stubbing out AdditionalEvidencePage because we're not interested\n// in setting up all of the redux state needed to test it\nstub = _sinon.default.stub(AdditionalEvidencePage, 'default');\nstub.returns(/*#__PURE__*/_react.default.createElement(\"div\", {\n  \"data-testid\": \"additional-evidence-page\"\n}));\nsetPageFocusSpy = _sinon.default.spy(helpers, 'setPageFocus');",
              "err": {},
              "uuid": "c7856c35-6df7-4deb-a4e7-177f57102278",
              "parentUUID": "d5526fef-209a-4bde-beeb-c46cf2a029b7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"<FilesPage>\"",
              "fullTitle": "<FilesPage> \"after each\" hook in \"<FilesPage>\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "stub.restore();\nsetPageFocusSpy.restore();",
              "err": {},
              "uuid": "8760f73c-ffd2-41e2-a0c1-7053e950d0c0",
              "parentUUID": "d5526fef-209a-4bde-beeb-c46cf2a029b7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should render loading state",
              "fullTitle": "<FilesPage> should render loading state",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n    loading: true,\n    message: {\n      title: 'Test',\n      body: 'Body'\n    }\n  }))),\n  container = _renderWithRouter.container;\n(0, _chai.expect)((0, _index.$)('.claim-files', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
              "err": {},
              "uuid": "ffdb8c64-de48-4c46-a7da-a5088562fff5",
              "parentUUID": "d5526fef-209a-4bde-beeb-c46cf2a029b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render null when claim empty",
              "fullTitle": "<FilesPage> should render null when claim empty",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n    message: {\n      title: 'Test',\n      body: 'Body'\n    }\n  }))),\n  container = _renderWithRouter2.container,\n  getByText = _renderWithRouter2.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-files', container)).to.not.exist;\ngetByText('Claim status is unavailable');",
              "err": {},
              "uuid": "8886e62f-9769-4caf-9417-c36ddc2dc3d7",
              "parentUUID": "d5526fef-209a-4bde-beeb-c46cf2a029b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render null when claim null",
              "fullTitle": "<FilesPage> should render null when claim null",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n    claim: null,\n    message: {\n      title: 'Test',\n      body: 'Body'\n    }\n  }))),\n  container = _renderWithRouter3.container,\n  getByText = _renderWithRouter3.getByText;\n(0, _chai.expect)((0, _index.$)('.claim-files', container)).to.not.exist;\ngetByText('Claim status is unavailable');",
              "err": {},
              "uuid": "661371a2-6e8b-4f6f-963d-6f94d7ea1fb5",
              "parentUUID": "d5526fef-209a-4bde-beeb-c46cf2a029b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clear alert",
              "fullTitle": "<FilesPage> should clear alert",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  id: '1',\n  type: 'claim',\n  attributes: {\n    claimDate: '2023-01-01',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-02-08',\n      latestPhaseType: 'INITIAL_REVIEW',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08'\n      }\n    },\n    closeDate: null,\n    documentsNeeded: false,\n    decisionLetterSent: false,\n    status: 'INITIAL_REVIEW',\n    supportingDocuments: [],\n    trackedItems: []\n  }\n};\nvar clearNotification = _sinon.default.spy();\nvar message = {\n  title: 'Test',\n  body: 'Test'\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n  clearNotification: clearNotification,\n  message: message,\n  claim: claim\n})));\n(0, _chai.expect)(clearNotification.called).to.be.false;\ntree.subTree('ClaimDetailLayout').props.clearNotification();\n(0, _chai.expect)(clearNotification.called).to.be.true;",
              "err": {},
              "uuid": "d27e350e-9236-44e5-b8e4-026f34399615",
              "parentUUID": "d5526fef-209a-4bde-beeb-c46cf2a029b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clear notification when leaving",
              "fullTitle": "<FilesPage> should clear notification when leaving",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  id: '1',\n  type: 'claim',\n  attributes: {\n    claimDate: '2023-01-01',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-02-08',\n      latestPhaseType: 'INITIAL_REVIEW',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08'\n      }\n    },\n    closeDate: null,\n    documentsNeeded: false,\n    decisionLetterSent: false,\n    status: 'INITIAL_REVIEW',\n    supportingDocuments: [{\n      id: '123456',\n      originalFileName: 'test.pdf',\n      documentTypeLabel: 'Buddy / Lay Statement',\n      uploadDate: '2023-03-04'\n    }],\n    trackedItems: []\n  }\n};\nvar clearNotification = _sinon.default.spy();\nvar message = {\n  title: 'Test',\n  body: 'Test'\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n  clearNotification: clearNotification,\n  message: message,\n  claim: claim\n})));\n(0, _chai.expect)(clearNotification.called).to.be.false;\ntree.getMountedInstance().componentWillUnmount();\n(0, _chai.expect)(clearNotification.called).to.be.true;",
              "err": {},
              "uuid": "607ae1a0-bc6f-4728-b220-8dc201e505f6",
              "parentUUID": "d5526fef-209a-4bde-beeb-c46cf2a029b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3f99aac5-7433-4ecf-a692-406797591dba",
              "title": "pageFocus",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should call setPageFocus when location.hash is empty",
                  "fullTitle": "<FilesPage> pageFocus should call setPageFocus when location.hash is empty",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "a6695899-8f95-404f-a2e2-7db3c62186f6",
                  "parentUUID": "3f99aac5-7433-4ecf-a692-406797591dba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not call setPageFocus when location.hash is not empty",
                  "fullTitle": "<FilesPage> pageFocus should not call setPageFocus when location.hash is not empty",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "35b47986-9462-433a-8098-3e1d31b53a41",
                  "parentUUID": "3f99aac5-7433-4ecf-a692-406797591dba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should focus on the Notification Alert when one exists",
                  "fullTitle": "<FilesPage> pageFocus should focus on the Notification Alert when one exists",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
                  "err": {},
                  "uuid": "f2430d03-82c2-4a30-b2f4-e17d627a21fe",
                  "parentUUID": "3f99aac5-7433-4ecf-a692-406797591dba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6695899-8f95-404f-a2e2-7db3c62186f6",
                "35b47986-9462-433a-8098-3e1d31b53a41",
                "f2430d03-82c2-4a30-b2f4-e17d627a21fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "273e78f8-64dc-4723-97a9-94a54bbabd89",
              "title": "document.title",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not update document title at mount-time if claim is not available",
                  "fullTitle": "<FilesPage> document.title should not update document title at mount-time if claim is not available",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, props)));\n(0, _chai.expect)(document.title).to.equal('');",
                  "err": {},
                  "uuid": "7b90bd64-97bf-4fe4-bf42-af8345b3c389",
                  "parentUUID": "273e78f8-64dc-4723-97a9-94a54bbabd89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update document title with claim details at mount-time if claim is already loaded",
                  "fullTitle": "<FilesPage> document.title should update document title with claim details at mount-time if claim is already loaded",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n  claim: claim\n}))));\n(0, _chai.expect)(document.title).to.equal('Files for September 4, 2024 Compensation Claim | Veterans Affairs');",
                  "err": {},
                  "uuid": "89257ace-91b0-4919-8072-1aa1e4fc37a6",
                  "parentUUID": "273e78f8-64dc-4723-97a9-94a54bbabd89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update document title with claim details after mount once the claim has loaded",
                  "fullTitle": "<FilesPage> document.title should update document title with claim details after mount once the claim has loaded",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter5 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n    loading: true\n  })))),\n  rerender = _renderWithRouter5.rerender;\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n  claim: claim\n}))));\n(0, _chai.expect)(document.title).to.equal('Files for September 4, 2024 Compensation Claim | Veterans Affairs');",
                  "err": {},
                  "uuid": "b2557bf4-0715-4337-9c5b-57a95a3d40ec",
                  "parentUUID": "273e78f8-64dc-4723-97a9-94a54bbabd89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update document title with a default message after mount once the claim fails to load",
                  "fullTitle": "<FilesPage> document.title should update document title with a default message after mount once the claim fails to load",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter6 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n    loading: true\n  })))),\n  rerender = _renderWithRouter6.rerender;\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n  claim: null\n}))));\n(0, _chai.expect)(document.title).to.equal('Files for Your Claim | Veterans Affairs');",
                  "err": {},
                  "uuid": "0569cf56-6840-4356-98ab-660183d3a38c",
                  "parentUUID": "273e78f8-64dc-4723-97a9-94a54bbabd89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not update document title after mount if the loading status has not changed",
                  "fullTitle": "<FilesPage> document.title should not update document title after mount if the loading status has not changed",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _renderWithRouter7 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n    loading: true\n  })))),\n  rerender = _renderWithRouter7.rerender;\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n  loading: true,\n  message: {\n    title: 'Test',\n    body: 'Body'\n  }\n}))));\n(0, _chai.expect)(document.title).to.equal('');",
                  "err": {},
                  "uuid": "e6df6325-6de5-46ca-a04f-b3c2be5896bb",
                  "parentUUID": "273e78f8-64dc-4723-97a9-94a54bbabd89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b90bd64-97bf-4fe4-bf42-af8345b3c389",
                "89257ace-91b0-4919-8072-1aa1e4fc37a6",
                "b2557bf4-0715-4337-9c5b-57a95a3d40ec",
                "0569cf56-6840-4356-98ab-660183d3a38c",
                "e6df6325-6de5-46ca-a04f-b3c2be5896bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "a81c97ce-99cb-4916-8efe-9e3d48a32a3d",
              "title": "when claim is open",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render files page, showing additional evidence section without alerts, and docs filed section",
                  "fullTitle": "<FilesPage> when claim is open should render files page, showing additional evidence section without alerts, and docs filed section",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: '1',\n  type: 'claim',\n  attributes: {\n    claimDate: '2023-01-01',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-02-08',\n      latestPhaseType: 'INITIAL_REVIEW',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08'\n      }\n    },\n    closeDate: null,\n    documentsNeeded: false,\n    decisionLetterSent: false,\n    status: 'INITIAL_REVIEW',\n    supportingDocuments: [],\n    trackedItems: []\n  }\n};\nvar _renderWithRouter8 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n    claim: claim,\n    message: {\n      title: 'Test',\n      body: 'Body'\n    },\n    clearNotification: function clearNotification() {}\n  })))),\n  container = _renderWithRouter8.container,\n  getByTestId = _renderWithRouter8.getByTestId;\nvar filesPage = (0, _index.$)('#tabPanelFiles', container);\n(0, _chai.expect)(filesPage).to.exist;\n(0, _chai.expect)((0, _index.$)('.claim-file-header-container', container)).to.exist;\n(0, _chai.expect)(getByTestId('additional-evidence-page')).to.exist;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.claims-requested-files-container', container)).not.to.exist;",
                  "err": {},
                  "uuid": "e4397e14-e44d-418d-89ac-b24fd1825dbc",
                  "parentUUID": "a81c97ce-99cb-4916-8efe-9e3d48a32a3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render files page, showing additional evidence section with alerts, and docs filed section when using lighthouse",
                  "fullTitle": "<FilesPage> when claim is open should render files page, showing additional evidence section with alerts, and docs filed section when using lighthouse",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: '1',\n  type: 'claim',\n  attributes: {\n    claimDate: '2023-01-01',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-02-08',\n      latestPhaseType: 'INITIAL_REVIEW',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08'\n      }\n    },\n    closeDate: null,\n    documentsNeeded: true,\n    decisionLetterSent: false,\n    status: 'INITIAL_REVIEW',\n    supportingDocuments: [],\n    trackedItems: [{\n      id: 1,\n      status: 'NEEDED_FROM_YOU',\n      displayName: 'Test',\n      description: 'Test',\n      suspenseDate: '2024-02-01',\n      date: '2023-01-01'\n    }]\n  }\n};\nvar _renderWithRouter9 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n    claim: claim,\n    message: {\n      title: 'Test',\n      body: 'Body'\n    },\n    clearNotification: function clearNotification() {}\n  })))),\n  container = _renderWithRouter9.container,\n  getByTestId = _renderWithRouter9.getByTestId;\nvar filesPage = (0, _index.$)('#tabPanelFiles', container);\n(0, _chai.expect)(filesPage).to.exist;\n(0, _chai.expect)((0, _index.$)('.claim-file-header-container', container)).to.exist;\n(0, _chai.expect)(getByTestId('additional-evidence-page')).to.exist;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.claims-requested-files-container', container)).to.not.exist;",
                  "err": {},
                  "uuid": "537da7cb-4dd4-4792-82a8-6445ba9497d8",
                  "parentUUID": "a81c97ce-99cb-4916-8efe-9e3d48a32a3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "1b19e808-2612-4382-a845-067d2040fa5d",
                  "title": "when cst5103UpdateEnabled feature flag is disabled",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render ask va to decide component",
                      "fullTitle": "<FilesPage> when claim is open when cst5103UpdateEnabled feature flag is disabled should render ask va to decide component",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var claim = {\n  id: 1,\n  type: 'claim',\n  attributes: {\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-03-04',\n      latestPhaseType: 'GATHERING_OF_EVIDENCE',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08',\n        phase2CompleteDate: '2023-03-04'\n      }\n    },\n    documentsNeeded: false,\n    decisionLetterSent: false,\n    evidenceWaiverSubmitted5103: false,\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION',\n    supportingDocuments: [],\n    trackedItems: []\n  }\n};\nvar _renderWithRouter10 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n    claim: claim,\n    message: {\n      title: 'Test',\n      body: 'Body'\n    },\n    clearNotification: function clearNotification() {}\n  })))),\n  getByText = _renderWithRouter10.getByText;\ngetByText('Ask for your Claim Decision');",
                      "err": {},
                      "uuid": "19077ae1-1e7b-4462-a224-dcd893d15d27",
                      "parentUUID": "1b19e808-2612-4382-a845-067d2040fa5d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "19077ae1-1e7b-4462-a224-dcd893d15d27"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "3e44123a-5a78-46d6-9b09-a47a4e7ca04c",
                  "title": "when cst5103UpdateEnabled feature flag is enabled",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not render ask va to decide component",
                      "fullTitle": "<FilesPage> when claim is open when cst5103UpdateEnabled feature flag is enabled should not render ask va to decide component",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var claim = {\n  id: 1,\n  type: 'claim',\n  attributes: {\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-03-04',\n      latestPhaseType: 'GATHERING_OF_EVIDENCE',\n      previousPhases: {\n        phase1CompleteDate: '2023-02-08',\n        phase2CompleteDate: '2023-03-04'\n      }\n    },\n    documentsNeeded: false,\n    decisionLetterSent: false,\n    evidenceWaiverSubmitted5103: false,\n    status: 'EVIDENCE_GATHERING_REVIEW_DECISION',\n    supportingDocuments: [],\n    trackedItems: []\n  }\n};\nvar _renderWithRouter11 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(true)\n  }, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n    claim: claim,\n    message: {\n      title: 'Test',\n      body: 'Body'\n    },\n    clearNotification: function clearNotification() {}\n  })))),\n  queryByText = _renderWithRouter11.queryByText;\n(0, _chai.expect)(queryByText('Ask for your Claim Decision')).to.not.exist;",
                      "err": {},
                      "uuid": "39e6f00d-517d-4c12-b77d-3d382bf69d86",
                      "parentUUID": "3e44123a-5a78-46d6-9b09-a47a4e7ca04c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "39e6f00d-517d-4c12-b77d-3d382bf69d86"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 8,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [
                "e4397e14-e44d-418d-89ac-b24fd1825dbc",
                "537da7cb-4dd4-4792-82a8-6445ba9497d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "29452e62-e878-462f-8285-9b6b880949ed",
              "title": "when claim is closed",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/FilesPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render files page, showing additional evidence section, and docs filed section",
                  "fullTitle": "<FilesPage> when claim is closed should render files page, showing additional evidence section, and docs filed section",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: '1',\n  type: 'claim',\n  attributes: {\n    claimDate: '2023-01-01',\n    claimPhaseDates: {\n      currentPhaseBack: false,\n      phaseChangeDate: '2023-01-31',\n      latestPhaseType: 'COMPLETE',\n      previousPhases: {\n        phase7CompleteDate: '2023-02-08'\n      }\n    },\n    closeDate: '2023-01-31',\n    documentsNeeded: false,\n    decisionLetterSent: false,\n    status: 'COMPLETE',\n    supportingDocuments: [],\n    trackedItems: []\n  }\n};\nvar _renderWithRouter12 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_FilesPage.FilesPage, _extends({}, props, {\n    claim: claim,\n    message: {\n      title: 'Test',\n      body: 'Body'\n    },\n    clearNotification: function clearNotification() {}\n  })))),\n  container = _renderWithRouter12.container,\n  getByTestId = _renderWithRouter12.getByTestId;\nvar filesPage = (0, _index.$)('#tabPanelFiles', container);\n(0, _chai.expect)(filesPage).to.exist;\n(0, _chai.expect)((0, _index.$)('.claim-file-header-container', container)).to.exist;\n(0, _chai.expect)(getByTestId('additional-evidence-page')).to.exist;\n(0, _chai.expect)((0, _index.$)('.documents-filed-container', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.claims-requested-files-container', container)).not.to.exist;",
                  "err": {},
                  "uuid": "a7add73a-86a0-446e-8fb0-52581e22a34a",
                  "parentUUID": "29452e62-e878-462f-8285-9b6b880949ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7add73a-86a0-446e-8fb0-52581e22a34a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "ffdb8c64-de48-4c46-a7da-a5088562fff5",
            "8886e62f-9769-4caf-9417-c36ddc2dc3d7",
            "661371a2-6e8b-4f6f-963d-6f94d7ea1fb5",
            "d27e350e-9236-44e5-b8e4-026f34399615",
            "607ae1a0-bc6f-4728-b220-8dc201e505f6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4a24b22c-525b-4d1a-9dea-ae6a347ae712",
          "title": "<IndexLink>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/IndexLink.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/IndexLink.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render IndexLink when files tab is not active",
              "fullTitle": "<IndexLink> should render IndexLink when files tab is not active",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, {\n    initialEntries: [\"/files\"]\n  }, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    path: \"files\",\n    element: /*#__PURE__*/_react.default.createElement(_IndexLink.default, props)\n  })))),\n  container = _render.container;\n(0, _chai.expect)((0, _index.$)('.tab', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.tab.tab--current', container)).to.not.exist;",
              "err": {},
              "uuid": "3f8f4bff-0cdf-4d22-a4fa-22833503303d",
              "parentUUID": "4a24b22c-525b-4d1a-9dea-ae6a347ae712",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render IndexLink when status tab is active",
              "fullTitle": "<IndexLink> should render IndexLink when status tab is active",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.MemoryRouter, {\n    initialEntries: [\"/status\"]\n  }, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDomV5Compat.Route, {\n    path: \"status\",\n    element: /*#__PURE__*/_react.default.createElement(_IndexLink.default, props)\n  })))),\n  container = _render2.container;\n(0, _chai.expect)((0, _index.$)('.tab.tab--current', container)).to.exist;",
              "err": {},
              "uuid": "71e7e225-00c3-49f4-b969-b2609cf31b77",
              "parentUUID": "4a24b22c-525b-4d1a-9dea-ae6a347ae712",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f8f4bff-0cdf-4d22-a4fa-22833503303d",
            "71e7e225-00c3-49f4-b969-b2609cf31b77"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "adabe204-2597-406e-831a-e253108e879a",
          "title": "<NeedHelp>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/NeedHelp.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/NeedHelp.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<NeedHelp> should render",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_NeedHelp.NeedHelp, null)),\n  container = _render.container;\n(0, _chai.expect)((0, _index.$)('va-need-help', container)).to.exist;\n(0, _chai.expect)((0, _index.$$)('va-telephone', container).length).to.equal(2);",
              "err": {},
              "uuid": "4a29c5d5-cbb0-4986-ae4c-9d9d03f003c3",
              "parentUUID": "adabe204-2597-406e-831a-e253108e879a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a3fa8e1d-753e-482b-a24d-fd5844efb093",
              "title": "when cstFriendlyEvidenceRequests is true",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/NeedHelp.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/NeedHelp.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should render updated UI",
                  "fullTitle": "<NeedHelp> when cstFriendlyEvidenceRequests is true should render updated UI",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var item = {\n  closedDate: null,\n  description: '21-4142 text',\n  displayName: '21-4142/21-4142a',\n  friendlyName: 'Authorization to Disclose Information',\n  friendlyDescription: 'good description',\n  canUploadFile: true,\n  supportAliases: ['VA Form 21-4142'],\n  id: 14268,\n  overdue: true,\n  receivedDate: null,\n  requestedDate: '2024-03-07',\n  status: 'NEEDED_FROM_YOU',\n  suspenseDate: '2024-04-07',\n  uploadsAllowed: true,\n  documents: '[]',\n  date: '2024-03-07'\n};\nvar _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_NeedHelp.NeedHelp, {\n    item: item\n  })),\n  container = _render2.container;\n(0, _chai.expect)((0, _index.$)('va-need-help', container)).to.exist;\n(0, _chai.expect)((0, _index.$$)('va-telephone', container).length).to.equal(2);\nvar alias = container.querySelector('.vads-u-font-weight--bold');\n(0, _chai.expect)(alias.textContent).to.include('VA Form 21-4142');",
                  "err": {},
                  "uuid": "fb1e235d-7632-41c9-8e38-b9be88085f1d",
                  "parentUUID": "a3fa8e1d-753e-482b-a24d-fd5844efb093",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render aliases with commas and \"or\" correctly",
                  "fullTitle": "<NeedHelp> when cstFriendlyEvidenceRequests is true should render aliases with commas and \"or\" correctly",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var item = {\n  supportAliases: ['Alias1', 'Alias2', 'Alias3', 'Alias4']\n};\nvar _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_NeedHelp.NeedHelp, {\n    item: item\n  })),\n  queryAllByText = _render3.queryAllByText;\n(0, _chai.expect)(queryAllByText('\"Alias1\", \"Alias2\", \"Alias3\" or \"Alias4\"'));",
                  "err": {},
                  "uuid": "e1fda82a-58b0-4868-afee-ed34e15b54ff",
                  "parentUUID": "a3fa8e1d-753e-482b-a24d-fd5844efb093",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb1e235d-7632-41c9-8e38-b9be88085f1d",
                "e1fda82a-58b0-4868-afee-ed34e15b54ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "4a29c5d5-cbb0-4986-ae4c-9d9d03f003c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "cb084ced-cc41-4259-a913-19bbe7a22b9a",
          "title": "<NoClaims>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/NoClaims.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/NoClaims.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render component",
              "fullTitle": "<NoClaims> should render component",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_NoClaims.default, null)),\n  getByText = _renderWithRouter.getByText;\ngetByText('You do not have any submitted claims');\ngetByText('This page shows only completed claim applications.');",
              "err": {},
              "uuid": "e935cf68-61a1-4b8f-bff0-6225e6abc7e2",
              "parentUUID": "cb084ced-cc41-4259-a913-19bbe7a22b9a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e935cf68-61a1-4b8f-bff0-6225e6abc7e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7bdd141b-9b26-4b91-8fa3-56b2f9181048",
          "title": "<Notification>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/Notification.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/Notification.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render success class",
              "fullTitle": "<Notification> should render success class",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_Notification.default, {\n    title: title,\n    body: body\n  })),\n  container = _render.container,\n  getByText = _render.getByText;\nvar selector = container.querySelector('va-alert');\n(0, _chai.expect)(selector).to.exist;\n(0, _chai.expect)(selector).to.have.attr('status', 'success');\ngetByText(title);\ngetByText(body);",
              "err": {},
              "uuid": "2bfd9eeb-f36a-4846-bd1b-9ab4ae14ee19",
              "parentUUID": "7bdd141b-9b26-4b91-8fa3-56b2f9181048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render error class",
              "fullTitle": "<Notification> should render error class",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render2 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_Notification.default, {\n    title: title,\n    body: body,\n    type: \"error\"\n  })),\n  container = _render2.container,\n  getByText = _render2.getByText;\nvar selector = container.querySelector('va-alert');\n(0, _chai.expect)(selector).to.exist;\n(0, _chai.expect)(selector).to.have.attr('status', 'error');\ngetByText(title);\ngetByText(body);",
              "err": {},
              "uuid": "2370fa96-c602-4505-9533-ded213f3dacf",
              "parentUUID": "7bdd141b-9b26-4b91-8fa3-56b2f9181048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render alert thats closeable",
              "fullTitle": "<Notification> should render alert thats closeable",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _render3 = (0, _react2.render)(/*#__PURE__*/_react.default.createElement(_Notification.default, {\n    title: title,\n    body: body,\n    onClose: function onClose() {\n      return true;\n    }\n  })),\n  container = _render3.container,\n  getByText = _render3.getByText;\nvar selector = container.querySelector('va-alert');\n(0, _chai.expect)(selector).to.exist;\n(0, _chai.expect)(selector).to.have.attr('closeable', 'true');\ngetByText(title);\ngetByText(body);",
              "err": {},
              "uuid": "d7ebeb95-9e3a-4fcc-baa6-dd2d72e143f5",
              "parentUUID": "7bdd141b-9b26-4b91-8fa3-56b2f9181048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render alert and focus",
              "fullTitle": "<Notification> should render alert and focus",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "25799fc4-9e8b-4bb9-9235-cd554c3a4541",
              "parentUUID": "7bdd141b-9b26-4b91-8fa3-56b2f9181048",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2bfd9eeb-f36a-4846-bd1b-9ab4ae14ee19",
            "2370fa96-c602-4505-9533-ded213f3dacf",
            "d7ebeb95-9e3a-4fcc-baa6-dd2d72e143f5",
            "25799fc4-9e8b-4bb9-9235-cd554c3a4541"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c95cb56a-cba1-455a-801f-f4ecd4609033",
          "title": "<OverviewPage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render null when claim empty",
              "fullTitle": "<OverviewPage> should render null when claim empty",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, props))),\n  container = _renderWithRouter.container,\n  getByText = _renderWithRouter.getByText;\n(0, _chai.expect)((0, _index.$)('.overview-container', container)).to.not.exist;\ngetByText('Claim status is unavailable');",
              "err": {},
              "uuid": "2588ad82-f1c0-45a6-bdac-b64d9b51c2b9",
              "parentUUID": "c95cb56a-cba1-455a-801f-f4ecd4609033",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render null when claim is null",
              "fullTitle": "<OverviewPage> should render null when claim is null",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: null\n  })))),\n  container = _renderWithRouter2.container,\n  getByText = _renderWithRouter2.getByText;\n(0, _chai.expect)((0, _index.$)('.overview-container', container)).to.not.exist;\ngetByText('Claim status is unavailable');",
              "err": {},
              "uuid": "023f7b3d-d00a-4bf9-8e0d-73e8bfdd6677",
              "parentUUID": "c95cb56a-cba1-455a-801f-f4ecd4609033",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "8e287f86-5a00-4bb3-be59-b91d00ac6758",
              "title": "cstClaimPhases feature flag enabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "846ecd56-34c8-4649-a304-56ca71330129",
                  "title": "document.title",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not update document title at mount-time if claim is not available",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled document.title should not update document title at mount-time if claim is not available",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, props)));\n(0, _chai.expect)(document.title).to.equal('');",
                      "err": {},
                      "uuid": "e93c4b1f-1488-466c-8bf6-9c2ca4e52935",
                      "parentUUID": "846ecd56-34c8-4649-a304-56ca71330129",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update document title with claim details at mount-time if claim is already loaded",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled document.title should update document title with claim details at mount-time if claim is already loaded",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n  claim: openDependencyClaim\n}))));\n(0, _chai.expect)(document.title).to.equal('Overview of January 1, 2023 Dependency Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "cb6fc5b7-ea4b-440d-9537-1ba7770b40cb",
                      "parentUUID": "846ecd56-34c8-4649-a304-56ca71330129",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update document title with claim details after mount once the claim has loaded",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled document.title should update document title with claim details after mount once the claim has loaded",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    loading: true\n  })))),\n  rerender = _renderWithRouter3.rerender;\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n  claim: openCompensationClaim\n}))));\n(0, _chai.expect)(document.title).to.equal('Overview of January 1, 2023 Compensation Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "37bd5053-76fb-4e09-a56a-f5ca4b25a45b",
                      "parentUUID": "846ecd56-34c8-4649-a304-56ca71330129",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update document title with a default message after mount once the claim fails to load",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled document.title should update document title with a default message after mount once the claim fails to load",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    loading: true\n  })))),\n  rerender = _renderWithRouter4.rerender;\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n  claim: null\n}))));\n(0, _chai.expect)(document.title).to.equal('Overview of Your Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "19460998-6281-4cff-9b49-18a96a1991d3",
                      "parentUUID": "846ecd56-34c8-4649-a304-56ca71330129",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not update document title after mount if the loading status has not changed",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled document.title should not update document title after mount if the loading status has not changed",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter5 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    loading: true\n  })))),\n  rerender = _renderWithRouter5.rerender;\n(0, _utils.rerenderWithRouter)(rerender, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n  loading: true,\n  message: {\n    title: 'Test',\n    body: 'Body'\n  }\n}))));\n(0, _chai.expect)(document.title).to.equal('');",
                      "err": {},
                      "uuid": "d389735e-e5ac-40ed-86a0-d1aced331531",
                      "parentUUID": "846ecd56-34c8-4649-a304-56ca71330129",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e93c4b1f-1488-466c-8bf6-9c2ca4e52935",
                    "cb6fc5b7-ea4b-440d-9537-1ba7770b40cb",
                    "37bd5053-76fb-4e09-a56a-f5ca4b25a45b",
                    "19460998-6281-4cff-9b49-18a96a1991d3",
                    "d389735e-e5ac-40ed-86a0-d1aced331531"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 26,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "b3c212bc-baa7-42df-9adc-4eb5368b336a",
                  "title": "when claim is closed and disability compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render empty content when loading",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled when claim is closed and disability compensation claim should render empty content when loading",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter6 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: closedCompensationClaim,\n    loading: true\n  })))),\n  container = _renderWithRouter6.container;\nvar overviewSection = (0, _index.$)('.overview-container', container);\n(0, _chai.expect)(overviewSection).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
                      "err": {},
                      "uuid": "d9b8a5d8-c14b-4682-b92e-61d67b92ae4f",
                      "parentUUID": "b3c212bc-baa7-42df-9adc-4eb5368b336a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render overview header, claim phase diagram and stepper",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled when claim is closed and disability compensation claim should render overview header, claim phase diagram and stepper",
                      "timedOut": false,
                      "duration": 17,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter7 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: closedCompensationClaim\n  })))),\n  container = _renderWithRouter7.container,\n  getByText = _renderWithRouter7.getByText;\nvar overviewPage = (0, _index.$)('#tabPanelFiles', container);\n(0, _chai.expect)(overviewPage).to.exist;\ngetByText('Overview of the claim process');\ngetByText('There are 8 steps in the claim process. It’s common for claims to repeat steps 3 to 6 if we need more information.');\n(0, _chai.expect)((0, _index.$)('.claim-phase-diagram', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.claim-timeline', container)).to.not.exist;",
                      "err": {},
                      "uuid": "e02d658e-5e2f-4c09-a7f1-59fb3118f5b7",
                      "parentUUID": "b3c212bc-baa7-42df-9adc-4eb5368b336a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d9b8a5d8-c14b-4682-b92e-61d67b92ae4f",
                    "e02d658e-5e2f-4c09-a7f1-59fb3118f5b7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 19,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "e510b62f-23e4-426f-91ee-61abe53cdf5c",
                  "title": "when claim is closed and dependency claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render empty content when loading",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled when claim is closed and dependency claim should render empty content when loading",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter8 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: closedDependencyClaim,\n    loading: true\n  })))),\n  container = _renderWithRouter8.container;\nvar overviewSection = (0, _index.$)('.overview-container', container);\n(0, _chai.expect)(overviewSection).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
                      "err": {},
                      "uuid": "91b280bd-2617-4318-8eab-81ef4ec0566a",
                      "parentUUID": "e510b62f-23e4-426f-91ee-61abe53cdf5c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render claim timeline",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled when claim is closed and dependency claim should render claim timeline",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter9 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: closedDependencyClaim\n  })))),\n  container = _renderWithRouter9.container,\n  getByText = _renderWithRouter9.getByText;\nvar overviewPage = (0, _index.$)('#tabPanelFiles', container);\n(0, _chai.expect)(overviewPage).to.exist;\ngetByText('Overview of the claim process');\ngetByText('Learn about the VA claim process and what happens after you file your claim.');\n(0, _chai.expect)((0, _index.$)('.claim-phase-diagram', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-process-list', container)).to.exist;",
                      "err": {},
                      "uuid": "778ebbd7-ae1a-4713-b956-a619ee9815e2",
                      "parentUUID": "e510b62f-23e4-426f-91ee-61abe53cdf5c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "91b280bd-2617-4318-8eab-81ef4ec0566a",
                    "778ebbd7-ae1a-4713-b956-a619ee9815e2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 9,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "2a36c2a5-07cf-4c42-bc64-38303cde77ae",
                  "title": "when claim is open and disability compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render empty content when loading",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled when claim is open and disability compensation claim should render empty content when loading",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter10 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({\n    claim: openCompensationClaim\n  }, props, {\n    loading: true\n  })))),\n  container = _renderWithRouter10.container;\nvar overviewSection = (0, _index.$)('.overview-container', container);\n(0, _chai.expect)(overviewSection).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
                      "err": {},
                      "uuid": "e82d0863-c4bc-479b-8997-3b5d3a7371b6",
                      "parentUUID": "2a36c2a5-07cf-4c42-bc64-38303cde77ae",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render overview header, claim phase diagram and stepper",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled when claim is open and disability compensation claim should render overview header, claim phase diagram and stepper",
                      "timedOut": false,
                      "duration": 19,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter11 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: openCompensationClaim\n  })))),\n  container = _renderWithRouter11.container,\n  getByText = _renderWithRouter11.getByText;\nvar overviewPage = (0, _index.$)('#tabPanelFiles', container);\n(0, _chai.expect)(overviewPage).to.exist;\ngetByText('Overview of the claim process');\ngetByText('There are 8 steps in the claim process. It’s common for claims to repeat steps 3 to 6 if we need more information.');\n(0, _chai.expect)((0, _index.$)('.claim-phase-diagram', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('.claim-timeline', container)).to.not.exist;",
                      "err": {},
                      "uuid": "e661602a-f55f-4754-8443-32248dc712a0",
                      "parentUUID": "2a36c2a5-07cf-4c42-bc64-38303cde77ae",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e82d0863-c4bc-479b-8997-3b5d3a7371b6",
                    "e661602a-f55f-4754-8443-32248dc712a0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 21,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "8337c80e-1c31-4d63-a46d-8c6e31adb6b2",
                  "title": "when claim is open and dependency compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render empty content when loading",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled when claim is open and dependency compensation claim should render empty content when loading",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter12 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({\n    claim: openDependencyClaim\n  }, props, {\n    loading: true\n  })))),\n  container = _renderWithRouter12.container;\nvar overviewSection = (0, _index.$)('.overview-container', container);\n(0, _chai.expect)(overviewSection).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
                      "err": {},
                      "uuid": "1adc53b9-31f3-40b6-8711-2f987fe584cf",
                      "parentUUID": "8337c80e-1c31-4d63-a46d-8c6e31adb6b2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render claim timeline",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag enabled when claim is open and dependency compensation claim should render claim timeline",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter13 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: openDependencyClaim\n  })))),\n  container = _renderWithRouter13.container,\n  getByText = _renderWithRouter13.getByText;\nvar overviewPage = (0, _index.$)('#tabPanelFiles', container);\n(0, _chai.expect)(overviewPage).to.exist;\ngetByText('Overview of the claim process');\ngetByText('Learn about the VA claim process and what happens after you file your claim.');\n(0, _chai.expect)((0, _index.$)('.claim-phase-diagram', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-process-list', container)).to.exist;",
                      "err": {},
                      "uuid": "bbfd7e43-d49d-4560-b1cf-c80d24d8fcc0",
                      "parentUUID": "8337c80e-1c31-4d63-a46d-8c6e31adb6b2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1adc53b9-31f3-40b6-8711-2f987fe584cf",
                    "bbfd7e43-d49d-4560-b1cf-c80d24d8fcc0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 10,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "34d32a07-25c3-4d7a-a947-a6cf5f58de49",
              "title": "cstClaimPhases feature flag disabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9ae5bcce-33cc-4a2f-b53e-bef98f014e76",
                  "title": "when claim is closed and disability compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render empty content when loading",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag disabled when claim is closed and disability compensation claim should render empty content when loading",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter14 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: closedCompensationClaim,\n    loading: true\n  })))),\n  container = _renderWithRouter14.container;\nvar overviewSection = (0, _index.$)('.overview-container', container);\n(0, _chai.expect)(overviewSection).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
                      "err": {},
                      "uuid": "e18b99eb-7f90-4094-9d78-dc8d4bbd2ab7",
                      "parentUUID": "9ae5bcce-33cc-4a2f-b53e-bef98f014e76",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render overview header and timeline",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag disabled when claim is closed and disability compensation claim should render overview header and timeline",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter15 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: closedCompensationClaim\n  })))),\n  container = _renderWithRouter15.container,\n  getByText = _renderWithRouter15.getByText;\nvar overviewPage = (0, _index.$)('#tabPanelFiles', container);\n(0, _chai.expect)(overviewPage).to.exist;\ngetByText('Overview of the claim process');\ngetByText('Learn about the VA claim process and what happens after you file your claim.');\n(0, _chai.expect)((0, _index.$)('.claim-phase-diagram', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-process-list', container)).to.exist;",
                      "err": {},
                      "uuid": "0f80de59-105d-45f7-ba4b-85bb49313d1f",
                      "parentUUID": "9ae5bcce-33cc-4a2f-b53e-bef98f014e76",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e18b99eb-7f90-4094-9d78-dc8d4bbd2ab7",
                    "0f80de59-105d-45f7-ba4b-85bb49313d1f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "026b76eb-d1ca-44c7-9670-1ca913c8308a",
                  "title": "when claim is closed and dependency compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render empty content when loading",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag disabled when claim is closed and dependency compensation claim should render empty content when loading",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter16 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: closedDependencyClaim,\n    loading: true\n  })))),\n  container = _renderWithRouter16.container;\nvar overviewSection = (0, _index.$)('.overview-container', container);\n(0, _chai.expect)(overviewSection).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
                      "err": {},
                      "uuid": "6bd018cc-bfb9-459b-88c6-3d44b01caa9c",
                      "parentUUID": "026b76eb-d1ca-44c7-9670-1ca913c8308a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render overview header and timeline",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag disabled when claim is closed and dependency compensation claim should render overview header and timeline",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter17 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: closedDependencyClaim\n  })))),\n  container = _renderWithRouter17.container,\n  getByText = _renderWithRouter17.getByText;\nvar overviewPage = (0, _index.$)('#tabPanelFiles', container);\n(0, _chai.expect)(overviewPage).to.exist;\ngetByText('Overview of the claim process');\ngetByText('Learn about the VA claim process and what happens after you file your claim.');\n(0, _chai.expect)((0, _index.$)('.claim-phase-diagram', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-process-list', container)).to.exist;",
                      "err": {},
                      "uuid": "5249d9b7-e02e-4856-bcec-c431384c25dd",
                      "parentUUID": "026b76eb-d1ca-44c7-9670-1ca913c8308a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6bd018cc-bfb9-459b-88c6-3d44b01caa9c",
                    "5249d9b7-e02e-4856-bcec-c431384c25dd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "2893fa46-1e60-492e-ade6-3b042f6d4f26",
                  "title": "when claim is open and disability compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render empty content when loading",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag disabled when claim is open and disability compensation claim should render empty content when loading",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter18 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({\n    claim: openCompensationClaim\n  }, props, {\n    loading: true\n  })))),\n  container = _renderWithRouter18.container;\nvar overviewSection = (0, _index.$)('.overview-container', container);\n(0, _chai.expect)(overviewSection).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
                      "err": {},
                      "uuid": "d5dc2d38-7432-46fa-b148-ed90b4fb9f38",
                      "parentUUID": "2893fa46-1e60-492e-ade6-3b042f6d4f26",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render overview header and timeline",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag disabled when claim is open and disability compensation claim should render overview header and timeline",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter19 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: openCompensationClaim\n  })))),\n  container = _renderWithRouter19.container,\n  getByText = _renderWithRouter19.getByText;\nvar overviewPage = (0, _index.$)('#tabPanelFiles', container);\n(0, _chai.expect)(overviewPage).to.exist;\ngetByText('Overview of the claim process');\ngetByText('Learn about the VA claim process and what happens after you file your claim.');\n(0, _chai.expect)((0, _index.$)('.claim-phase-diagram', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-process-list', container)).to.exist;",
                      "err": {},
                      "uuid": "0f382741-7bee-48ab-9d75-8be687639e41",
                      "parentUUID": "2893fa46-1e60-492e-ade6-3b042f6d4f26",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d5dc2d38-7432-46fa-b148-ed90b4fb9f38",
                    "0f382741-7bee-48ab-9d75-8be687639e41"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 9,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "4d944e99-5697-4374-b833-038c604be5b0",
                  "title": "when claim is open and dependency compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/components/OverviewPage.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should render empty content when loading",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag disabled when claim is open and dependency compensation claim should render empty content when loading",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter20 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({\n    claim: openDependencyClaim\n  }, props, {\n    loading: true\n  })))),\n  container = _renderWithRouter20.container;\nvar overviewSection = (0, _index.$)('.overview-container', container);\n(0, _chai.expect)(overviewSection).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
                      "err": {},
                      "uuid": "3b3272fa-e06a-4a7f-9f38-1ab740d9fc96",
                      "parentUUID": "4d944e99-5697-4374-b833-038c604be5b0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should render overview header and timeline",
                      "fullTitle": "<OverviewPage> cstClaimPhases feature flag disabled when claim is open and dependency compensation claim should render overview header and timeline",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var _renderWithRouter21 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore(false)\n  }, /*#__PURE__*/_react.default.createElement(_OverviewPage.OverviewPage, _extends({}, props, {\n    claim: openDependencyClaim\n  })))),\n  container = _renderWithRouter21.container,\n  getByText = _renderWithRouter21.getByText;\nvar overviewPage = (0, _index.$)('#tabPanelFiles', container);\n(0, _chai.expect)(overviewPage).to.exist;\ngetByText('Overview of the claim process');\ngetByText('Learn about the VA claim process and what happens after you file your claim.');\n(0, _chai.expect)((0, _index.$)('.claim-phase-diagram', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('.claim-phase-stepper', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-process-list', container)).to.exist;",
                      "err": {},
                      "uuid": "a3eb6628-c9d1-4500-ad86-c396c45964f4",
                      "parentUUID": "4d944e99-5697-4374-b833-038c604be5b0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3b3272fa-e06a-4a7f-9f38-1ab740d9fc96",
                    "a3eb6628-c9d1-4500-ad86-c396c45964f4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 9,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "2588ad82-f1c0-45a6-bdac-b64d9b51c2b9",
            "023f7b3d-d00a-4bf9-8e0d-73e8bfdd6677"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8a3b3786-c63c-4766-afab-b3b973b1cc4f",
          "title": "<PhaseBackWarning>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/PhaseBackWarning.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/PhaseBackWarning.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render component",
              "fullTitle": "<PhaseBackWarning> should render component",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_PhaseBackWarning.default, null)),\n  getByText = _renderWithRouter.getByText;\ngetByText('Your claim was temporarily moved back to this step for further processing.');",
              "err": {},
              "uuid": "db00eafb-2972-4baf-a248-394603695777",
              "parentUUID": "8a3b3786-c63c-4766-afab-b3b973b1cc4f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "db00eafb-2972-4baf-a248-394603695777"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ceee7bca-681a-47e3-8e2b-7bc6a2f90b92",
          "title": "<Standard5103NoticePage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/Standard5103NoticePage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/Standard5103NoticePage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "when component mounts should set document title",
              "fullTitle": "<Standard5103NoticePage> when component mounts should set document title",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_Standard5103NoticePage.Standard5103NoticePage, props)),\n  container = _renderWithRouter.container;\n(0, _chai.expect)((0, _index.$)('#default-5103-notice-page', container)).to.not.exist;\n(0, _chai.expect)(document.title).to.equal('Review your evidence list (5103 notice) | Veterans Affairs');",
              "err": {},
              "uuid": "246e91d6-cc79-4377-b8cd-7320be1308fb",
              "parentUUID": "ceee7bca-681a-47e3-8e2b-7bc6a2f90b92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render loading div",
              "fullTitle": "<Standard5103NoticePage> should render loading div",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_Standard5103NoticePage.Standard5103NoticePage, _extends({}, props, {\n    loading: true\n  }))),\n  container = _renderWithRouter2.container;\n(0, _chai.expect)((0, _index.$)('#default-5103-notice-page', container)).to.not.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
              "err": {},
              "uuid": "2c3aa4aa-ece0-4590-a918-82abbd1ebf22",
              "parentUUID": "ceee7bca-681a-47e3-8e2b-7bc6a2f90b92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render standard 5103 notice page",
              "fullTitle": "<Standard5103NoticePage> should render standard 5103 notice page",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: getStore()\n  }, /*#__PURE__*/_react.default.createElement(_Standard5103NoticePage.Standard5103NoticePage, _extends({}, props, {\n    claim: claim\n  })))),\n  container = _renderWithRouter3.container;\n(0, _chai.expect)((0, _index.$)('#default-5103-notice-page', container)).to.exist;\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.not.exist;",
              "err": {},
              "uuid": "04bc9110-c5b9-4f05-9b2c-7cd23e442076",
              "parentUUID": "ceee7bca-681a-47e3-8e2b-7bc6a2f90b92",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "246e91d6-cc79-4377-b8cd-7320be1308fb",
            "2c3aa4aa-ece0-4590-a918-82abbd1ebf22",
            "04bc9110-c5b9-4f05-9b2c-7cd23e442076"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e496fe93-4408-40c9-b93a-89b72aaff3b8",
          "title": "<StemAskVAQuestions>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/StemAskQuestions.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/StemAskQuestions.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<StemAskVAQuestions> should render",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_StemAskVAQuestions.default, null)),\n  getByText = _renderWithRouter.getByText;\ngetByText('Need help?');\ngetByText('Ask a question');\ngetByText('Call us');\ngetByText('Send us mail');\ngetByText('Contact us online through Ask VA');",
              "err": {},
              "uuid": "032c1a8f-f58c-472a-ad19-3aa085fffb26",
              "parentUUID": "e496fe93-4408-40c9-b93a-89b72aaff3b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when click link, should call record event",
              "fullTitle": "<StemAskVAQuestions> when click link, should call record event",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var recordEventStub = _sinon.default.stub(recordEventModule, 'default');\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_StemAskVAQuestions.default, null)),\n  container = _renderWithRouter2.container,\n  getByText = _renderWithRouter2.getByText;\ngetByText('Contact us online through Ask VA');\nvar contactUsLink = (0, _index.$)('a', container);\n_dom.fireEvent.click(contactUsLink);\n(0, _chai.expect)(recordEventStub.calledWith({\n  event: 'nav-ask-va-questions-link-click',\n  'ask-va-questions-header': 'Need help'\n})).to.be.true;\nrecordEventStub.restore();",
              "err": {},
              "uuid": "1da2e2a4-e6e3-4d29-9c92-1be7946bc5ad",
              "parentUUID": "e496fe93-4408-40c9-b93a-89b72aaff3b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "032c1a8f-f58c-472a-ad19-3aa085fffb26",
            "1da2e2a4-e6e3-4d29-9c92-1be7946bc5ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fccfabb1-5721-4ffc-9bfb-1bfff25d78eb",
          "title": "<StemClaimListItem>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/StemClaimListItem.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/StemClaimListItem.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render a denied STEM claim",
              "fullTitle": "<StemClaimListItem> should render a denied STEM claim",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_StemClaimListItem.default, {\n    claim: defaultClaim\n  })),\n  getByText = _renderWithRouter.getByText;\ngetByText('Edith Nourse Rogers STEM Scholarship application');\ngetByText('Received on March 1, 2021');\ngetByText('Status: Denied');\ngetByText('Last updated on: March 2, 2021');",
              "err": {},
              "uuid": "a237a17a-10b2-4e5e-88a3-f9d6e598e450",
              "parentUUID": "fccfabb1-5721-4ffc-9bfb-1bfff25d78eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when click claimCardLink, should call record event",
              "fullTitle": "<StemClaimListItem> when click claimCardLink, should call record event",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var recordEventStub = _sinon.default.stub(recordEventModule, 'default');\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_StemClaimListItem.default, {\n    claim: defaultClaim\n  })),\n  getByText = _renderWithRouter2.getByText,\n  container = _renderWithRouter2.container;\ngetByText('Details');\nvar claimCardLink = (0, _index.$)('a', container);\n_dom.fireEvent.click(claimCardLink);\n(0, _chai.expect)(recordEventStub.calledWith({\n  event: 'cta-action-link-click',\n  'action-link-type': 'secondary',\n  'action-link-click-label': 'Details',\n  'action-link-icon-color': 'blue',\n  'claim-type': 'STEM Scholarship',\n  'claim-last-updated-date': 'March 2, 2021',\n  'claim-submitted-date': 'March 1, 2021',\n  'claim-status': 'Denied'\n})).to.be.true;\nrecordEventStub.restore();",
              "err": {},
              "uuid": "29acc525-b10d-44e7-b609-8463d98e6cdb",
              "parentUUID": "fccfabb1-5721-4ffc-9bfb-1bfff25d78eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render a non-denied STEM claim",
              "fullTitle": "<StemClaimListItem> should not render a non-denied STEM claim",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = _objectSpread(_objectSpread({}, defaultClaim), {}, {\n  attributes: {\n    automatedDenial: false\n  }\n});\nvar _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_StemClaimListItem.default, {\n    claim: claim\n  })),\n  queryByText = _renderWithRouter3.queryByText;\n(0, _chai.expect)(queryByText('Edith Nourse Rogers STEM Scholarship application')).to.not.exist;\n(0, _chai.expect)(queryByText('Received on March 1, 2021')).to.not.exist;",
              "err": {},
              "uuid": "9b54afc4-9703-4309-8f2f-ee4b4ed5788c",
              "parentUUID": "fccfabb1-5721-4ffc-9bfb-1bfff25d78eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a237a17a-10b2-4e5e-88a3-f9d6e598e450",
            "29acc525-b10d-44e7-b609-8463d98e6cdb",
            "9b54afc4-9703-4309-8f2f-ee4b4ed5788c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "56268068-edf1-4865-84d4-56cbe7017247",
          "title": "<StemClaimStatusPage>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/StemClaimStatusPage.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/StemClaimStatusPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render null when claim empty",
              "fullTitle": "<StemClaimStatusPage> should render null when claim empty",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: store\n  }, /*#__PURE__*/_react.default.createElement(_StemClaimStatusPage.StemClaimStatusPage, props))),\n  getByText = _renderWithRouter.getByText,\n  queryByText = _renderWithRouter.queryByText;\n(0, _chai.expect)(queryByText('You didn’t meet the following criteria for the Rogers STEM Scholarship:')).to.not.exist;\n(0, _chai.expect)(document.title).to.equal(documentTitle);\ngetByText('Claim status is unavailable');",
              "err": {},
              "uuid": "5af4c213-b599-4ae1-a35b-4e87501d9495",
              "parentUUID": "56268068-edf1-4865-84d4-56cbe7017247",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render null when claim is null",
              "fullTitle": "<StemClaimStatusPage> should render null when claim is null",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: store\n  }, /*#__PURE__*/_react.default.createElement(_StemClaimStatusPage.StemClaimStatusPage, _extends({}, props, {\n    claim: null\n  })))),\n  getByText = _renderWithRouter2.getByText,\n  queryByText = _renderWithRouter2.queryByText;\n(0, _chai.expect)(queryByText('You didn’t meet the following criteria for the Rogers STEM Scholarship:')).to.not.exist;\n(0, _chai.expect)(document.title).to.equal(documentTitle);\ngetByText('Claim status is unavailable');",
              "err": {},
              "uuid": "38442e20-12c2-44b2-bd77-e895a549bac0",
              "parentUUID": "56268068-edf1-4865-84d4-56cbe7017247",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render empty content when loading",
              "fullTitle": "<StemClaimStatusPage> should render empty content when loading",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: store\n  }, /*#__PURE__*/_react.default.createElement(_StemClaimStatusPage.StemClaimStatusPage, _extends({}, props, {\n    loading: true\n  })))),\n  container = _renderWithRouter3.container,\n  queryByText = _renderWithRouter3.queryByText;\n(0, _chai.expect)(queryByText('You didn’t meet the following criteria for the Rogers STEM Scholarship:')).to.not.exist;\n(0, _chai.expect)(document.title).to.equal(documentTitle);\n(0, _chai.expect)((0, _index.$)('va-loading-indicator', container)).to.exist;",
              "err": {},
              "uuid": "ee6ce542-aa59-4aa3-8153-02e7c096b959",
              "parentUUID": "56268068-edf1-4865-84d4-56cbe7017247",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render stem denied details ",
              "fullTitle": "<StemClaimStatusPage> should render stem denied details ",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  type: 'education_benefits_claims',\n  attributes: {\n    confirmationNumber: 'V-EBC-9043',\n    isEnrolledStem: true,\n    isPursuingTeachingCert: null,\n    benefitLeft: 'moreThanSixMonths',\n    remainingEntitlement: null,\n    automatedDenial: true,\n    deniedAt: '2024-01-31T15:08:20.489Z',\n    submittedAt: '2024-01-31T15:08:20.489Z'\n  }\n};\nvar _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: store\n  }, /*#__PURE__*/_react.default.createElement(_StemClaimStatusPage.StemClaimStatusPage, _extends({}, props, {\n    claim: claim\n  })))),\n  queryByText = _renderWithRouter4.queryByText;\n(0, _chai.expect)(queryByText('Your application was denied on Jan. 31, 2024')).to.exist;\n(0, _chai.expect)(queryByText('You didn’t meet the following criteria for the Rogers STEM Scholarship:')).to.exist;\n(0, _chai.expect)(document.title).to.equal(documentTitle);",
              "err": {},
              "uuid": "dfbf141c-41b0-4392-a5e6-2de3046d9599",
              "parentUUID": "56268068-edf1-4865-84d4-56cbe7017247",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5af4c213-b599-4ae1-a35b-4e87501d9495",
            "38442e20-12c2-44b2-bd77-e895a549bac0",
            "ee6ce542-aa59-4aa3-8153-02e7c096b959",
            "dfbf141c-41b0-4392-a5e6-2de3046d9599"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b8956349-6f01-4c3e-ac3f-155df535181a",
          "title": "<StemDeniedDetails>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/StemDeniedDetails.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/StemDeniedDetails.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<StemDeniedDetails> should render",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_StemDeniedDetails.default, props)),\n  getByText = _renderWithRouter.getByText,\n  queryByText = _renderWithRouter.queryByText;\ngetByText('Your Edith Nourse Rogers STEM Scholarship application');\ngetByText('Your application was denied on Jan. 1, 2024');\n(0, _chai.expect)(queryByText('You meet the degree requirements for the Rogers STEM Scholarship.')).not.to.exist;",
              "err": {},
              "uuid": "56fc7b6f-efd7-4f3b-a74a-e2c9da076819",
              "parentUUID": "b8956349-6f01-4c3e-ac3f-155df535181a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render when isEnrolledStem is true",
              "fullTitle": "<StemDeniedDetails> should render when isEnrolledStem is true",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_StemDeniedDetails.default, _extends({}, props, {\n    isEnrolledStem: true\n  }))),\n  getByText = _renderWithRouter2.getByText;\ngetByText('Your Edith Nourse Rogers STEM Scholarship application');\ngetByText('Your application was denied on Jan. 1, 2024');\ngetByText('You meet the degree requirements for the Rogers STEM Scholarship.');",
              "err": {},
              "uuid": "c59c269f-ba78-42fd-be80-540a81c0304c",
              "parentUUID": "b8956349-6f01-4c3e-ac3f-155df535181a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render when isPursuingTeachingCert is true",
              "fullTitle": "<StemDeniedDetails> should render when isPursuingTeachingCert is true",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter3 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_StemDeniedDetails.default, _extends({}, props, {\n    isPursuingTeachingCert: true\n  }))),\n  getByText = _renderWithRouter3.getByText;\ngetByText('Your Edith Nourse Rogers STEM Scholarship application');\ngetByText('Your application was denied on Jan. 1, 2024');\ngetByText('You meet the degree requirements for the Rogers STEM Scholarship.');",
              "err": {},
              "uuid": "744be24b-6c98-4255-a7f3-1eeaef8791af",
              "parentUUID": "b8956349-6f01-4c3e-ac3f-155df535181a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when click EdithNorthRodgersStemLink, should call record event",
              "fullTitle": "<StemDeniedDetails> when click EdithNorthRodgersStemLink, should call record event",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var recordEventStub = _sinon.default.stub(recordEventModule, 'default');\nvar _renderWithRouter4 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_StemDeniedDetails.default, props)),\n  getByText = _renderWithRouter4.getByText,\n  getByTestId = _renderWithRouter4.getByTestId;\ngetByText('Edith Nourse Rogers STEM Scholarship');\nvar EdithNorthRodgersStemLink = getByTestId('edith-north-rodgers-stem-link');\n_dom.fireEvent.click(EdithNorthRodgersStemLink);\nvar header = 'More resources about VA benefits';\nvar section = 'Learn more about eligibility and how to apply for this scholarship.';\n(0, _chai.expect)(recordEventStub.calledWith({\n  event: 'nav-linkslist',\n  'links-list-section-header': section,\n  'links-list-header': header\n})).to.be.true;\nrecordEventStub.restore();",
              "err": {},
              "uuid": "d3537410-8592-4755-91d6-a857350df00b",
              "parentUUID": "b8956349-6f01-4c3e-ac3f-155df535181a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when click FindVAFormLink, should call record event",
              "fullTitle": "<StemDeniedDetails> when click FindVAFormLink, should call record event",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var recordEventStub = _sinon.default.stub(recordEventModule, 'default');\nvar _renderWithRouter5 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_StemDeniedDetails.default, props)),\n  getByText = _renderWithRouter5.getByText,\n  getByTestId = _renderWithRouter5.getByTestId;\ngetByText('Find a VA Form');\nvar FindVAFormLink = getByTestId('find-va-form-link');\n_dom.fireEvent.click(FindVAFormLink);\nvar header = 'Find a VA Form';\nvar section = 'Search for a VA form.';\n(0, _chai.expect)(recordEventStub.calledWith({\n  event: 'nav-linkslist',\n  'links-list-section-header': section,\n  'links-list-header': header\n})).to.be.true;\nrecordEventStub.restore();",
              "err": {},
              "uuid": "cba541b1-f8c6-4b62-b450-0e20342ad303",
              "parentUUID": "b8956349-6f01-4c3e-ac3f-155df535181a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when click GIBillCompToolLink, should call record event",
              "fullTitle": "<StemDeniedDetails> when click GIBillCompToolLink, should call record event",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var recordEventStub = _sinon.default.stub(recordEventModule, 'default');\nvar _renderWithRouter6 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_StemDeniedDetails.default, props)),\n  getByText = _renderWithRouter6.getByText,\n  getByTestId = _renderWithRouter6.getByTestId;\ngetByText('Find a VA Form');\nvar GIBillCompToolLink = getByTestId('gi-bill-comp-tool-link');\n_dom.fireEvent.click(GIBillCompToolLink);\nvar header = 'GI Bill® Comparison Tool';\nvar section = 'Get information on a school’s value and affordability; and compare estimated benefits by school.';\n(0, _chai.expect)(recordEventStub.calledWith({\n  event: 'nav-linkslist',\n  'links-list-section-header': section,\n  'links-list-header': header\n})).to.be.true;\nrecordEventStub.restore();",
              "err": {},
              "uuid": "6e13771e-6725-46a5-890a-c0e2d31069df",
              "parentUUID": "b8956349-6f01-4c3e-ac3f-155df535181a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "56fc7b6f-efd7-4f3b-a74a-e2c9da076819",
            "c59c269f-ba78-42fd-be80-540a81c0304c",
            "744be24b-6c98-4255-a7f3-1eeaef8791af",
            "d3537410-8592-4755-91d6-a857350df00b",
            "cba541b1-f8c6-4b62-b450-0e20342ad303",
            "6e13771e-6725-46a5-890a-c0e2d31069df"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "af20a189-c082-416c-968d-8213a2f2cff7",
          "title": "<TabItem>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/TabItem.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/TabItem.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render tab",
              "fullTitle": "<TabItem> should render tab",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var screen = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_TabItem.default, {\n  shortcut: 1,\n  title: \"Title\",\n  tabpath: \"appeals/1234567/status\"\n}));\nscreen.getByText('Title');",
              "err": {},
              "uuid": "eb9eeb43-2f76-426c-9877-92bde02585b1",
              "parentUUID": "af20a189-c082-416c-968d-8213a2f2cff7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use id if present",
              "fullTitle": "<TabItem> should use id if present",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var screen = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_TabItem.default, {\n  shortcut: 1,\n  id: \"TitleHere\",\n  title: \"Title Here\",\n  tabpath: \"appeals/1234567/status\"\n}));\nscreen.getByText('Title Here');",
              "err": {},
              "uuid": "865af824-de9a-4cf8-b5b2-5670c0a02b8a",
              "parentUUID": "af20a189-c082-416c-968d-8213a2f2cff7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should run tabShortcut when keydown (Alt + 1) is pressed",
              "fullTitle": "<TabItem> should run tabShortcut when keydown (Alt + 1) is pressed",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var addEventListenerSpy = _sinon.default.spy(window, 'addEventListener');\nvar _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_TabItem.default, {\n    shortcut: 1,\n    title: \"Title\",\n    tabpath: \"appeals/1234567/status\",\n    className: \"index-link\"\n  })),\n  container = _renderWithRouter.container;\nvar indexLink = (0, _index.$)('.index-link', container);\n// Event Key Press\n// Note: this is selecting the 'Alt' + '1' which is '¡'\n// and meets the desired logic to go into the if statement\n_dom.fireEvent.keyDown(indexLink, {\n  key: '¡',\n  keyCode: 49,\n  which: 49,\n  code: 'Digit1',\n  location: 0,\n  altKey: true,\n  ctrlKey: false,\n  metaKey: false,\n  shiftKey: false,\n  repeat: false\n});\n(0, _chai.expect)(addEventListenerSpy.called).to.be.true;\naddEventListenerSpy.restore();",
              "err": {},
              "uuid": "ad8655f9-db1b-4cd2-b821-1992b86a9190",
              "parentUUID": "af20a189-c082-416c-968d-8213a2f2cff7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should run tabShortcut when keydown (Alt) is pressed",
              "fullTitle": "<TabItem> should run tabShortcut when keydown (Alt) is pressed",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var addEventListenerSpy = _sinon.default.spy(window, 'addEventListener');\nvar _renderWithRouter2 = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_TabItem.default, {\n    shortcut: 1,\n    title: \"Title\",\n    tabpath: \"appeals/1234567/status\",\n    className: \"index-link\"\n  })),\n  container = _renderWithRouter2.container;\nvar indexLink = (0, _index.$)('.index-link', container);\n// Event Key Press\n// Note: this is selecting the 'Alt' key which meets the desired\n// logic to go into the else statement\n_dom.fireEvent.keyDown(indexLink, {\n  key: 'Alt',\n  keyCode: 18,\n  which: 18,\n  code: 'AltLeft',\n  location: 1,\n  altKey: true,\n  ctrlKey: false,\n  metaKey: false,\n  shiftKey: false,\n  repeat: false\n});\n(0, _chai.expect)(addEventListenerSpy.called).to.be.true;\naddEventListenerSpy.restore();",
              "err": {},
              "uuid": "7099adae-48d2-42e2-99d1-573ed8fb7338",
              "parentUUID": "af20a189-c082-416c-968d-8213a2f2cff7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb9eeb43-2f76-426c-9877-92bde02585b1",
            "865af824-de9a-4cf8-b5b2-5670c0a02b8a",
            "ad8655f9-db1b-4cd2-b821-1992b86a9190",
            "7099adae-48d2-42e2-99d1-573ed8fb7338"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "cb09ee02-cd37-4674-9851-a8ebd29c321c",
          "title": "<TabNav>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/TabNav.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/TabNav.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render three tabs",
              "fullTitle": "<TabNav> should render three tabs",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var screen = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_TabNav.default, {\n  id: 1\n}));\n(0, _chai.expect)(screen.getAllByRole('listitem').length).to.equal(3);",
              "err": {},
              "uuid": "cc8968fb-abde-4a59-8e87-a2a387744311",
              "parentUUID": "cb09ee02-cd37-4674-9851-a8ebd29c321c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cc8968fb-abde-4a59-8e87-a2a387744311"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ac2c8cb3-fb5f-4abf-a4d3-a06dd58018d9",
          "title": "<UploadStatus>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/UploadStatus.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/UploadStatus.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render single file needed",
              "fullTitle": "<UploadStatus> should render single file needed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UploadStatus.default, {\n  files: 1,\n  progress: 0.5\n}));\n(0, _chai.expect)(tree.subTree('h4').text()).to.contain('Uploading 1 file');\n(0, _chai.expect)(tree.subTree('va-progress-bar').props.percent).to.equal(50);",
              "err": {},
              "uuid": "5fe4bc75-5ccb-4cd2-b5e4-f9293f214e21",
              "parentUUID": "ac2c8cb3-fb5f-4abf-a4d3-a06dd58018d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call onCancel",
              "fullTitle": "<UploadStatus> should call onCancel",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var onCancel = _sinon.default.spy();\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UploadStatus.default, {\n  files: 1,\n  onCancel: onCancel,\n  progress: 0.5\n}));\ntree.subTree('va-button').props.onClick({\n  preventDefault: function preventDefault() {}\n});\n(0, _chai.expect)(onCancel.called).to.be.true;",
              "err": {},
              "uuid": "033664c3-f574-4a63-9d32-a067987c197c",
              "parentUUID": "ac2c8cb3-fb5f-4abf-a4d3-a06dd58018d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5fe4bc75-5ccb-4cd2-b5e4-f9293f214e21",
            "033664c3-f574-4a63-9d32-a067987c197c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c432a89c-e7d8-40c6-950d-40868d7391b1",
          "title": "<YourClaimsPageV2>",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/components/YourClaimsPageV2.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/components/YourClaimsPageV2.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<YourClaimsPageV2> should render",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, defaultProps));\n(0, _chai.expect)(wrapper.type()).to.equal(_react.default.Fragment);\nwrapper.unmount();",
              "err": {},
              "uuid": "104235be-d588-4084-8c81-594bbe4ed179",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render <ClaimsAppealsUnavailable/>",
              "fullTitle": "<YourClaimsPageV2> should render <ClaimsAppealsUnavailable/>",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n    store: mockStore\n  }, /*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, _extends({}, defaultProps, {\n    appealsAvailable: _appealsV2Helpers.claimsAvailability.UNAVAILABLE,\n    claimsAvailable: _appealsV2Helpers.claimsAvailability.UNAVAILABLE\n  })))),\n  container = _renderWithRouter.container;\n(0, _chai.expect)((0, _index.$)('.claims-unavailable', container)).to.exist;",
              "err": {},
              "uuid": "de5463e7-fbdb-43b7-8c86-1a4c7d0e3fa9",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a loading indicator if all requests loading",
              "fullTitle": "<YourClaimsPageV2> should render a loading indicator if all requests loading",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _cloneDeep.default)(defaultProps);\nprops.appealsLoading = true;\nprops.claimsLoading = true;\nprops.stemClaimsLoading = true;\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, props));\n(0, _chai.expect)(wrapper.find('va-loading-indicator').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "e952eb2b-01d1-4f85-abc6-0b9f0bbbe97c",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a loading indicator if one list empty and other loading",
              "fullTitle": "<YourClaimsPageV2> should render a loading indicator if one list empty and other loading",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _cloneDeep.default)(defaultProps);\nprops.stemClaimsLoading = true;\nprops.list = [];\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, props));\n(0, _chai.expect)(wrapper.find('va-loading-indicator').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "ff27a5c6-6390-41a2-a55c-e18c9d665616",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a list of claims and appeals",
              "fullTitle": "<YourClaimsPageV2> should render a list of claims and appeals",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, defaultProps));\n(0, _chai.expect)(wrapper.find('AppealListItem').length).to.equal(1);\n(0, _chai.expect)(wrapper.find('ClaimsListItem').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "c8ec321c-eb77-4b9d-b32e-49bcc1f61011",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render Pagination",
              "fullTitle": "<YourClaimsPageV2> should render Pagination",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  list: new Array(12).fill(defaultProps.list[0])\n});\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, props));\n(0, _chai.expect)(wrapper.text()).to.include(\"Showing 1 \\u2012 10 of 12 events\");\n// web component isn't rendering? But page info does...\n// expect(wrapper.find('va-pagination').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "d7be40d9-2e85-4013-a888-7cf995ef9501",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a no claims message when no claims or appeals present",
              "fullTitle": "<YourClaimsPageV2> should render a no claims message when no claims or appeals present",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _cloneDeep.default)(defaultProps);\nprops.list = [];\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, props));\n(0, _chai.expect)(wrapper.find('NoClaims').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "913a2431-af3b-41a6-a909-b6d2014a10c9",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render error messages if appeals are loading",
              "fullTitle": "<YourClaimsPageV2> should not render error messages if appeals are loading",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _set.default)('appealsLoading', true, defaultProps);\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, props));\n(0, _chai.expect)(wrapper.find('ClaimsAppealsUnavailable').length).to.equal(0);\n(0, _chai.expect)(wrapper.find('ClaimsUnavailable').length).to.equal(0);\n(0, _chai.expect)(wrapper.find('AppealsUnavailable').length).to.equal(0);\nwrapper.unmount();",
              "err": {},
              "uuid": "33daa558-2c6e-4111-a67a-6cfc849a5e88",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render error messages if claims are loading",
              "fullTitle": "<YourClaimsPageV2> should not render error messages if claims are loading",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _set.default)('claimsLoading', true, defaultProps);\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, props));\n(0, _chai.expect)(wrapper.find('ClaimsAppealsUnavailable').length).to.equal(0);\n(0, _chai.expect)(wrapper.find('ClaimsUnavailable').length).to.equal(0);\n(0, _chai.expect)(wrapper.find('AppealsUnavailable').length).to.equal(0);\nwrapper.unmount();",
              "err": {},
              "uuid": "3ed00789-15e1-4462-b224-1297a252f77f",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render claims and appeals unavailable when neither is unavailable",
              "fullTitle": "<YourClaimsPageV2> should not render claims and appeals unavailable when neither is unavailable",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, defaultProps));\n(0, _chai.expect)(wrapper.find('ClaimsAppealsUnavailable').length).to.equal(0);\nwrapper.unmount();",
              "err": {},
              "uuid": "b79667cb-5f02-4e54-8334-1d34dc87e14b",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render claims unavailable when claims are unavailable",
              "fullTitle": "<YourClaimsPageV2> should render claims unavailable when claims are unavailable",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _set.default)('claimsAvailable', false, defaultProps);\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, props));\n(0, _chai.expect)(wrapper.find('ClaimsUnavailable').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "4d5ab49d-7457-4e3d-b9b9-495bdffef8b6",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render appeals unavailable when appeals are unavailable",
              "fullTitle": "<YourClaimsPageV2> should render appeals unavailable when appeals are unavailable",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _set.default)('appealsAvailable', false, defaultProps);\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, props));\n(0, _chai.expect)(wrapper.find('AppealsUnavailable').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "423af721-0c47-4443-893d-3b47678a56a0",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should include combined claims additional info",
              "fullTitle": "<YourClaimsPageV2> should include combined claims additional info",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, defaultProps));\n(0, _chai.expect)(wrapper.find('#claims-combined').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "3f76be9b-b28f-4485-b2ae-4260acab630c",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a FeaturesWarning component",
              "fullTitle": "<YourClaimsPageV2> should render a FeaturesWarning component",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, defaultProps));\n(0, _chai.expect)(wrapper.find('FeaturesWarning').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "5d9ae0dc-9cb1-40a4-ac0b-f36c953100d7",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a NeedHelp warning component",
              "fullTitle": "<YourClaimsPageV2> should render a NeedHelp warning component",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_YourClaimsPageV.YourClaimsPageV2, defaultProps));\n(0, _chai.expect)(wrapper.find('NeedHelp').length).to.equal(1);\nwrapper.unmount();",
              "err": {},
              "uuid": "7be6b7e8-5b54-4da0-97e1-aa0849aef051",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return updated state when page changes in getDerivedStateFromProps",
              "fullTitle": "<YourClaimsPageV2> should return updated state when page changes in getDerivedStateFromProps",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var nextProps = {\n  location: {\n    pathname: '/claims',\n    search: '?page=2'\n  }\n};\nvar prevState = {\n  page: 1\n};\nvar newState = _YourClaimsPageV.YourClaimsPageV2.getDerivedStateFromProps(nextProps, prevState);\n(0, _chai.expect)(newState).to.deep.equal({\n  page: 2\n});",
              "err": {},
              "uuid": "e69c8421-5563-46b4-b9c4-d9d6f0f9b553",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null when page does not change in getDerivedStateFromProps",
              "fullTitle": "<YourClaimsPageV2> should return null when page does not change in getDerivedStateFromProps",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var nextProps = {\n  location: {\n    pathname: '/claims',\n    search: '?page=1'\n  }\n};\nvar prevState = {\n  page: 1\n};\nvar newState = _YourClaimsPageV.YourClaimsPageV2.getDerivedStateFromProps(nextProps, prevState);\n(0, _chai.expect)(newState).to.be.null;",
              "err": {},
              "uuid": "686d0901-d026-42d4-a1b2-e549a6a3f8a8",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct page from getPageFromURL",
              "fullTitle": "<YourClaimsPageV2> should return the correct page from getPageFromURL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testProps = {\n  location: {\n    search: '?page=3'\n  }\n};\nvar page = _YourClaimsPageV.YourClaimsPageV2.getPageFromURL(testProps);\n(0, _chai.expect)(page).to.equal(3);",
              "err": {},
              "uuid": "a25a4614-9ef5-4ccb-939c-09377cce0ff6",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when page is not provided in getPageFromURL",
              "fullTitle": "<YourClaimsPageV2> should return 1 when page is not provided in getPageFromURL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testProps = {\n  location: {\n    search: ''\n  }\n};\nvar page = _YourClaimsPageV.YourClaimsPageV2.getPageFromURL(testProps);\n(0, _chai.expect)(page).to.equal(1);",
              "err": {},
              "uuid": "195def23-4cbc-456d-b38f-313822189fc7",
              "parentUUID": "c432a89c-e7d8-40c6-950d-40868d7391b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "104235be-d588-4084-8c81-594bbe4ed179",
            "de5463e7-fbdb-43b7-8c86-1a4c7d0e3fa9",
            "e952eb2b-01d1-4f85-abc6-0b9f0bbbe97c",
            "ff27a5c6-6390-41a2-a55c-e18c9d665616",
            "c8ec321c-eb77-4b9d-b32e-49bcc1f61011",
            "d7be40d9-2e85-4013-a888-7cf995ef9501",
            "913a2431-af3b-41a6-a909-b6d2014a10c9",
            "33daa558-2c6e-4111-a67a-6cfc849a5e88",
            "3ed00789-15e1-4462-b224-1297a252f77f",
            "b79667cb-5f02-4e54-8334-1d34dc87e14b",
            "4d5ab49d-7457-4e3d-b9b9-495bdffef8b6",
            "423af721-0c47-4443-893d-3b47678a56a0",
            "3f76be9b-b28f-4485-b2ae-4260acab630c",
            "5d9ae0dc-9cb1-40a4-ac0b-f36c953100d7",
            "7be6b7e8-5b54-4da0-97e1-aa0849aef051",
            "e69c8421-5563-46b4-b9c4-d9d6f0f9b553",
            "686d0901-d026-42d4-a1b2-e549a6a3f8a8",
            "a25a4614-9ef5-4ccb-939c-09377cce0ff6",
            "195def23-4cbc-456d-b38f-313822189fc7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "1f2b7b8c-d85f-4806-b410-67327aa2d205",
          "title": "Claim ask reducer",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/reducers/claim-ask.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/reducers/claim-ask.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set loading request",
              "fullTitle": "Claim ask reducer should set loading request",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimAsk.default)(undefined, {\n  type: _types.SUBMIT_DECISION_REQUEST\n});\n(0, _chai.expect)(state.loadingDecisionRequest).to.be.true;",
              "err": {},
              "uuid": "c204172e-e89a-48d8-8c8c-a114b2f9028c",
              "parentUUID": "1f2b7b8c-d85f-4806-b410-67327aa2d205",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set decision requested",
              "fullTitle": "Claim ask reducer should set decision requested",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimAsk.default)(undefined, {\n  type: _types.SET_DECISION_REQUESTED\n});\n(0, _chai.expect)(state.decisionRequested).to.be.true;\n(0, _chai.expect)(state.loadingDecisionRequest).to.be.false;",
              "err": {},
              "uuid": "85f05061-7b09-4c20-96be-3feca37a0a70",
              "parentUUID": "1f2b7b8c-d85f-4806-b410-67327aa2d205",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set decision request error",
              "fullTitle": "Claim ask reducer should set decision request error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimAsk.default)(undefined, {\n  type: _types.SET_DECISION_REQUEST_ERROR,\n  error: 'Test error'\n});\n(0, _chai.expect)(state.decisionRequestError).to.equal('Test error');\n(0, _chai.expect)(state.loadingDecisionRequest).to.be.false;",
              "err": {},
              "uuid": "d8af4da2-ce14-44d3-a6bc-d9ca64a328ad",
              "parentUUID": "1f2b7b8c-d85f-4806-b410-67327aa2d205",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c204172e-e89a-48d8-8c8c-a114b2f9028c",
            "85f05061-7b09-4c20-96be-3feca37a0a70",
            "d8af4da2-ce14-44d3-a6bc-d9ca64a328ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9ef6f0e4-1570-45eb-801a-b14f7a12686f",
          "title": "Claim detail reducer",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/reducers/claim-detail.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/reducers/claim-detail.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set detail",
              "fullTitle": "Claim detail reducer should set detail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {};\nvar state = (0, _claimDetail.default)(undefined, {\n  type: _types.SET_CLAIM_DETAIL,\n  claim: claim\n});\n(0, _chai.expect)(state.detail).to.eql(claim);\n(0, _chai.expect)(state.loading).to.be.false;",
              "err": {},
              "uuid": "1ba66c11-b078-482c-b15b-fb1724f27f3a",
              "parentUUID": "9ef6f0e4-1570-45eb-801a-b14f7a12686f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clear detail",
              "fullTitle": "Claim detail reducer should clear detail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimDetail.default)({\n  detail: 'test',\n  loading: false\n}, {\n  type: _types.CLEAR_CLAIM_DETAIL\n});\n(0, _chai.expect)(state.detail).to.eql(null);\n(0, _chai.expect)(state.loading).to.eql(true);",
              "err": {},
              "uuid": "2171937b-19d8-4b42-be2d-b838125714eb",
              "parentUUID": "9ef6f0e4-1570-45eb-801a-b14f7a12686f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set loading",
              "fullTitle": "Claim detail reducer should set loading",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimDetail.default)(undefined, {\n  type: _types.GET_CLAIM_DETAIL\n});\n(0, _chai.expect)(state.loading).to.be.true;",
              "err": {},
              "uuid": "5ff70720-f65b-407c-b619-6e3ec1a530cd",
              "parentUUID": "9ef6f0e4-1570-45eb-801a-b14f7a12686f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1ba66c11-b078-482c-b15b-fb1724f27f3a",
            "2171937b-19d8-4b42-be2d-b838125714eb",
            "5ff70720-f65b-407c-b619-6e3ec1a530cd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "676dd0a7-6bff-41b9-8f97-ea0374cccf01",
          "title": "Claim sync reducer",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/reducers/claim-sync.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/reducers/claim-sync.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set unavailable",
              "fullTitle": "Claim sync reducer should set unavailable",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimSync.default)(undefined, {\n  type: _types.SET_CLAIMS_UNAVAILABLE\n});\n(0, _chai.expect)(state.available).to.be.false;",
              "err": {},
              "uuid": "4ee2e5bb-ce21-436f-ade4-8aa1d79f6c9d",
              "parentUUID": "676dd0a7-6bff-41b9-8f97-ea0374cccf01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set unauthorized",
              "fullTitle": "Claim sync reducer should set unauthorized",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimSync.default)(undefined, {\n  type: _types.SET_UNAUTHORIZED\n});\n(0, _chai.expect)(state.authorized).to.be.false;",
              "err": {},
              "uuid": "d2b0bf1f-d812-4f96-99fc-2411962b533e",
              "parentUUID": "676dd0a7-6bff-41b9-8f97-ea0374cccf01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set out of sync",
              "fullTitle": "Claim sync reducer should set out of sync",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimSync.default)(undefined, {\n  type: _types.SET_CLAIM_DETAIL,\n  claim: {\n    attributes: {\n      updatedAt: 'test'\n    }\n  }\n});\n(0, _chai.expect)(state.available).to.be.true;\n(0, _chai.expect)(state.authorized).to.be.true;",
              "err": {},
              "uuid": "7a7d20b7-0627-4f33-9ae8-6ac3ea25a24f",
              "parentUUID": "676dd0a7-6bff-41b9-8f97-ea0374cccf01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set in sync",
              "fullTitle": "Claim sync reducer should set in sync",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimSync.default)(undefined, {\n  type: _types.SET_CLAIM_DETAIL,\n  claim: {\n    attributes: {\n      updatedAt: 'test'\n    }\n  }\n});\n(0, _chai.expect)(state.available).to.be.true;\n(0, _chai.expect)(state.authorized).to.be.true;",
              "err": {},
              "uuid": "8533f1b3-7843-4ac1-ad0c-7484b997b189",
              "parentUUID": "676dd0a7-6bff-41b9-8f97-ea0374cccf01",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4ee2e5bb-ce21-436f-ade4-8aa1d79f6c9d",
            "d2b0bf1f-d812-4f96-99fc-2411962b533e",
            "7a7d20b7-0627-4f33-9ae8-6ac3ea25a24f",
            "8533f1b3-7843-4ac1-ad0c-7484b997b189"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
          "title": "claimsV2Reducer",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/reducers/claimsV2.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/reducers/claimsV2.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should show FETCH_CLAIMS_PENDING",
              "fullTitle": "claimsV2Reducer should show FETCH_CLAIMS_PENDING",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.FETCH_CLAIMS_PENDING,\n  claimsLoading: true\n});\n(0, _chai.expect)(state.claimsLoading).to.be.true;",
              "err": {},
              "uuid": "150b4ee8-a4f5-4f07-ba14-21b2365dc3aa",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show FETCH_CLAIMS_SUCCESS",
              "fullTitle": "claimsV2Reducer should show FETCH_CLAIMS_SUCCESS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.FETCH_CLAIMS_SUCCESS,\n  claims: claims,\n  claimsLoading: false,\n  claimsAvailability: _appealsV2Helpers.claimsAvailability.AVAILABLE\n});\n(0, _chai.expect)(state.claims[0].id).to.exist;\n(0, _chai.expect)(state.claimsLoading).to.be.false;\n(0, _chai.expect)(state.claimsAvailability).to.equal(_appealsV2Helpers.claimsAvailability.AVAILABLE);",
              "err": {},
              "uuid": "87ec271e-d02b-4f8f-8cee-022609eeb2a2",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show FETCH_CLAIMS_ERROR",
              "fullTitle": "claimsV2Reducer should show FETCH_CLAIMS_ERROR",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.FETCH_CLAIMS_ERROR,\n  claimsLoading: false,\n  claimsAvailability: _appealsV2Helpers.claimsAvailability.UNAVAILABLE\n});\n(0, _chai.expect)(state.claimsLoading).to.be.false;\n(0, _chai.expect)(state.claimsAvailability).to.equal(_appealsV2Helpers.claimsAvailability.UNAVAILABLE);",
              "err": {},
              "uuid": "ed15fc93-f3bc-47c4-bb1a-6e03e70519b0",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show FETCH_APPEALS_PENDING",
              "fullTitle": "claimsV2Reducer should show FETCH_APPEALS_PENDING",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.FETCH_APPEALS_PENDING,\n  appealsLoading: true\n});\n(0, _chai.expect)(state.appealsLoading).to.be.true;",
              "err": {},
              "uuid": "948c70d5-2481-404a-a5d3-ad8c4078d62b",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show FETCH_APPEALS_SUCCESS",
              "fullTitle": "claimsV2Reducer should show FETCH_APPEALS_SUCCESS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.FETCH_APPEALS_SUCCESS,\n  appeals: appeals,\n  appealsLoading: false,\n  available: true,\n  v2Availability: _appealsV2Helpers.appealsAvailability.AVAILABLE\n});\n(0, _chai.expect)(state.appeals[0].id).to.exist;\n(0, _chai.expect)(state.appealsLoading).to.be.false;\n(0, _chai.expect)(state.available).to.be.true;\n(0, _chai.expect)(state.v2Availability).to.equal(_appealsV2Helpers.appealsAvailability.AVAILABLE);",
              "err": {},
              "uuid": "969f130e-0132-416f-b61c-7610efd5a2ed",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show USER_FORBIDDEN_ERROR",
              "fullTitle": "claimsV2Reducer should show USER_FORBIDDEN_ERROR",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.USER_FORBIDDEN_ERROR,\n  appealsLoading: false,\n  v2Availability: _appealsV2Helpers.appealsAvailability.USER_FORBIDDEN_ERROR\n});\n(0, _chai.expect)(state.appealsLoading).to.be.false;\n(0, _chai.expect)(state.v2Availability).to.equal(_appealsV2Helpers.appealsAvailability.USER_FORBIDDEN_ERROR);",
              "err": {},
              "uuid": "1b5a4e27-a60a-4789-b43e-bea6db110eb5",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show RECORD_NOT_FOUND_ERROR",
              "fullTitle": "claimsV2Reducer should show RECORD_NOT_FOUND_ERROR",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.RECORD_NOT_FOUND_ERROR,\n  appealsLoading: false,\n  v2Availability: _appealsV2Helpers.appealsAvailability.RECORD_NOT_FOUND_ERROR\n});\n(0, _chai.expect)(state.appealsLoading).to.be.false;\n(0, _chai.expect)(state.v2Availability).to.equal(_appealsV2Helpers.appealsAvailability.RECORD_NOT_FOUND_ERROR);",
              "err": {},
              "uuid": "f75cb211-02ff-4156-9502-cc10e5078f8b",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show VALIDATION_ERROR",
              "fullTitle": "claimsV2Reducer should show VALIDATION_ERROR",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.VALIDATION_ERROR,\n  appealsLoading: false,\n  v2Availability: _appealsV2Helpers.appealsAvailability.VALIDATION_ERROR\n});\n(0, _chai.expect)(state.appealsLoading).to.be.false;\n(0, _chai.expect)(state.v2Availability).to.equal(_appealsV2Helpers.appealsAvailability.VALIDATION_ERROR);",
              "err": {},
              "uuid": "da8b3a8c-504c-44ba-8a5c-937f87d64837",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show BACKEND_SERVICE_ERROR",
              "fullTitle": "claimsV2Reducer should show BACKEND_SERVICE_ERROR",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.BACKEND_SERVICE_ERROR,\n  appealsLoading: false,\n  v2Availability: _appealsV2Helpers.appealsAvailability.BACKEND_SERVICE_ERROR\n});\n(0, _chai.expect)(state.appealsLoading).to.be.false;\n(0, _chai.expect)(state.v2Availability).to.equal(_appealsV2Helpers.appealsAvailability.BACKEND_SERVICE_ERROR);",
              "err": {},
              "uuid": "b86544a8-31e0-4344-9b2b-e2387c4291ec",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show FETCH_APPEALS_ERROR",
              "fullTitle": "claimsV2Reducer should show FETCH_APPEALS_ERROR",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.FETCH_APPEALS_ERROR,\n  appealsLoading: false,\n  v2Availability: _appealsV2Helpers.appealsAvailability.FETCH_APPEALS_ERROR\n});\n(0, _chai.expect)(state.appealsLoading).to.be.false;\n(0, _chai.expect)(state.v2Availability).to.equal(_appealsV2Helpers.appealsAvailability.FETCH_APPEALS_ERROR);",
              "err": {},
              "uuid": "ebdadd8b-0028-488c-95a4-84ef6db85fcd",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show FETCH_STEM_CLAIMS_PENDING",
              "fullTitle": "claimsV2Reducer should show FETCH_STEM_CLAIMS_PENDING",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.FETCH_STEM_CLAIMS_PENDING,\n  stemClaimsLoading: true\n});\n(0, _chai.expect)(state.stemClaimsLoading).to.be.true;",
              "err": {},
              "uuid": "08bb2809-bde9-4a89-a4c7-98a0b7a6c7c3",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show FETCH_STEM_CLAIMS_ERROR",
              "fullTitle": "claimsV2Reducer should show FETCH_STEM_CLAIMS_ERROR",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.FETCH_STEM_CLAIMS_ERROR,\n  stemClaimsLoading: false\n});\n(0, _chai.expect)(state.stemClaimsLoading).to.be.false;",
              "err": {},
              "uuid": "255f452e-926f-43d1-8bdd-aa16dc3c459c",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show FETCH_STEM_CLAIMS_SUCCESS",
              "fullTitle": "claimsV2Reducer should show FETCH_STEM_CLAIMS_SUCCESS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _claimsV.default)(undefined, {\n  type: _types.FETCH_STEM_CLAIMS_SUCCESS,\n  stemClaimsLoading: false,\n  stemClaims: stemClaims\n});\n(0, _chai.expect)(state.stemClaimsLoading).to.be.false;",
              "err": {},
              "uuid": "e5820a5f-54f8-4c27-a1e7-6e4439b5cf2b",
              "parentUUID": "fcaafb1d-3360-4051-b6f8-c2a30b6b74c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "150b4ee8-a4f5-4f07-ba14-21b2365dc3aa",
            "87ec271e-d02b-4f8f-8cee-022609eeb2a2",
            "ed15fc93-f3bc-47c4-bb1a-6e03e70519b0",
            "948c70d5-2481-404a-a5d3-ad8c4078d62b",
            "969f130e-0132-416f-b61c-7610efd5a2ed",
            "1b5a4e27-a60a-4789-b43e-bea6db110eb5",
            "f75cb211-02ff-4156-9502-cc10e5078f8b",
            "da8b3a8c-504c-44ba-8a5c-937f87d64837",
            "b86544a8-31e0-4344-9b2b-e2387c4291ec",
            "ebdadd8b-0028-488c-95a4-84ef6db85fcd",
            "08bb2809-bde9-4a89-a4c7-98a0b7a6c7c3",
            "255f452e-926f-43d1-8bdd-aa16dc3c459c",
            "e5820a5f-54f8-4c27-a1e7-6e4439b5cf2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e34f9081-c4f5-4e8e-ad27-633376e865c7",
          "title": "notificationsReducer",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/reducers/notifications.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/reducers/notifications.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set a notification",
              "fullTitle": "notificationsReducer should set a notification",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _notifications.default)(undefined, {\n  type: _types.SET_NOTIFICATION,\n  message: {\n    title: 'Testing',\n    body: 'Body'\n  }\n});\n(0, _chai.expect)(state.message.title).to.equal('Testing');\n(0, _chai.expect)(state.message.body).to.equal('Body');",
              "err": {},
              "uuid": "d975a732-6684-4fda-b256-303ca1c452b2",
              "parentUUID": "e34f9081-c4f5-4e8e-ad27-633376e865c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clear a notification",
              "fullTitle": "notificationsReducer should clear a notification",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _notifications.default)(undefined, {\n  type: _types.CLEAR_NOTIFICATION\n});\n(0, _chai.expect)(state.message).to.be.null;",
              "err": {},
              "uuid": "24760b1a-7bf3-4937-8501-76e37b43448f",
              "parentUUID": "e34f9081-c4f5-4e8e-ad27-633376e865c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set additional evidence notification",
              "fullTitle": "notificationsReducer should set additional evidence notification",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _notifications.default)(undefined, {\n  type: _types.SET_ADDITIONAL_EVIDENCE_NOTIFICATION,\n  message: {\n    title: 'Testing',\n    body: 'Body'\n  }\n});\n(0, _chai.expect)(state.additionalEvidenceMessage.title).to.equal('Testing');\n(0, _chai.expect)(state.additionalEvidenceMessage.body).to.equal('Body');",
              "err": {},
              "uuid": "76493b43-2797-488a-84e2-364b82627568",
              "parentUUID": "e34f9081-c4f5-4e8e-ad27-633376e865c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clear additional evidence notification",
              "fullTitle": "notificationsReducer should clear additional evidence notification",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _notifications.default)(undefined, {\n  type: _types.CLEAR_ADDITIONAL_EVIDENCE_NOTIFICATION\n});\n(0, _chai.expect)(state.additionalEvidenceMessage).to.be.null;",
              "err": {},
              "uuid": "a974f6ae-f95d-47d7-a0b2-0fcb0d06b9e9",
              "parentUUID": "e34f9081-c4f5-4e8e-ad27-633376e865c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d975a732-6684-4fda-b256-303ca1c452b2",
            "24760b1a-7bf3-4937-8501-76e37b43448f",
            "76493b43-2797-488a-84e2-364b82627568",
            "a974f6ae-f95d-47d7-a0b2-0fcb0d06b9e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d7da91cd-4f60-4bbd-8ec6-9781b8a5ab25",
          "title": "routingReducer",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/reducers/routing.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/reducers/routing.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set the last page to action.page on first call",
              "fullTitle": "routingReducer should set the last page to action.page on first call",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _routing.default)(undefined, {\n  type: _types.SET_LAST_PAGE,\n  page: '/testing'\n});\n(0, _chai.expect)(state.lastPage).to.equal('/testing');\n(0, _chai.expect)(state.history[0]).to.equal('testing');",
              "err": {},
              "uuid": "7770b460-5c42-43b0-bc07-9113327367d0",
              "parentUUID": "d7da91cd-4f60-4bbd-8ec6-9781b8a5ab25",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "2d18a204-48f8-48e8-9763-205c703b2b55",
              "title": "when history already has 1 record",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/reducers/routing.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/reducers/routing.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add to the history array and set the last page with the new action.page",
                  "fullTitle": "routingReducer when history already has 1 record should add to the history array and set the last page with the new action.page",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var state = (0, _routing.default)({\n  history: ['testing'],\n  lastPage: '/testing'\n}, {\n  type: _types.SET_LAST_PAGE,\n  page: '/new-page'\n});\n(0, _chai.expect)(state.lastPage).to.equal('/new-page');\n(0, _chai.expect)(state.history.length).to.equal(2);",
                  "err": {},
                  "uuid": "885c0519-2293-459c-bf61-95d6a98d4c25",
                  "parentUUID": "2d18a204-48f8-48e8-9763-205c703b2b55",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "885c0519-2293-459c-bf61-95d6a98d4c25"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d1c60d5a-f907-441e-979a-9e32d37d3c2f",
              "title": "when history already has 2 records",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/reducers/routing.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/reducers/routing.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add to the history array and set the last page with the new action.page",
                  "fullTitle": "routingReducer when history already has 2 records should add to the history array and set the last page with the new action.page",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var state = (0, _routing.default)({\n  history: ['testing', 'testing2']\n}, {\n  type: _types.SET_LAST_PAGE,\n  page: '/new-page'\n});\n(0, _chai.expect)(state.lastPage).to.equal('/new-page');\n(0, _chai.expect)(state.history.length).to.equal(3);",
                  "err": {},
                  "uuid": "8ccbd3f3-fd32-4ea8-9cbf-471c33811519",
                  "parentUUID": "d1c60d5a-f907-441e-979a-9e32d37d3c2f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ccbd3f3-fd32-4ea8-9cbf-471c33811519"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "7770b460-5c42-43b0-bc07-9113327367d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "cee867e7-900a-47b6-85d6-7ca38dfec282",
          "title": "Claim Serializer",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/reducers/serialize.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/reducers/serialize.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the original claim when the type is evss_claims",
              "fullTitle": "Claim Serializer should return the original claim when the type is evss_claims",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = _objectSpread(_objectSpread({}, _serializeExample.default.data), {}, {\n  type: 'evss_claims'\n});\nvar serializedClaim = (0, _serialize.serializeClaim)(claim);\n(0, _chai.expect)(serializedClaim).to.eql(claim);",
              "err": {},
              "uuid": "764abef3-2913-456a-93b2-09a67f73dd44",
              "parentUUID": "cee867e7-900a-47b6-85d6-7ca38dfec282",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the original claim when there are no tracked items",
              "fullTitle": "Claim Serializer should return the original claim when there are no tracked items",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  id: 1,\n  type: 'claim',\n  attributes: {\n    supportingDocuments: [{\n      id: 1,\n      trackedItemId: null,\n      uploadDate: '2010-10-01'\n    }],\n    trackedItems: []\n  }\n};\nvar serializedClaim = (0, _serialize.serializeClaim)(claim);\n(0, _chai.expect)(serializedClaim).to.eql(_objectSpread(_objectSpread({}, claim), {}, {\n  attributes: _objectSpread(_objectSpread({}, claim.attributes), {}, {\n    supportingDocuments: [_objectSpread(_objectSpread({}, claim.attributes.supportingDocuments[0]), {}, {\n      date: '2010-10-01'\n    })]\n  })\n}));",
              "err": {},
              "uuid": "56f9bca1-ad79-4cf1-a086-15ad74cd8762",
              "parentUUID": "cee867e7-900a-47b6-85d6-7ca38dfec282",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set supporting documents and tracked items to empty arrays when data is missing",
              "fullTitle": "Claim Serializer should set supporting documents and tracked items to empty arrays when data is missing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  id: 1,\n  type: 'claim',\n  attributes: {}\n};\nvar serializedClaim = (0, _serialize.serializeClaim)(claim);\n(0, _chai.expect)(serializedClaim).to.eql(_objectSpread(_objectSpread({}, claim), {}, {\n  attributes: {\n    supportingDocuments: [],\n    trackedItems: []\n  }\n}));",
              "err": {},
              "uuid": "6409ef00-22bc-4896-94c3-34d81e14e640",
              "parentUUID": "cee867e7-900a-47b6-85d6-7ca38dfec282",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return no supporting docs when there is only one and it is associated with a tracked item",
              "fullTitle": "Claim Serializer should return no supporting docs when there is only one and it is associated with a tracked item",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  id: 1,\n  type: 'claim',\n  attributes: {\n    supportingDocuments: [{\n      id: 1,\n      trackedItemId: 1\n    }],\n    trackedItems: [{\n      id: 1\n    }]\n  }\n};\nvar serializedClaim = (0, _serialize.serializeClaim)(claim);\nvar _serializedClaim$attr = serializedClaim.attributes,\n  supportingDocuments = _serializedClaim$attr.supportingDocuments,\n  trackedItems = _serializedClaim$attr.trackedItems;\n// supportingDocuments should be an empty array now\n(0, _chai.expect)(supportingDocuments).to.be.empty;\n// The supporting document with id: 1 should now be associated with\n// the trackedItem with id: 1\n(0, _chai.expect)(trackedItems[0].documents.length).to.equal(1);\n(0, _chai.expect)(trackedItems[0].documents[0].id).to.equal(1);",
              "err": {},
              "uuid": "b6c999b3-eb55-45c5-ab47-08d4a0cb4fd1",
              "parentUUID": "cee867e7-900a-47b6-85d6-7ca38dfec282",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only move supporting documents associated with tracked items",
              "fullTitle": "Claim Serializer should only move supporting documents associated with tracked items",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = {\n  id: 1,\n  type: 'claim',\n  attributes: {\n    supportingDocuments: [{\n      id: 1,\n      trackedItemId: 1\n    }, {\n      id: 2,\n      trackedItemId: null\n    }],\n    trackedItems: [{\n      id: 1\n    }]\n  }\n};\nvar serializedClaim = (0, _serialize.serializeClaim)(claim);\nvar _serializedClaim$attr2 = serializedClaim.attributes,\n  supportingDocuments = _serializedClaim$attr2.supportingDocuments,\n  trackedItems = _serializedClaim$attr2.trackedItems;\n// Supporting doc with id: 2 should be the only one still in\n// supportingDocuments array\n(0, _chai.expect)(supportingDocuments.length).to.equal(1);\n(0, _chai.expect)(supportingDocuments[0].id).to.equal(2);\n// trackedItems.documents should now include the suppporting\n// doc with id: 1\n(0, _chai.expect)(trackedItems[0].documents.length).to.equal(1);\n(0, _chai.expect)(trackedItems[0].documents[0].id).to.equal(1);",
              "err": {},
              "uuid": "2d31f763-b73c-405a-9907-5c8f3822a71e",
              "parentUUID": "cee867e7-900a-47b6-85d6-7ca38dfec282",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should associate supporting documents to tracked items correctly",
              "fullTitle": "Claim Serializer should associate supporting documents to tracked items correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var claim = _objectSpread({}, _serializeExample.default.data);\nvar serializedClaim = (0, _serialize.serializeClaim)(claim);\nvar _serializedClaim$attr3 = serializedClaim.attributes,\n  supportingDocuments = _serializedClaim$attr3.supportingDocuments,\n  trackedItems = _serializedClaim$attr3.trackedItems;\n// Out of the 6 supporting documents, only 3 should remain\n(0, _chai.expect)(supportingDocuments.length).to.equal(3);\n(0, _chai.expect)(supportingDocuments.map(function (d) {\n  return d.id;\n}).sort()).to.eql([1, 5, 6]);\n// Tracked item with id: 1 should have 1 supporting document\nvar trackedItem1 = trackedItems.find(function (d) {\n  return d.id === 1;\n});\n(0, _chai.expect)(trackedItem1.documents.length).to.equal(1);\n(0, _chai.expect)(trackedItem1.documents[0].id).to.equal(2);\n// Tracked item with id: 2 should have 0 supporting documents\nvar trackedItem2 = trackedItems.find(function (d) {\n  return d.id === 2;\n});\n(0, _chai.expect)(trackedItem2.documents).to.be.empty;\n// Tracked item with id: 3 should have 2 supporting documents\nvar trackedItem3 = trackedItems.find(function (d) {\n  return d.id === 3;\n});\n(0, _chai.expect)(trackedItem3.documents.length).to.be.equal(2);\n(0, _chai.expect)(trackedItem3.documents.map(function (d) {\n  return d.id;\n}).sort()).to.eql([3, 4]);",
              "err": {},
              "uuid": "9ca9ea6e-8658-4c42-92e3-9417e863d9d6",
              "parentUUID": "cee867e7-900a-47b6-85d6-7ca38dfec282",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "764abef3-2913-456a-93b2-09a67f73dd44",
            "56f9bca1-ad79-4cf1-a086-15ad74cd8762",
            "6409ef00-22bc-4896-94c3-34d81e14e640",
            "b6c999b3-eb55-45c5-ab47-08d4a0cb4fd1",
            "2d31f763-b73c-405a-9907-5c8f3822a71e",
            "9ca9ea6e-8658-4c42-92e3-9417e863d9d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "1729d32c-1906-4c77-b6f8-660e7753b495",
          "title": "Uploads reducer",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/reducers/uploads.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/reducers/uploads.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should reset uploads state",
              "fullTitle": "Uploads reducer should reset uploads state",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _uploads.default)({\n  things: null\n}, {\n  type: _types.RESET_UPLOADS\n});\n(0, _chai.expect)(state.things).to.be.undefined;\n(0, _chai.expect)(state.files).to.be.empty;",
              "err": {},
              "uuid": "6fbd677e-42bc-43e0-8838-4d8182ca5b99",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a file",
              "fullTitle": "Uploads reducer should add a file",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _uploads.default)({\n  files: []\n}, {\n  type: _types.ADD_FILE,\n  files: [{\n    name: 'test'\n  }]\n});\n(0, _chai.expect)(state.files.length).to.equal(1);\nvar file = state.files[0];\n(0, _chai.expect)(file.file.name).to.equal('test');\n(0, _chai.expect)(file.password.value).to.equal('');\n(0, _chai.expect)(file.isEncrypted).to.be.undefined;",
              "err": {},
              "uuid": "3b53ed2b-7a1c-4828-9c43-50432129d12c",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a file that needs a password",
              "fullTitle": "Uploads reducer should add a file that needs a password",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _uploads.default)({\n  files: []\n}, {\n  type: _types.ADD_FILE,\n  files: [{\n    name: 'test'\n  }],\n  isEncrypted: true\n});\n(0, _chai.expect)(state.files.length).to.equal(1);\nvar file = state.files[0];\n(0, _chai.expect)(file.file.name).to.equal('test');\n(0, _chai.expect)(file.password.value).to.equal('');\n(0, _chai.expect)(file.isEncrypted).to.be.true;",
              "err": {},
              "uuid": "b7c8bdc8-39a9-4788-8a46-109241c37d14",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove a file",
              "fullTitle": "Uploads reducer remove a file",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _uploads.default)({\n  files: [{\n    name: 'test1'\n  }, {\n    name: 'test2'\n  }]\n}, {\n  type: _types.REMOVE_FILE,\n  index: 1\n});\n(0, _chai.expect)(state.files).not.to.be.empty;\n(0, _chai.expect)(state.files[0].name).to.equal('test1');",
              "err": {},
              "uuid": "60967de9-6525-4159-8321-bf3db4a73934",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "set state as uploading",
              "fullTitle": "Uploads reducer set state as uploading",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var uploader = {};\nvar state = (0, _uploads.default)({}, {\n  type: _types.SET_UPLOADING,\n  uploading: true,\n  uploader: uploader\n});\n(0, _chai.expect)(state.uploading).to.be.true;\n(0, _chai.expect)(state.uploadError).to.be.false;\n(0, _chai.expect)(state.uploadComplete).to.be.false;\n(0, _chai.expect)(state.uploader).to.eql(uploader);",
              "err": {},
              "uuid": "f84d0491-5261-4f66-88c0-d01465849d73",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "set uploader in state",
              "fullTitle": "Uploads reducer set uploader in state",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var uploader = {};\nvar state = (0, _uploads.default)({}, {\n  type: _types.SET_UPLOADER,\n  uploader: uploader\n});\n(0, _chai.expect)(state.uploader).to.eql(uploader);",
              "err": {},
              "uuid": "1f5659d2-33f1-4b36-ad2c-bbab302123b6",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "set upload progress",
              "fullTitle": "Uploads reducer set upload progress",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _uploads.default)({}, {\n  type: _types.SET_PROGRESS,\n  progress: 0.5\n});\n(0, _chai.expect)(state.progress).to.equal(0.5);",
              "err": {},
              "uuid": "1aafe0ff-682a-437b-b07a-c208115fdf88",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "set upload error",
              "fullTitle": "Uploads reducer set upload error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _uploads.default)({}, {\n  type: _types.SET_UPLOAD_ERROR\n});\n(0, _chai.expect)(state.uploading).to.be.false;\n(0, _chai.expect)(state.uploadError).to.be.true;\n(0, _chai.expect)(state.uploader).to.be.null;",
              "err": {},
              "uuid": "8eff9d63-3696-447d-8bba-1d6d4b111ff6",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "set upload done",
              "fullTitle": "Uploads reducer set upload done",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _uploads.default)({}, {\n  type: _types.DONE_UPLOADING\n});\n(0, _chai.expect)(state.uploading).to.be.false;\n(0, _chai.expect)(state.uploadComplete).to.be.true;\n(0, _chai.expect)(state.uploader).to.be.null;",
              "err": {},
              "uuid": "13c62905-7b36-45a4-8e30-bc72627cd8e8",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "update form field",
              "fullTitle": "Uploads reducer update form field",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _uploads.default)({}, {\n  type: _types.UPDATE_FIELD,\n  path: 'uploadField',\n  field: {\n    value: 'test',\n    dirty: true\n  }\n});\n(0, _chai.expect)(state.uploadField.value).to.equal('test');",
              "err": {},
              "uuid": "7b179155-6d84-4037-a1db-1cc811a9b4dd",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cancel upload",
              "fullTitle": "Uploads reducer cancel upload",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _uploads.default)({}, {\n  type: _types.CANCEL_UPLOAD\n});\n(0, _chai.expect)(state.uploading).to.be.false;\n(0, _chai.expect)(state.uploader).to.be.null;",
              "err": {},
              "uuid": "2cc68b60-b6ee-4399-814b-c1b66491e34d",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dirty fields",
              "fullTitle": "Uploads reducer dirty fields",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = (0, _uploads.default)({\n  uploadField: {\n    value: 'test',\n    dirty: false\n  }\n}, {\n  type: _types.SET_FIELDS_DIRTY\n});\n(0, _chai.expect)(state.uploadField.dirty).to.be.true;",
              "err": {},
              "uuid": "77b05c00-33fc-4258-a5b3-51e217acba59",
              "parentUUID": "1729d32c-1906-4c77-b6f8-660e7753b495",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6fbd677e-42bc-43e0-8838-4d8182ca5b99",
            "3b53ed2b-7a1c-4828-9c43-50432129d12c",
            "b7c8bdc8-39a9-4788-8a46-109241c37d14",
            "60967de9-6525-4159-8321-bf3db4a73934",
            "f84d0491-5261-4f66-88c0-d01465849d73",
            "1f5659d2-33f1-4b36-ad2c-bbab302123b6",
            "1aafe0ff-682a-437b-b07a-c208115fdf88",
            "8eff9d63-3696-447d-8bba-1d6d4b111ff6",
            "13c62905-7b36-45a4-8e30-bc72627cd8e8",
            "7b179155-6d84-4037-a1db-1cc811a9b4dd",
            "2cc68b60-b6ee-4399-814b-c1b66491e34d",
            "77b05c00-33fc-4258-a5b3-51e217acba59"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "653df206-50bd-470b-8bf8-69f31a63ac3b",
          "title": "selectors",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "015e1bca-f118-4953-acdd-9b07d97cd675",
              "title": "isLoadingFeatures",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true",
                  "fullTitle": "selectors isLoadingFeatures should return true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(selectors.isLoadingFeatures(state)).to.be.true;",
                  "err": {},
                  "uuid": "c4bc34ea-2285-4476-9e29-7bb245ecc73e",
                  "parentUUID": "015e1bca-f118-4953-acdd-9b07d97cd675",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false",
                  "fullTitle": "selectors isLoadingFeatures should return false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "state.featureToggles.loading = false;\n(0, _chai.expect)(selectors.isLoadingFeatures(state)).to.be.false;",
                  "err": {},
                  "uuid": "448438dd-60a5-47f7-8c9e-efd8021b873c",
                  "parentUUID": "015e1bca-f118-4953-acdd-9b07d97cd675",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4bc34ea-2285-4476-9e29-7bb245ecc73e",
                "448438dd-60a5-47f7-8c9e-efd8021b873c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "358d65d7-0d48-42a3-a74a-6f9cb60aff1a",
              "title": "showClaimLettersFeature",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true",
                  "fullTitle": "selectors showClaimLettersFeature should return true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(selectors.showClaimLettersFeature(state)).to.be.true;",
                  "err": {},
                  "uuid": "39b56ab9-4655-4a97-ad20-b06fb138f621",
                  "parentUUID": "358d65d7-0d48-42a3-a74a-6f9cb60aff1a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false",
                  "fullTitle": "selectors showClaimLettersFeature should return false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "state.featureToggles.claimLettersAccess = false;\n// eslint-disable-next-line camelcase\nstate.featureToggles.claim_letters_access = false;\n(0, _chai.expect)(selectors.showClaimLettersFeature(state)).to.be.false;",
                  "err": {},
                  "uuid": "caed33ef-7d68-45c2-81f6-46dfeb83623a",
                  "parentUUID": "358d65d7-0d48-42a3-a74a-6f9cb60aff1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39b56ab9-4655-4a97-ad20-b06fb138f621",
                "caed33ef-7d68-45c2-81f6-46dfeb83623a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0f9c5bf6-e59e-4fbb-9499-648a634e18ea",
              "title": "cstIncludeDdlBoaLetters",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true",
                  "fullTitle": "selectors cstIncludeDdlBoaLetters should return true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(selectors.cstIncludeDdlBoaLetters(state)).to.be.true;",
                  "err": {},
                  "uuid": "b60ff2c3-6664-492e-8ff0-5481f8255064",
                  "parentUUID": "0f9c5bf6-e59e-4fbb-9499-648a634e18ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false",
                  "fullTitle": "selectors cstIncludeDdlBoaLetters should return false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "state.featureToggles.cstIncludeDdlBoaLetters = false;\n// eslint-disable-next-line camelcase\nstate.featureToggles.cst_include_ddl_boa_letters = false;\n(0, _chai.expect)(selectors.cstIncludeDdlBoaLetters(state)).to.be.false;",
                  "err": {},
                  "uuid": "43ebd7bc-05ed-49b6-b6a4-cfa89b9f51ac",
                  "parentUUID": "0f9c5bf6-e59e-4fbb-9499-648a634e18ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b60ff2c3-6664-492e-8ff0-5481f8255064",
                "43ebd7bc-05ed-49b6-b6a4-cfa89b9f51ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "96a2daeb-4c5c-4063-ad51-53bec7c2f74f",
              "title": "cstIncludeDdl5103Letters",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true",
                  "fullTitle": "selectors cstIncludeDdl5103Letters should return true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(selectors.cstIncludeDdl5103Letters(state)).to.be.true;",
                  "err": {},
                  "uuid": "2bfca7ca-1db1-496a-8d7f-c2f6fa2bdd9b",
                  "parentUUID": "96a2daeb-4c5c-4063-ad51-53bec7c2f74f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false",
                  "fullTitle": "selectors cstIncludeDdl5103Letters should return false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "state.featureToggles.cstIncludeDdl5103Letters = false;\n// eslint-disable-next-line camelcase\nstate.featureToggles.cst_include_ddl_5103_letters = false;\n(0, _chai.expect)(selectors.cstIncludeDdl5103Letters(state)).to.be.false;",
                  "err": {},
                  "uuid": "e6708001-2003-41a5-a5a6-845321ff07fc",
                  "parentUUID": "96a2daeb-4c5c-4063-ad51-53bec7c2f74f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2bfca7ca-1db1-496a-8d7f-c2f6fa2bdd9b",
                "e6708001-2003-41a5-a5a6-845321ff07fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "18b7136a-ce28-4d31-855f-d76faee68726",
              "title": "benefitsDocumentsUseLighthouse",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true",
                  "fullTitle": "selectors benefitsDocumentsUseLighthouse should return true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(selectors.benefitsDocumentsUseLighthouse(state)).to.be.true;",
                  "err": {},
                  "uuid": "093cec1d-3218-406d-88f3-09fedbf34d7e",
                  "parentUUID": "18b7136a-ce28-4d31-855f-d76faee68726",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false",
                  "fullTitle": "selectors benefitsDocumentsUseLighthouse should return false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "state.featureToggles.benefitsDocumentsUseLighthouse = false;\n// eslint-disable-next-line camelcase\nstate.featureToggles.benefits_documents_use_lighthouse = false;\n(0, _chai.expect)(selectors.benefitsDocumentsUseLighthouse(state)).to.be.false;",
                  "err": {},
                  "uuid": "d9c9f3ea-087e-4bb6-8b93-1d20cd9fc1d4",
                  "parentUUID": "18b7136a-ce28-4d31-855f-d76faee68726",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "093cec1d-3218-406d-88f3-09fedbf34d7e",
                "d9c9f3ea-087e-4bb6-8b93-1d20cd9fc1d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "421e9d89-7225-4fac-9511-c29a25daf15b",
              "title": "getBackendServices",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/selectors/index.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include backend services",
                  "fullTitle": "selectors getBackendServices should include backend services",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(selectors.getBackendServices(state)).to.contain(_backendServices.default.APPEALS_STATUS);",
                  "err": {},
                  "uuid": "09695e2a-ecec-4cb7-a627-ed8597ea86f8",
                  "parentUUID": "421e9d89-7225-4fac-9511-c29a25daf15b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09695e2a-ecec-4cb7-a627-ed8597ea86f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "075fe769-8639-4bbe-8cbd-a64ea941056f",
          "title": "functions",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/appeals-v2-helpers.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/utils/appeals-v2-helpers.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4ffb6cf8-ff9d-429e-a3e9-4fdc271e5c82",
              "title": "getTypeName",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/appeals-v2-helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/appeals-v2-helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return supplemental claim when appeal is supplementalClaim",
                  "fullTitle": "functions getTypeName should return supplemental claim when appeal is supplementalClaim",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "appeal.type = _appealsV2Helpers.APPEAL_TYPES.supplementalClaim;\nvar action = (0, _appealsV2Helpers.getTypeName)(appeal);\n(0, _chai.expect)(action).to.eql('supplemental claim');",
                  "err": {},
                  "uuid": "137acc5b-0a57-4861-a925-ef62438d34ea",
                  "parentUUID": "4ffb6cf8-ff9d-429e-a3e9-4fdc271e5c82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return higher-level review when appeal is higherLevelReview",
                  "fullTitle": "functions getTypeName should return higher-level review when appeal is higherLevelReview",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "appeal.type = _appealsV2Helpers.APPEAL_TYPES.higherLevelReview;\nvar action = (0, _appealsV2Helpers.getTypeName)(appeal);\n(0, _chai.expect)(action).to.eql('higher-level review');",
                  "err": {},
                  "uuid": "6e1f40e2-2515-4511-b4e1-41fcb53c0953",
                  "parentUUID": "4ffb6cf8-ff9d-429e-a3e9-4fdc271e5c82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return appeal when appeal is legacy",
                  "fullTitle": "functions getTypeName should return appeal when appeal is legacy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "appeal.type = _appealsV2Helpers.APPEAL_TYPES.legacy;\nvar action = (0, _appealsV2Helpers.getTypeName)(appeal);\n(0, _chai.expect)(action).to.eql('appeal');",
                  "err": {},
                  "uuid": "ac927c4a-d20d-4db5-8262-faf44e8cc62f",
                  "parentUUID": "4ffb6cf8-ff9d-429e-a3e9-4fdc271e5c82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return appeal when appeal is appeal",
                  "fullTitle": "functions getTypeName should return appeal when appeal is appeal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "appeal.type = _appealsV2Helpers.APPEAL_TYPES.appeal;\nvar action = (0, _appealsV2Helpers.getTypeName)(appeal);\n(0, _chai.expect)(action).to.eql('appeal');",
                  "err": {},
                  "uuid": "0d168d10-f96a-475c-9060-99bb11fcc1ce",
                  "parentUUID": "4ffb6cf8-ff9d-429e-a3e9-4fdc271e5c82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null when appeal is an unknown type",
                  "fullTitle": "functions getTypeName should return null when appeal is an unknown type",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "appeal.type = 'unknown';\nvar action = (0, _appealsV2Helpers.getTypeName)(appeal);\n(0, _chai.expect)(action).to.be.null;",
                  "err": {},
                  "uuid": "bc765a72-7864-43d2-a39b-a5b578addbf6",
                  "parentUUID": "4ffb6cf8-ff9d-429e-a3e9-4fdc271e5c82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "137acc5b-0a57-4861-a925-ef62438d34ea",
                "6e1f40e2-2515-4511-b4e1-41fcb53c0953",
                "ac927c4a-d20d-4db5-8262-faf44e8cc62f",
                "0d168d10-f96a-475c-9060-99bb11fcc1ce",
                "bc765a72-7864-43d2-a39b-a5b578addbf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
              "title": "getStatusContents",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/appeals-v2-helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/appeals-v2-helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when appeal status pendingSoc shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status pendingSoc shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: '1234',\n  type: 'legacyAppeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.pendingSoc\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('A Decision Review Officer is reviewing your appeal');\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('Agency of Original Jurisdiction');",
                  "err": {},
                  "uuid": "5f8ae202-0e46-4b0b-a4bd-8f9c7044167e",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status pendingForm9 shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status pendingForm9 shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A1234',\n  type: 'legacyAppeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.pendingForm9,\n      details: {\n        lastSocDate: '2015-09-12'\n      }\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Please review your Statement of the Case');\n// Get the description from the <p/>\nvar description = contents.description.props.children[0].props.children;\n(0, _chai.expect)(description).to.contain('Agency of Original Jurisdiction');\nvar formattedSocDate = (0, _moment.default)(appeal.attributes.status.details.lastSocDate, 'YYYY-MM-DD').format('MMMM D, YYYY');\n(0, _chai.expect)(description).to.contain(formattedSocDate);",
                  "err": {},
                  "uuid": "53357007-0479-40c5-b304-4bf61181c4aa",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status pendingCertification shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status pendingCertification shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'legacyAppeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.pendingCertification\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('The Decision Review Officer is finishing their review of your appeal');\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('Agency of Original Jurisdiction');",
                  "err": {},
                  "uuid": "085509c8-8b3a-4a95-8e37-9626964c01d7",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status pendingCertificationSsoc shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status pendingCertificationSsoc shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'legacyAppeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.pendingCertificationSsoc,\n      details: {\n        lastSocDate: '2015-09-12'\n      }\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Please review your Supplemental Statement of the Case');\n// Get the description from the <p/>\nvar description = contents.description.props.children[0].props.children;\n(0, _chai.expect)(description).to.contain('Agency of Original Jurisdiction');\nvar formattedSocDate = (0, _moment.default)(appeal.attributes.status.details.lastSocDate, 'YYYY-MM-DD').format('MMMM D, YYYY');\n(0, _chai.expect)(description).to.contain(formattedSocDate);",
                  "err": {},
                  "uuid": "3ac2272a-26c1-4efd-bb8d-e53711cd6621",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status remandSsoc shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status remandSsoc shows specific title/description",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.remandSsoc,\n      details: {\n        lastSocDate: '2015-09-12'\n      }\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Please review your Supplemental Statement of the Case');\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('Agency of Original Jurisdiction');\nvar formattedSocDate = (0, _moment.default)(appeal.attributes.status.details.lastSocDate, 'YYYY-MM-DD').format('MMMM D, YYYY');\n(0, _chai.expect)(description).to.contain(formattedSocDate);",
                  "err": {},
                  "uuid": "b7521851-7f6a-4a2e-956d-50ac6969d1ce",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status pendingHearingScheduling shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status pendingHearingScheduling shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.pendingHearingScheduling,\n      details: {\n        lastSocDate: '2015-09-12',\n        type: 'video'\n      }\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('You’re waiting for your hearing to be scheduled');\n// Get the description from the <p/>\nvar description = contents.description.props.children[0].props.children;\n(0, _chai.expect)(description).to.contain('videoconference');",
                  "err": {},
                  "uuid": "d7094cea-b388-4be9-a1ca-0781b10ef4a4",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status scheduledHearing shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status scheduledHearing shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.scheduledHearing,\n      details: {\n        date: '2012-09-11',\n        type: 'video',\n        location: 'Boston, MA'\n      }\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Your hearing has been scheduled');\n// Get the description from the <p/>\nvar description = contents.description.props.children[0].props.children;\nvar formattedSocDate = (0, _moment.default)(appeal.attributes.status.details.date, 'YYYY-MM-DD').format('MMMM D, YYYY');\n(0, _chai.expect)(description).to.contain('videoconference');\n(0, _chai.expect)(description).to.contain(formattedSocDate);\n(0, _chai.expect)(description).to.contain(appeal.attributes.status.details.location);",
                  "err": {},
                  "uuid": "1becd5dd-736a-42a1-a098-9b5986812a22",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status onDocket shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status onDocket shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.onDocket\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Your appeal is waiting to be sent to a judge');\n// Get the description from the <p/>\nvar description = contents.description.props.children[0].props.children;\n(0, _chai.expect)(description).to.contain('Your appeal is at the Board of Veterans’ Appeals, waiting to be sent to a Veterans Law Judge. Staff at the Board will make sure your case is complete, accurate, and ready to be decided by a judge.');",
                  "err": {},
                  "uuid": "342c5334-a81f-44ec-9f7e-003c96d8a616",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status atVso shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status atVso shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.atVso,\n      details: {\n        vsoName: 'Disabled American Veterans'\n      }\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Your appeal is with your Veterans Service Organization');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain(appeal.attributes.status.details.vsoName);",
                  "err": {},
                  "uuid": "688ab509-ed97-400d-9784-c23c3d358b98",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status decisionInProgress and legacy appeal, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status decisionInProgress and legacy appeal, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'legacyAppeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.decisionInProgress\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('A judge is reviewing your appeal');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('If you submit evidence that isn’t already included in your case, it may delay your appeal.');",
                  "err": {},
                  "uuid": "e4441ee0-76db-49ef-9f3e-63be38249b6f",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status decisionInProgress and appeal, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status decisionInProgress and appeal, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.decisionInProgress\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('A judge is reviewing your appeal');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.not.contain('If you submit evidence that isn’t already included in your case, it may delay your appeal.');",
                  "err": {},
                  "uuid": "3fe90f43-8c84-4b3a-a6b7-a3e9cbc2746e",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status bvaDevelopment, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status bvaDevelopment, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.bvaDevelopment\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('The judge is seeking more information before making a decision');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('The Board of Veterans’ Appeals is seeking evidence or an outside opinion from a legal, medical, or other professional in order to make a decision about your appeal.');",
                  "err": {},
                  "uuid": "24e4864e-b6ef-403a-9ad2-f1b8797d0683",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status stayed, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status stayed, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.stayed\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('The Board is waiting until a higher court makes a decision');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('A higher court has asked the Board of Veterans’ Appeals to hold open a group of appeals awaiting review. Yours is one of the appeals held open. The higher court believes that a decision it will make on a different appeal could affect yours.');",
                  "err": {},
                  "uuid": "5739aa6d-c5d9-4191-9550-b78e2b6403ed",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status remand, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status remand, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.remand,\n      details: {\n        // added issues because remand expects these\n        issues: [{\n          description: 'Heel, increased rating',\n          disposition: 'allowed',\n          date: '2016-05-30'\n        }, {\n          description: 'Tinnitus, increased rating',\n          disposition: 'denied',\n          date: '2016-05-30'\n        }]\n      }\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('The Board made a decision on your appeal');\n// Get the description from the <p/>\nvar description = contents.description.props.children[0].props.children;\n(0, _chai.expect)(description).to.contain('The Board of Veterans’ Appeals sent you a decision on your appeal. Here’s an overview:');",
                  "err": {},
                  "uuid": "7322f0cd-5699-4f81-aa1b-c6a4936a629a",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status fieldGrant, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status fieldGrant, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.fieldGrant\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('The Agency of Original Jurisdiction granted your appeal');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('Agency of Original Jurisdiction');",
                  "err": {},
                  "uuid": "3da29527-ebe7-49c6-8e17-b97aa803cecb",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status withdrawn, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status withdrawn, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.withdrawn\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('You withdrew your appeal');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('You chose not to continue your appeal. If this information is incorrect, please contact your Veterans Service Organization or representative for more information.');",
                  "err": {},
                  "uuid": "1e40f5d6-b97e-4808-943a-9f5f8bcdac63",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status ftr, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status ftr, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.ftr\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Your appeal was closed');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('You didn’t take an action VA requested in order to continue your appeal. If this information is incorrect, or if you want to reopen your appeal, please contact your Veterans Service Organization or representative for more information.');",
                  "err": {},
                  "uuid": "f90146f8-96a4-4efb-9eee-317eb569adbe",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status ramp, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status ramp, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.ramp\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('You opted in to the Rapid Appeals Modernization Program (RAMP)');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('You chose to participate in the new Supplemental Claim or Higher-Level Review options. This doesn’t mean that your appeal has been closed. If this information is incorrect, please contact your Veterans Service Organization or representative as soon as possible.');",
                  "err": {},
                  "uuid": "4cdb5cbe-d546-448c-807d-67bb55663fd1",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status reconsideration, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status reconsideration, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.reconsideration\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Your Motion for Reconsideration was denied');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('The Board of Veterans’ Appeals declined to reopen your appeal. Please contact your Veterans Service Organization or representative for more information.');",
                  "err": {},
                  "uuid": "0ce4e41d-2d82-4cd9-9020-707d10db37b7",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status death, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status death, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.death\n    }\n  }\n};\nvar name = {\n  first: 'Frank',\n  middle: 'James',\n  last: 'Potter'\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal, name);\n(0, _chai.expect)(contents.title).to.eql('The appeal was closed');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('Frank James Potter');",
                  "err": {},
                  "uuid": "67fa9ff3-2ed6-4564-bb19-fa4a71f361df",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status otherClose, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status otherClose, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.otherClose\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Your appeal was closed');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('Your appeal was dismissed or closed. Please contact your Veterans Service Organization or representative for more information.');",
                  "err": {},
                  "uuid": "a47264e6-6464-461c-804b-efed274a0f4a",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status merged, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status merged, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.merged\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Your appeal was merged');\n// Get the description from the <p/>\nvar description = contents.description.props.children[0].props.children;\n(0, _chai.expect)(description).to.contain('Your appeal was merged with another appeal. The Board of Veterans’ Appeals merges appeals so that you can receive a single decision on as many appealed issues as possible. This appeal was merged with an older appeal that was closest to receiving a Board decision.');",
                  "err": {},
                  "uuid": "8171688e-de35-4647-85f8-9699dae8c6b5",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status statutoryOptIn, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status statutoryOptIn, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.statutoryOptIn\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('You requested a decision review under the Appeals Modernization Act');\n// Get the description from the <p/>\nvar description = contents.description.props.children[0].props.children;\n(0, _chai.expect)(description).to.contain('A new law, the Veterans Appeals Improvement and Modernization Act, took effect on February 19, 2019. Although your appeal started before the new law took effect, you asked for it to be converted into one of the new decision review options.');",
                  "err": {},
                  "uuid": "14bf007f-86e9-4cec-b711-8ce564a77b2d",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status evidentiaryPeriod, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status evidentiaryPeriod, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    docket: {\n      type: 'hearingRequest',\n      month: '2019-02-01',\n      switchDueDate: '2019-06-05',\n      eligibleToSwitch: true\n    },\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.evidentiaryPeriod\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Your appeals file is open for new evidence');\n// Get the description from the <p/>\nvar description = contents.description.props.children[0].props.children;\n(0, _chai.expect)(description).to.contain('Hearing Request');",
                  "err": {},
                  "uuid": "e44994b3-5c92-4963-96c8-c9bed2a8a4b9",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status postBvaDtaDecision, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status postBvaDtaDecision, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.postBvaDtaDecision,\n      details: {\n        bvaDecisionDate: '2015-09-12',\n        aojDecisionDate: '2015-09-13',\n        // added issues because remand expects these\n        issues: [{\n          description: 'Heel, increased rating',\n          disposition: 'allowed',\n          date: '2016-05-30'\n        }, {\n          description: 'Tinnitus, increased rating',\n          disposition: 'denied',\n          date: '2016-05-30'\n        }]\n      }\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('The Agency of Original Jurisdiction corrected an error');\n// Get the description from the <p/>\nvar description = contents.description.props.children[0].props.children;\n(0, _chai.expect)(description).to.contain('September 12, 2015');\n(0, _chai.expect)(description).to.contain('September 13, 2015');\n(0, _chai.expect)(description).to.contain('Agency of Original Jurisdiction');",
                  "err": {},
                  "uuid": "b48611c9-9303-4c19-a957-7e92c6490dfe",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status bvaDecisionEffectuation, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status bvaDecisionEffectuation, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.bvaDecisionEffectuation,\n      details: {\n        bvaDecisionDate: '2015-09-12',\n        aojDecisionDate: '2015-09-13',\n        // added issues because remand expects these\n        issues: [{\n          description: 'Heel, increased rating',\n          disposition: 'allowed',\n          date: '2016-05-30'\n        }, {\n          description: 'Tinnitus, increased rating',\n          disposition: 'denied',\n          date: '2016-05-30'\n        }]\n      }\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('The Agency of Original Jurisdiction corrected an error');\n// Get the description from the <p/>\nvar description = contents.description.props.children[0].props.children;\n(0, _chai.expect)(description).to.contain('September 12, 2015');\n(0, _chai.expect)(description).to.contain('September 13, 2015');\n(0, _chai.expect)(description).to.contain('Agency of Original Jurisdiction');",
                  "err": {},
                  "uuid": "e73501ef-85c0-4ac0-8192-624536e29fe3",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status sc_recieved and programArea is compensation, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status sc_recieved and programArea is compensation, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: 'sc_recieved'\n    },\n    aoj: '',\n    // when aoj is '' shows Agency of Original Jurisdiction\n    programArea: 'compensation'\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('A reviewer is examining your new evidence');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description[0].props.children).to.contain('Agency of Original Jurisdiction');\n(0, _chai.expect)(description[1]).to.be.false; // if statement should be false since programArea is compensation\n(0, _chai.expect)(description[2].props.children[0].props.children).to.contain('Agency of Original Jurisdiction');",
                  "err": {},
                  "uuid": "87e4e2e6-d24a-47a8-b477-02ccefc59876",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status hlrReceived, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status hlrReceived, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.hlrReceived\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('A higher-level reviewer is taking a new look at your case');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description[0].props.children).to.contain('Agency of Original Jurisdiction');",
                  "err": {},
                  "uuid": "60d67dbb-929b-4da8-af81-c08c03e69b11",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status scDecision, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status scDecision, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.scDecision\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('The Agency of Original Jurisdiction made a decision');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description[0].props.children).to.contain('Agency of Original Jurisdiction');",
                  "err": {},
                  "uuid": "bb033fe4-b347-4192-a531-1cb466c1b816",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status hlrDecision, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status hlrDecision, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.hlrDecision,\n      details: {\n        // added issues because remand expects these\n        issues: [{\n          description: 'Heel, increased rating',\n          disposition: 'allowed',\n          date: '2016-05-30'\n        }, {\n          description: 'Tinnitus, increased rating',\n          disposition: 'denied',\n          date: '2016-05-30'\n        }]\n      }\n    },\n    aoj: '' // when aoj is '' shows Agency of Original Jurisdiction\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('The Agency of Original Jurisdiction made a decision');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description[0].props.children).to.contain('Agency of Original Jurisdiction');",
                  "err": {},
                  "uuid": "a87eb726-4602-4083-9dc9-c7e83e7c811b",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status scClosed, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status scClosed, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.scClosed\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Your Supplemental Claim was closed');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('Your Supplemental Claim was closed. Please contact VA or your Veterans Service Organization or representative for more information.');",
                  "err": {},
                  "uuid": "f887df63-3150-44ac-8204-5022e9a1bd2a",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status hlrClosed, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status hlrClosed, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.hlrClosed\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Your Higher-Level Review was closed');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('Your Higher-Level Review was closed. Please contact VA or your Veterans Service Organization or representative for more information.');",
                  "err": {},
                  "uuid": "2249db96-31b6-48de-8835-89274e725a16",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status remandReturn, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status remandReturn, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: _appealsV2Helpers.STATUS_TYPES.remandReturn\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('Your appeal was returned to the Board of Veterans’ Appeals');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('The Veterans Benefits Administration finished their work on the remand and will return your case to the Board of Veterans’ Appeals.');",
                  "err": {},
                  "uuid": "70f864d0-6c3a-4c38-94c3-68416419251b",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status motion, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status motion, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: 'motion'\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('We don’t know your status');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('We’re sorry, VA.gov will soon be updated to show your status.');",
                  "err": {},
                  "uuid": "43a3c416-23ee-4513-8f90-5b1bf67b123d",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when appeal status pre_docketed, shows specific title/description",
                  "fullTitle": "functions getStatusContents when appeal status pre_docketed, shows specific title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = {\n  id: 'A123',\n  type: 'appeal',\n  attributes: {\n    appealIds: ['A123'],\n    active: true,\n    status: {\n      type: 'pre_docketed'\n    }\n  }\n};\nvar contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\n(0, _chai.expect)(contents.title).to.eql('We don’t know your status');\n// Get the description from the <p/>\nvar description = contents.description.props.children;\n(0, _chai.expect)(description).to.contain('We’re sorry, VA.gov will soon be updated to show your status.');",
                  "err": {},
                  "uuid": "1fccbd49-42ec-40f4-8680-ba8328001321",
                  "parentUUID": "b95e6822-8ba8-4e2b-9973-e3ec4a64f285",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f8ae202-0e46-4b0b-a4bd-8f9c7044167e",
                "53357007-0479-40c5-b304-4bf61181c4aa",
                "085509c8-8b3a-4a95-8e37-9626964c01d7",
                "3ac2272a-26c1-4efd-bb8d-e53711cd6621",
                "b7521851-7f6a-4a2e-956d-50ac6969d1ce",
                "d7094cea-b388-4be9-a1ca-0781b10ef4a4",
                "1becd5dd-736a-42a1-a098-9b5986812a22",
                "342c5334-a81f-44ec-9f7e-003c96d8a616",
                "688ab509-ed97-400d-9784-c23c3d358b98",
                "e4441ee0-76db-49ef-9f3e-63be38249b6f",
                "3fe90f43-8c84-4b3a-a6b7-a3e9cbc2746e",
                "24e4864e-b6ef-403a-9ad2-f1b8797d0683",
                "5739aa6d-c5d9-4191-9550-b78e2b6403ed",
                "7322f0cd-5699-4f81-aa1b-c6a4936a629a",
                "3da29527-ebe7-49c6-8e17-b97aa803cecb",
                "1e40f5d6-b97e-4808-943a-9f5f8bcdac63",
                "f90146f8-96a4-4efb-9eee-317eb569adbe",
                "4cdb5cbe-d546-448c-807d-67bb55663fd1",
                "0ce4e41d-2d82-4cd9-9020-707d10db37b7",
                "67fa9ff3-2ed6-4564-bb19-fa4a71f361df",
                "a47264e6-6464-461c-804b-efed274a0f4a",
                "8171688e-de35-4647-85f8-9699dae8c6b5",
                "14bf007f-86e9-4cec-b711-8ce564a77b2d",
                "e44994b3-5c92-4963-96c8-c9bed2a8a4b9",
                "b48611c9-9303-4c19-a957-7e92c6490dfe",
                "e73501ef-85c0-4ac0-8192-624536e29fe3",
                "87e4e2e6-d24a-47a8-b477-02ccefc59876",
                "60d67dbb-929b-4da8-af81-c08c03e69b11",
                "bb033fe4-b347-4192-a531-1cb466c1b816",
                "a87eb726-4602-4083-9dc9-c7e83e7c811b",
                "f887df63-3150-44ac-8204-5022e9a1bd2a",
                "2249db96-31b6-48de-8835-89274e725a16",
                "70f864d0-6c3a-4c38-94c3-68416419251b",
                "43a3c416-23ee-4513-8f90-5b1bf67b123d",
                "1fccbd49-42ec-40f4-8680-ba8328001321"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "74e60fef-634e-4bc3-91d3-917fd3438342",
              "title": "getEventContent",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/appeals-v2-helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/appeals-v2-helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when event type is claimDecision, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is claimDecision, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.claimDecision;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA sent you a claim decision');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "b148f486-d0da-4664-b191-bc95a146bbe5",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is nod, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is nod, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.nod;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA received your Notice of Disagreement');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "192dbc11-fb27-437c-ad66-eb5a5a65fc2f",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is soc, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is soc, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.soc;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA sent you a Statement of the Case');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "b96da85f-2f92-499b-92fc-8cb8f0e28aba",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is form9, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is form9, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.form9;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA received your Form 9');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "67413238-8e4a-4b01-9f8a-0de116a35cba",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is ssoc, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is ssoc, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.ssoc;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA sent you a Supplemental Statement of the Case');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "a1b130be-317e-4712-b11d-8662d6b8b7fa",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is certified, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is certified, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.certified;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Your appeal was sent to the Board of Veterans’ Appeals');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "105a7422-231b-48d3-9251-cfb4c275641f",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is hearingHeld, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is hearingHeld, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.hearingHeld;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('You attended a hearing with a Veterans Law Judge');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "564a870e-7e76-4351-bf9e-b49fdf3df7e3",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is hearingNoShow, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is hearingNoShow, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.hearingNoShow;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('You missed your hearing with a Veterans Law Judge');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "3a612a57-b1ae-47e4-802f-220fc8e22dba",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is transcript, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is transcript, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.transcript;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA sent you a transcript of your hearing');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "12ed1261-d89e-4962-a085-26e1884a0ff5",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is bvaDecision, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is bvaDecision, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.bvaDecision;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Board of Veterans’ Appeals made a decision');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "cee6b8f2-af5b-482a-88d5-4fb623422e78",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is cavcDecision, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is cavcDecision, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.cavcDecision;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('U.S. Court of Appeals for Veterans Claims made a decision');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "0adcc173-faa6-4576-a764-0df5053e0067",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is remandReturn, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is remandReturn, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.remandReturn;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Your appeal was returned to the Board of Veterans’ Appeals');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "9efed4bb-ecbf-4afc-a5e3-f45799ede092",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is rampNotice, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is rampNotice, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.rampNotice;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA sent you a letter about the Rapid Appeals Modernization Program');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "4ecf3ee3-d13b-4239-9126-05c4d982aa37",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is fieldGrant, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is fieldGrant, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.fieldGrant;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA granted one or more issues');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "0b59df79-3536-430a-91ff-c8d162bf31e0",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is withdrawn, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is withdrawn, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.withdrawn;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('You withdrew your appeal');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "5d93a748-d2af-40b0-bed4-b35b4f8d4bd1",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is failureToRespond, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is failureToRespond, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.failureToRespond;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Your appeal was closed');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "d74048be-44a5-4b7e-bd16-33bf549d3343",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is otherClose, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is otherClose, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.otherClose;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Your appeal was closed');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "4817d741-dc36-4bb2-9aad-f60a298b0c5c",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is rampOptIn, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is rampOptIn, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.rampOptIn;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('You opted in to the Rapid Appeals Modernization Program');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "045fb770-58a7-48c2-a2be-14035e795433",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is death, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is death, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.death;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('The appeal was closed');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "d91a4226-85a0-4c8e-b235-cab5c781f605",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is merged, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is merged, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.merged;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Your appeals were merged');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "4f37edbb-4d98-4885-8b1f-f5bb4d90a55f",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is reconsideration, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is reconsideration, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.reconsideration;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Your Motion for Reconsideration was denied');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "df377c47-1f0c-4b9b-8717-194240fde570",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is vacated, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is vacated, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.vacated;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Board of Veterans’ Appeals vacated a previous decision');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "06883fa8-2873-4f59-8623-b54dd07a1698",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is amaNod, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is amaNod, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.amaNod;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Board of Veterans’ Appeals received your appeal');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "3f698a49-0ec8-4258-ad1a-c60c23763c60",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is docketChange, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is docketChange, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.docketChange;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('You switched appeal options');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "c7f14e3d-9d8e-4985-8e06-06e599a99fd9",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is distributedToVlj, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is distributedToVlj, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.distributedToVlj;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Your appeal was distributed to a Veterans Law Judge');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "5f5ca0d3-811c-4c64-9e78-088c30c7be22",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is bvaDecisionEffectuation, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is bvaDecisionEffectuation, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.bvaDecisionEffectuation;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA updated your benefits to reflect the Board’s decision');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "c918f042-65da-47d8-8bd5-b2e121b1b3f6",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is dtaDecision, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is dtaDecision, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.dtaDecision;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA corrected an error and made a new decision');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "02ad7e0d-47f9-4af9-9439-e5aeb3b9c294",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is scRequest, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is scRequest, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.scRequest;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA received your Supplemental Claim request');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "dc76ce26-cf3b-4b89-b2c2-48a5be0fb6fb",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is scDecision, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is scDecision, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.scDecision;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA made a new decision');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "0ae5abeb-8551-432f-8e31-ce5da5eba63f",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is hlrDecision, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is hlrDecision, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.hlrDecision;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA made a new decision');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "6209c340-aa42-4d35-9b6b-9b4f7a4fd84d",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is scOtherClose, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is scOtherClose, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.scOtherClose;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Your Supplemental Claim was closed');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "8d1e284a-8e17-4e98-80c2-574115fe8ee4",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is hlrRequest, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is hlrRequest, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.hlrRequest;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA received your Higher-Level Review request');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "823ec194-b366-4f1d-8d94-fc065af20d71",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is hlrDtaError, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is hlrDtaError, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.hlrDtaError;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('VA identified an error that must be corrected');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "227a547d-1363-444e-9259-d54e444326e1",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is hlrOtherClose, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is hlrOtherClose, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.hlrOtherClose;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('Your Higher-Level Review was closed');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "9782d3ae-662f-419a-aaf3-1c74d4120c6b",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when event type is statutoryOptIn, should return a given title/description",
                  "fullTitle": "functions getEventContent when event type is statutoryOptIn, should return a given title/description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "event.type = _appealsV2Helpers.EVENT_TYPES.statutoryOptIn;\nvar content = (0, _appealsV2Helpers.getEventContent)(event);\n(0, _chai.expect)(content.title).to.eql('You requested a decision review under the Appeals Modernization Act');\n(0, _chai.expect)(content.description).to.eql('');",
                  "err": {},
                  "uuid": "6da18132-6ce1-4135-ae11-a06a7af9dbfe",
                  "parentUUID": "74e60fef-634e-4bc3-91d3-917fd3438342",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b148f486-d0da-4664-b191-bc95a146bbe5",
                "192dbc11-fb27-437c-ad66-eb5a5a65fc2f",
                "b96da85f-2f92-499b-92fc-8cb8f0e28aba",
                "67413238-8e4a-4b01-9f8a-0de116a35cba",
                "a1b130be-317e-4712-b11d-8662d6b8b7fa",
                "105a7422-231b-48d3-9251-cfb4c275641f",
                "564a870e-7e76-4351-bf9e-b49fdf3df7e3",
                "3a612a57-b1ae-47e4-802f-220fc8e22dba",
                "12ed1261-d89e-4962-a085-26e1884a0ff5",
                "cee6b8f2-af5b-482a-88d5-4fb623422e78",
                "0adcc173-faa6-4576-a764-0df5053e0067",
                "9efed4bb-ecbf-4afc-a5e3-f45799ede092",
                "4ecf3ee3-d13b-4239-9126-05c4d982aa37",
                "0b59df79-3536-430a-91ff-c8d162bf31e0",
                "5d93a748-d2af-40b0-bed4-b35b4f8d4bd1",
                "d74048be-44a5-4b7e-bd16-33bf549d3343",
                "4817d741-dc36-4bb2-9aad-f60a298b0c5c",
                "045fb770-58a7-48c2-a2be-14035e795433",
                "d91a4226-85a0-4c8e-b235-cab5c781f605",
                "4f37edbb-4d98-4885-8b1f-f5bb4d90a55f",
                "df377c47-1f0c-4b9b-8717-194240fde570",
                "06883fa8-2873-4f59-8623-b54dd07a1698",
                "3f698a49-0ec8-4258-ad1a-c60c23763c60",
                "c7f14e3d-9d8e-4985-8e06-06e599a99fd9",
                "5f5ca0d3-811c-4c64-9e78-088c30c7be22",
                "c918f042-65da-47d8-8bd5-b2e121b1b3f6",
                "02ad7e0d-47f9-4af9-9439-e5aeb3b9c294",
                "dc76ce26-cf3b-4b89-b2c2-48a5be0fb6fb",
                "0ae5abeb-8551-432f-8e31-ce5da5eba63f",
                "6209c340-aa42-4d35-9b6b-9b4f7a4fd84d",
                "8d1e284a-8e17-4e98-80c2-574115fe8ee4",
                "823ec194-b366-4f1d-8d94-fc065af20d71",
                "227a547d-1363-444e-9259-d54e444326e1",
                "9782d3ae-662f-419a-aaf3-1c74d4120c6b",
                "6da18132-6ce1-4135-ae11-a06a7af9dbfe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ccef4ca6-119e-4ad9-9793-e34a0e87a069",
          "title": "Disability benefits helpers: ",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "65e2a4c1-a1fc-4737-b06d-07af3160f9b8",
              "title": "groupClaimsByDocsNeeded",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should always raise the grouped claims to the top",
                  "fullTitle": "Disability benefits helpers:  groupClaimsByDocsNeeded should always raise the grouped claims to the top",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var sortedClaims = claims.sort(_appealsV2Helpers.sortByLastUpdated);\nvar groupedClaims = (0, _helpers.groupClaimsByDocsNeeded)(sortedClaims);\n(0, _chai.expect)(groupedClaims[0].attributes.documentsNeeded).to.be.true;\n(0, _chai.expect)(groupedClaims[1].attributes.documentsNeeded).to.be.true;\n(0, _chai.expect)(groupedClaims[2].attributes.documentsNeeded).to.be.false;\n(0, _chai.expect)(groupedClaims[3].attributes.documentsNeeded).to.be.true;",
                  "err": {},
                  "uuid": "4eff055e-5d96-428b-bcd8-45205524ace1",
                  "parentUUID": "65e2a4c1-a1fc-4737-b06d-07af3160f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should preserve the order within the group and outside it",
                  "fullTitle": "Disability benefits helpers:  groupClaimsByDocsNeeded should preserve the order within the group and outside it",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var sortedClaims = claims.sort(_appealsV2Helpers.sortByLastUpdated);\nvar groupedClaims = (0, _helpers.groupClaimsByDocsNeeded)(sortedClaims);\n(0, _chai.expect)(groupedClaims[0].claimId).to.equal(3);\n(0, _chai.expect)(groupedClaims[1].claimId).to.equal(1);\n(0, _chai.expect)(groupedClaims[2].claimId).to.equal(2);\n(0, _chai.expect)(groupedClaims[3].claimId).to.equal(4);",
                  "err": {},
                  "uuid": "7c3d62de-a8dd-4590-a01e-5618cefacef4",
                  "parentUUID": "65e2a4c1-a1fc-4737-b06d-07af3160f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not include non-evidence-gathering phased items in the group",
                  "fullTitle": "Disability benefits helpers:  groupClaimsByDocsNeeded should not include non-evidence-gathering phased items in the group",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var sortedClaims = claims.sort(_appealsV2Helpers.sortByLastUpdated);\nvar groupedClaims = (0, _helpers.groupClaimsByDocsNeeded)(sortedClaims);\n(0, _chai.expect)(groupedClaims[0].claimId).to.equal(3);\n(0, _chai.expect)(groupedClaims[1].claimId).to.equal(1);\n(0, _chai.expect)(groupedClaims[2].claimId).to.equal(2);\n(0, _chai.expect)(groupedClaims[3].claimId).to.equal(4);",
                  "err": {},
                  "uuid": "5f1751d6-f465-407e-a97a-83dbc23920e7",
                  "parentUUID": "65e2a4c1-a1fc-4737-b06d-07af3160f9b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4eff055e-5d96-428b-bcd8-45205524ace1",
                "7c3d62de-a8dd-4590-a01e-5618cefacef4",
                "5f1751d6-f465-407e-a97a-83dbc23920e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "42df90f4-4b39-4d03-a9c6-3546dddd7c20",
              "title": "groupTimelineActivity",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should group events before a phase into phase 1",
                  "fullTitle": "Disability benefits helpers:  groupTimelineActivity should group events before a phase into phase 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var events = [{\n  type: 'filed',\n  date: '2010-05-03'\n}];\nvar phaseActivity = (0, _helpers.groupTimelineActivity)(events);\n(0, _chai.expect)(phaseActivity[1][0].type).to.equal('filed');",
                  "err": {},
                  "uuid": "b862ad4a-388a-48a4-845a-1771e3e79850",
                  "parentUUID": "42df90f4-4b39-4d03-a9c6-3546dddd7c20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter out events without a date",
                  "fullTitle": "Disability benefits helpers:  groupTimelineActivity should filter out events without a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var events = [{\n  type: 'filed',\n  date: null\n}];\nvar phaseActivity = (0, _helpers.groupTimelineActivity)(events);\n(0, _chai.expect)(phaseActivity).to.be.empty;",
                  "err": {},
                  "uuid": "55f0cdfb-8f83-4d92-8162-a001597c236e",
                  "parentUUID": "42df90f4-4b39-4d03-a9c6-3546dddd7c20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should group events after phase 1 into phase 2",
                  "fullTitle": "Disability benefits helpers:  groupTimelineActivity should group events after phase 1 into phase 2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var events = [{\n  type: 'some_event',\n  date: '2010-05-05'\n}, {\n  type: 'some_event',\n  date: '2010-05-04'\n}, {\n  type: 'phase1',\n  date: '2010-05-03'\n}, {\n  type: 'filed',\n  date: '2010-05-01'\n}];\nvar phaseActivity = (0, _helpers.groupTimelineActivity)(events);\n(0, _chai.expect)(phaseActivity[1][0].type).to.equal('filed');\n(0, _chai.expect)(phaseActivity[2].length).to.equal(3);",
                  "err": {},
                  "uuid": "456313e9-36a9-4c4c-9b93-c80d9c44b1e4",
                  "parentUUID": "42df90f4-4b39-4d03-a9c6-3546dddd7c20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should discard micro phases",
                  "fullTitle": "Disability benefits helpers:  groupTimelineActivity should discard micro phases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var events = [{\n  type: 'phase5',\n  date: '2010-05-07'\n}, {\n  type: 'phase4',\n  date: '2010-05-06'\n}, {\n  type: 'phase3',\n  date: '2010-05-05'\n}, {\n  type: 'phase2',\n  date: '2010-05-04'\n}, {\n  type: 'phase1',\n  date: '2010-05-03'\n}, {\n  type: 'filed',\n  date: '2010-05-01'\n}];\nvar phaseActivity = (0, _helpers.groupTimelineActivity)(events);\n(0, _chai.expect)(phaseActivity[3].length).to.equal(1);\n(0, _chai.expect)(phaseActivity[3][0].type).to.equal('phase_entered');",
                  "err": {},
                  "uuid": "7ffdcfca-2703-4a37-aab0-9e93079a6a97",
                  "parentUUID": "42df90f4-4b39-4d03-a9c6-3546dddd7c20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should group events into correct bucket",
                  "fullTitle": "Disability benefits helpers:  groupTimelineActivity should group events into correct bucket",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var events = [{\n  type: 'received_from_you_list',\n  date: '2016-11-02'\n}, {\n  type: 'received_from_you_list',\n  date: '2016-11-02'\n}, {\n  type: 'received_from_you_list',\n  date: '2016-11-02'\n}, {\n  type: 'received_from_you_list',\n  date: '2016-11-02'\n}, {\n  type: 'phase5',\n  date: '2016-11-02'\n}, {\n  type: 'phase4',\n  date: '2016-11-02'\n}, {\n  type: 'phase3',\n  date: '2016-11-02'\n}, {\n  type: 'phase2',\n  date: '2016-11-02'\n}, {\n  type: 'other_documents_list',\n  uploadDate: '2016-03-24'\n}, {\n  type: 'other_documents_list',\n  uploadDate: '2015-08-28'\n}, {\n  type: 'other_documents_list',\n  uploadDate: '2015-08-28'\n}, {\n  type: 'phase1',\n  date: '2015-04-20'\n}, {\n  type: 'filed',\n  date: '2015-04-20'\n}, {\n  type: 'other_documents_list',\n  uploadDate: null\n}];\nvar phaseActivity = (0, _helpers.groupTimelineActivity)(events);\n(0, _chai.expect)(phaseActivity[3].length).to.equal(5);\n(0, _chai.expect)(phaseActivity[3][4].type).to.equal('phase_entered');\n(0, _chai.expect)(phaseActivity[2].length).to.equal(4);\n(0, _chai.expect)(phaseActivity[1].length).to.equal(1);",
                  "err": {},
                  "uuid": "13f584f7-9b42-41cb-84c0-968355b21070",
                  "parentUUID": "42df90f4-4b39-4d03-a9c6-3546dddd7c20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b862ad4a-388a-48a4-845a-1771e3e79850",
                "55f0cdfb-8f83-4d92-8162-a001597c236e",
                "456313e9-36a9-4c4c-9b93-c80d9c44b1e4",
                "7ffdcfca-2703-4a37-aab0-9e93079a6a97",
                "13f584f7-9b42-41cb-84c0-968355b21070"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f9ea416f-1d19-4d1e-81c2-29f48dcd73c8",
              "title": "isPopulatedClaim",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return false if any field is empty",
                  "fullTitle": "Disability benefits helpers:  isPopulatedClaim should return false if any field is empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  attributes: {\n    claimType: 'something',\n    closeDate: null,\n    contentions: [{\n      name: 'Condition 1'\n    }]\n  }\n};\n(0, _chai.expect)((0, _helpers.isPopulatedClaim)(claim.attributes)).to.be.false;",
                  "err": {},
                  "uuid": "8092fcce-1097-4ba2-acbe-1cca18fa30bc",
                  "parentUUID": "f9ea416f-1d19-4d1e-81c2-29f48dcd73c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if no field is empty",
                  "fullTitle": "Disability benefits helpers:  isPopulatedClaim should return true if no field is empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  attributes: {\n    claimDate: '2023-04-28',\n    claimType: 'something',\n    contentions: [{\n      name: 'Condition 1'\n    }]\n  }\n};\n(0, _chai.expect)((0, _helpers.isPopulatedClaim)(claim.attributes)).to.be.true;",
                  "err": {},
                  "uuid": "d298d0bb-e7e2-4121-b2f0-14c13aac3e17",
                  "parentUUID": "f9ea416f-1d19-4d1e-81c2-29f48dcd73c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if contention list is empty",
                  "fullTitle": "Disability benefits helpers:  isPopulatedClaim should return false if contention list is empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  attributes: {\n    claimDate: '2023-04-28',\n    claimType: 'something',\n    contentions: []\n  }\n};\n(0, _chai.expect)((0, _helpers.isPopulatedClaim)(claim.attributes)).to.be.false;",
                  "err": {},
                  "uuid": "70c01045-8b79-47d8-a849-5aa4b380393a",
                  "parentUUID": "f9ea416f-1d19-4d1e-81c2-29f48dcd73c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8092fcce-1097-4ba2-acbe-1cca18fa30bc",
                "d298d0bb-e7e2-4121-b2f0-14c13aac3e17",
                "70c01045-8b79-47d8-a849-5aa4b380393a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "bb4d8329-b15e-4fe8-bbd6-70d9fb3c9024",
              "title": "truncateDescription",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "02b77060-5d5c-4dd5-8fa0-3d396fbe3a78",
                  "title": " when default - maxlength is 120",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should truncate text longer than 120 characters",
                      "fullTitle": "Disability benefits helpers:  truncateDescription  when default - maxlength is 120 should truncate text longer than 120 characters",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var userText = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris';\nvar userTextEllipsed = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliq…';\nvar text = (0, _helpers.truncateDescription)(userText);\n(0, _chai.expect)(text).to.equal(userTextEllipsed);",
                      "err": {},
                      "uuid": "bce12289-1976-4f0e-b90f-d22714ce663c",
                      "parentUUID": "02b77060-5d5c-4dd5-8fa0-3d396fbe3a78",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bce12289-1976-4f0e-b90f-d22714ce663c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "0ae0216b-ebcc-4783-bd14-be89909ed78d",
                  "title": "when maxlength is 200",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should truncate text longer than 200 characters",
                      "fullTitle": "Disability benefits helpers:  truncateDescription when maxlength is 200 should truncate text longer than 200 characters",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var userText = 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qu quis nostrud exercitation ullamco laboris';\nvar userTextEllipsed = 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qu…';\nvar text = (0, _helpers.truncateDescription)(userText, 200);\n(0, _chai.expect)(text).to.equal(userTextEllipsed);",
                      "err": {},
                      "uuid": "f3b9dfa2-5ffe-4c8b-ba6b-8adb901dcd15",
                      "parentUUID": "0ae0216b-ebcc-4783-bd14-be89909ed78d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f3b9dfa2-5ffe-4c8b-ba6b-8adb901dcd15"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "daed243d-d74a-414a-b200-89b59def0be1",
              "title": "hasBeenReviewed",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should check that item is reviewed",
                  "fullTitle": "Disability benefits helpers:  hasBeenReviewed should check that item is reviewed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _helpers.hasBeenReviewed)({\n  type: 'received_from_you_list',\n  status: 'ACCEPTED'\n});\n(0, _chai.expect)(result).to.be.true;",
                  "err": {},
                  "uuid": "45389eae-3996-4553-8dd7-97018ca39ae3",
                  "parentUUID": "daed243d-d74a-414a-b200-89b59def0be1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should check that item has not been reviewed",
                  "fullTitle": "Disability benefits helpers:  hasBeenReviewed should check that item has not been reviewed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _helpers.hasBeenReviewed)({\n  type: 'received_from_you_list',\n  status: 'SUBMITTED_AWAITING_REVIEW'\n});\n(0, _chai.expect)(result).to.be.false;",
                  "err": {},
                  "uuid": "2f932532-307c-497d-a509-2b8253f71b10",
                  "parentUUID": "daed243d-d74a-414a-b200-89b59def0be1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45389eae-3996-4553-8dd7-97018ca39ae3",
                "2f932532-307c-497d-a509-2b8253f71b10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6f5916d8-e407-4611-9202-c256a4f1bff1",
              "title": "getDocTypeDescription",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get description by type",
                  "fullTitle": "Disability benefits helpers:  getDocTypeDescription should get description by type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _helpers.getDocTypeDescription)('L070');\n(0, _chai.expect)(result).to.equal('Photographs');",
                  "err": {},
                  "uuid": "d2022ec2-5b8a-436c-b326-6c60b5216e1c",
                  "parentUUID": "6f5916d8-e407-4611-9202-c256a4f1bff1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2022ec2-5b8a-436c-b326-6c60b5216e1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "fee6df86-3689-4f31-9570-8cc3e46e1fec",
              "title": "displayFileSize",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should show size in bytes",
                  "fullTitle": "Disability benefits helpers:  displayFileSize should show size in bytes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var size = (0, _helpers.displayFileSize)(2);\n(0, _chai.expect)(size).to.equal('2B');",
                  "err": {},
                  "uuid": "c474837b-6b81-42ec-833b-a4f792a6e513",
                  "parentUUID": "fee6df86-3689-4f31-9570-8cc3e46e1fec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show size in kilobytes",
                  "fullTitle": "Disability benefits helpers:  displayFileSize should show size in kilobytes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var size = (0, _helpers.displayFileSize)(1026);\n(0, _chai.expect)(size).to.equal('1KB');",
                  "err": {},
                  "uuid": "181fe9fb-ccda-4ab8-ab74-b7afc69ed238",
                  "parentUUID": "fee6df86-3689-4f31-9570-8cc3e46e1fec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show size in megabytes",
                  "fullTitle": "Disability benefits helpers:  displayFileSize should show size in megabytes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var size = (0, _helpers.displayFileSize)(2097152);\n(0, _chai.expect)(size).to.equal('2MB');",
                  "err": {},
                  "uuid": "0583fd94-9bb1-427f-a44e-1e6904341427",
                  "parentUUID": "fee6df86-3689-4f31-9570-8cc3e46e1fec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c474837b-6b81-42ec-833b-a4f792a6e513",
                "181fe9fb-ccda-4ab8-ab74-b7afc69ed238",
                "0583fd94-9bb1-427f-a44e-1e6904341427"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9e8c1062-25c1-4219-afcd-ab0654f1b8b7",
              "title": "getFilesNeeded",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "42c761c0-62fa-4b77-aeb2-9c2118b15075",
                  "title": "when useLighthouse is true",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "when trackedItems is empty, should return empty array",
                      "fullTitle": "Disability benefits helpers:  getFilesNeeded when useLighthouse is true when trackedItems is empty, should return empty array",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var trackedItems = [];\nvar filesNeeded = (0, _helpers.getFilesNeeded)(trackedItems, useLighthouse);\n(0, _chai.expect)(filesNeeded.length).to.equal(0);",
                      "err": {},
                      "uuid": "c754c3a6-b309-41e1-abfd-ffcb01948845",
                      "parentUUID": "42c761c0-62fa-4b77-aeb2-9c2118b15075",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "when trackedItems exists, should return data",
                      "fullTitle": "Disability benefits helpers:  getFilesNeeded when useLighthouse is true when trackedItems exists, should return data",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var trackedItems = [{\n  status: 'NEEDED_FROM_YOU'\n}];\nvar filesNeeded = (0, _helpers.getFilesNeeded)(trackedItems, useLighthouse);\n(0, _chai.expect)(filesNeeded.length).to.equal(1);",
                      "err": {},
                      "uuid": "86316125-d6c6-4c33-a2ec-31d1be9b1e68",
                      "parentUUID": "42c761c0-62fa-4b77-aeb2-9c2118b15075",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c754c3a6-b309-41e1-abfd-ffcb01948845",
                    "86316125-d6c6-4c33-a2ec-31d1be9b1e68"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "8f684b4b-ce2c-4ade-9cf6-272cdfe785e2",
                  "title": "when useLighthouse is false",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "when eventsTimeline is empty, should return empty array",
                      "fullTitle": "Disability benefits helpers:  getFilesNeeded when useLighthouse is false when eventsTimeline is empty, should return empty array",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var eventsTimeline = [];\nvar filesNeeded = (0, _helpers.getFilesNeeded)(eventsTimeline, useLighthouse);\n(0, _chai.expect)(filesNeeded.length).to.equal(0);",
                      "err": {},
                      "uuid": "48cbfb6f-42ca-43ca-9ef2-e449c338277d",
                      "parentUUID": "8f684b4b-ce2c-4ade-9cf6-272cdfe785e2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "when eventsTimeline exists, should return data",
                      "fullTitle": "Disability benefits helpers:  getFilesNeeded when useLighthouse is false when eventsTimeline exists, should return data",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var eventsTimeline = [{\n  type: 'still_need_from_you_list',\n  status: 'NEEDED'\n}];\nvar filesNeeded = (0, _helpers.getFilesNeeded)(eventsTimeline, useLighthouse);\n(0, _chai.expect)(filesNeeded.length).to.equal(1);",
                      "err": {},
                      "uuid": "14bcd0a3-0311-4a3b-99c0-e692421a3a63",
                      "parentUUID": "8f684b4b-ce2c-4ade-9cf6-272cdfe785e2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "48cbfb6f-42ca-43ca-9ef2-e449c338277d",
                    "14bcd0a3-0311-4a3b-99c0-e692421a3a63"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5afda2a2-5b56-432f-80b5-072bf845b98a",
              "title": "getFilesOptional",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "3cf30354-3a5a-44b9-8f39-36247762d633",
                  "title": "when useLighthouse is true",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "when trackedItems is empty, should return empty array",
                      "fullTitle": "Disability benefits helpers:  getFilesOptional when useLighthouse is true when trackedItems is empty, should return empty array",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var trackedItems = [];\nvar filesNeeded = (0, _helpers.getFilesOptional)(trackedItems, useLighthouse);\n(0, _chai.expect)(filesNeeded.length).to.equal(0);",
                      "err": {},
                      "uuid": "cdd42b23-1a5b-43cb-bbc6-1413d3ae72a4",
                      "parentUUID": "3cf30354-3a5a-44b9-8f39-36247762d633",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "when trackedItems exists, should return data",
                      "fullTitle": "Disability benefits helpers:  getFilesOptional when useLighthouse is true when trackedItems exists, should return data",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var trackedItems = [{\n  status: 'NEEDED_FROM_OTHERS'\n}];\nvar filesNeeded = (0, _helpers.getFilesOptional)(trackedItems, useLighthouse);\n(0, _chai.expect)(filesNeeded.length).to.equal(1);",
                      "err": {},
                      "uuid": "3ef4b46a-3dfe-4c2f-b7b8-412d379e6fa2",
                      "parentUUID": "3cf30354-3a5a-44b9-8f39-36247762d633",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cdd42b23-1a5b-43cb-bbc6-1413d3ae72a4",
                    "3ef4b46a-3dfe-4c2f-b7b8-412d379e6fa2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "7d6a7c39-20c1-4ba1-80d6-a01e1fc45925",
                  "title": "when useLighthouse is false",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "when eventsTimeline is empty, should return empty array",
                      "fullTitle": "Disability benefits helpers:  getFilesOptional when useLighthouse is false when eventsTimeline is empty, should return empty array",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var eventsTimeline = [];\nvar filesNeeded = (0, _helpers.getFilesOptional)(eventsTimeline, useLighthouse);\n(0, _chai.expect)(filesNeeded.length).to.equal(0);",
                      "err": {},
                      "uuid": "0d71ebff-54dc-4b63-ac79-410614d54bc6",
                      "parentUUID": "7d6a7c39-20c1-4ba1-80d6-a01e1fc45925",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "when eventsTimeline exists, should return data",
                      "fullTitle": "Disability benefits helpers:  getFilesOptional when useLighthouse is false when eventsTimeline exists, should return data",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var eventsTimeline = [{\n  type: 'still_need_from_others_list',\n  status: 'NEEDED'\n}];\nvar filesNeeded = (0, _helpers.getFilesOptional)(eventsTimeline, useLighthouse);\n(0, _chai.expect)(filesNeeded.length).to.equal(1);",
                      "err": {},
                      "uuid": "11b9bf70-b32e-464d-bb57-ea4004255173",
                      "parentUUID": "7d6a7c39-20c1-4ba1-80d6-a01e1fc45925",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0d71ebff-54dc-4b63-ac79-410614d54bc6",
                    "11b9bf70-b32e-464d-bb57-ea4004255173"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "a4ca42a6-96bd-4091-baee-0e8d2bbd1cf3",
              "title": "getUserPhase",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get phase 3 desc for 4-6",
                  "fullTitle": "Disability benefits helpers:  getUserPhase should get phase 3 desc for 4-6",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var phase = (0, _helpers.getUserPhase)(5);\n(0, _chai.expect)(phase).to.equal(3);",
                  "err": {},
                  "uuid": "ca8e3643-3848-434f-ab22-0ce06870f477",
                  "parentUUID": "a4ca42a6-96bd-4091-baee-0e8d2bbd1cf3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca8e3643-3848-434f-ab22-0ce06870f477"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2e24161f-cb17-4e95-af12-ebd6de5436c7",
              "title": "getUserPhaseDescription",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get description for 3",
                  "fullTitle": "Disability benefits helpers:  getUserPhaseDescription should get description for 3",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var desc = (0, _helpers.getUserPhaseDescription)(3);\n(0, _chai.expect)(desc).to.equal('Evidence gathering, review, and decision');",
                  "err": {},
                  "uuid": "a8196e0d-7a93-4be3-8163-f985202e3c38",
                  "parentUUID": "2e24161f-cb17-4e95-af12-ebd6de5436c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8196e0d-7a93-4be3-8163-f985202e3c38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "99c7444e-8e38-4557-b12b-245db50737cc",
              "title": "getStatusDescription",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display status description from map",
                  "fullTitle": "Disability benefits helpers:  getStatusDescription should display status description from map",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var desc = (0, _helpers.getStatusDescription)('CLAIM_RECEIVED');\n(0, _chai.expect)(desc).to.equal('Step 1 of 5: Claim received');",
                  "err": {},
                  "uuid": "906dde54-01cd-4728-ab93-fbb3ecbd10f2",
                  "parentUUID": "99c7444e-8e38-4557-b12b-245db50737cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "906dde54-01cd-4728-ab93-fbb3ecbd10f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "70337ad9-df2e-40bd-b836-ece48b80a771",
              "title": "getStatusMap",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display status map",
                  "fullTitle": "Disability benefits helpers:  getStatusMap should display status map",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var STATUSES = (0, _helpers.getStatusMap)();\n(0, _chai.expect)(STATUSES.get('CLAIM_RECEIVED')).to.equal('CLAIM_RECEIVED');\n(0, _chai.expect)(STATUSES.get('UNDER_REVIEW')).to.equal('UNDER_REVIEW');\n(0, _chai.expect)(STATUSES.get('GATHERING_OF_EVIDENCE')).to.equal('GATHERING_OF_EVIDENCE');\n(0, _chai.expect)(STATUSES.get('REVIEW_OF_EVIDENCE')).to.equal('REVIEW_OF_EVIDENCE');\n(0, _chai.expect)(STATUSES.get('PREPARATION_FOR_DECISION')).to.equal('PREPARATION_FOR_DECISION');\n(0, _chai.expect)(STATUSES.get('PENDING_DECISION_APPROVAL')).to.equal('PENDING_DECISION_APPROVAL');\n(0, _chai.expect)(STATUSES.get('PREPARATION_FOR_NOTIFICATION')).to.equal('PREPARATION_FOR_NOTIFICATION');\n(0, _chai.expect)(STATUSES.get('COMPLETE')).to.equal('COMPLETE');",
                  "err": {},
                  "uuid": "8bd26a83-680b-4c87-996e-a7ee33c9bb9f",
                  "parentUUID": "70337ad9-df2e-40bd-b836-ece48b80a771",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bd26a83-680b-4c87-996e-a7ee33c9bb9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "96f6b72c-1423-478a-86f9-fe72593128b1",
              "title": "getClaimStatusDescription",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display claim status description from map",
                  "fullTitle": "Disability benefits helpers:  getClaimStatusDescription should display claim status description from map",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var desc = (0, _helpers.getClaimStatusDescription)('CLAIM_RECEIVED');\n(0, _chai.expect)(desc).to.equal('We received your claim. We haven’t assigned the claim to a reviewer yet.');",
                  "err": {},
                  "uuid": "62a68307-541c-4096-8080-13e0adead3e3",
                  "parentUUID": "96f6b72c-1423-478a-86f9-fe72593128b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62a68307-541c-4096-8080-13e0adead3e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "1b2b6377-956d-4648-8daf-177853054a5b",
              "title": "getPhaseDescription",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display description from map",
                  "fullTitle": "Disability benefits helpers:  getPhaseDescription should display description from map",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var desc = (0, _helpers.getPhaseDescription)(2);\n(0, _chai.expect)(desc).to.equal('Initial review');",
                  "err": {},
                  "uuid": "7c60d5b7-778f-4cab-bd22-23243ad85cfb",
                  "parentUUID": "1b2b6377-956d-4648-8daf-177853054a5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c60d5b7-778f-4cab-bd22-23243ad85cfb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0895a53a-8e0c-49b7-b254-56bd0fc2ecb3",
              "title": "getItemDate",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should use the received date",
                  "fullTitle": "Disability benefits helpers:  getItemDate should use the received date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var date = (0, _helpers.getItemDate)({\n  receivedDate: '2010-01-01',\n  documents: [{\n    uploadDate: '2011-01-01'\n  }],\n  date: '2012-01-01'\n});\n(0, _chai.expect)(date).to.equal('2010-01-01');",
                  "err": {},
                  "uuid": "5f5bdc9b-d4e1-4e1d-9695-616bddc075c5",
                  "parentUUID": "0895a53a-8e0c-49b7-b254-56bd0fc2ecb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should use the last document upload date",
                  "fullTitle": "Disability benefits helpers:  getItemDate should use the last document upload date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var date = (0, _helpers.getItemDate)({\n  receivedDate: null,\n  documents: [{\n    uploadDate: '2011-01-01'\n  }, {\n    uploadDate: '2012-01-01'\n  }],\n  date: '2013-01-01'\n});\n(0, _chai.expect)(date).to.equal('2012-01-01');",
                  "err": {},
                  "uuid": "d61d0690-629a-44e2-8b60-a04ed5970ef9",
                  "parentUUID": "0895a53a-8e0c-49b7-b254-56bd0fc2ecb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should use the date",
                  "fullTitle": "Disability benefits helpers:  getItemDate should use the date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var date = (0, _helpers.getItemDate)({\n  receivedDate: null,\n  documents: [],\n  date: '2013-01-01'\n});\n(0, _chai.expect)(date).to.equal('2013-01-01');",
                  "err": {},
                  "uuid": "c0d6152a-1a7a-426c-808b-2bf73fcb5dc7",
                  "parentUUID": "0895a53a-8e0c-49b7-b254-56bd0fc2ecb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should use the upload date",
                  "fullTitle": "Disability benefits helpers:  getItemDate should use the upload date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var date = (0, _helpers.getItemDate)({\n  uploadDate: '2014-01-01',\n  type: 'other_documents_list',\n  date: '2013-01-01'\n});\n(0, _chai.expect)(date).to.equal('2014-01-01');",
                  "err": {},
                  "uuid": "30a9433b-bf6a-4516-ae7d-09a4e15995ae",
                  "parentUUID": "0895a53a-8e0c-49b7-b254-56bd0fc2ecb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f5bdc9b-d4e1-4e1d-9695-616bddc075c5",
                "d61d0690-629a-44e2-8b60-a04ed5970ef9",
                "c0d6152a-1a7a-426c-808b-2bf73fcb5dc7",
                "30a9433b-bf6a-4516-ae7d-09a4e15995ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ed525836-96da-4a60-8f02-60ad8b17571f",
              "title": "isClaimComplete",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should check if claim is in complete phase",
                  "fullTitle": "Disability benefits helpers:  isClaimComplete should check if claim is in complete phase",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var isComplete = (0, _helpers.isClaimComplete)({\n  attributes: {\n    phase: 8\n  }\n});\n(0, _chai.expect)(isComplete).to.be.true;",
                  "err": {},
                  "uuid": "f3702f0a-ce56-46ba-8006-9573b8d3cb65",
                  "parentUUID": "ed525836-96da-4a60-8f02-60ad8b17571f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should check if claim has decision letter",
                  "fullTitle": "Disability benefits helpers:  isClaimComplete should check if claim has decision letter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var isComplete = (0, _helpers.isClaimComplete)({\n  attributes: {\n    decisionLetterSent: true\n  }\n});\n(0, _chai.expect)(isComplete).to.be.true;",
                  "err": {},
                  "uuid": "3abe0183-6a67-4fea-bd1b-1befc5deed73",
                  "parentUUID": "ed525836-96da-4a60-8f02-60ad8b17571f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f3702f0a-ce56-46ba-8006-9573b8d3cb65",
                "3abe0183-6a67-4fea-bd1b-1befc5deed73"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0da598e2-6875-4a97-9a69-14034cd79291",
              "title": "isDisabilityCompensationClaim",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "0b14c4e1-51a1-48a5-8c2e-208ada006491",
                  "title": "when claimTypeCode is a disability compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "ac1dfddc-c85f-4c0c-a641-bca5cc390b8f",
                      "title": "when claimTypeCode is null",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should return false",
                          "fullTitle": "Disability benefits helpers:  isDisabilityCompensationClaim when claimTypeCode is a disability compensation claim when claimTypeCode is null should return false",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "(0, _chai.expect)((0, _helpers.isDisabilityCompensationClaim)(null)).to.be.false;",
                          "err": {},
                          "uuid": "1a7b7501-06c0-428e-a4d5-58369d00a052",
                          "parentUUID": "ac1dfddc-c85f-4c0c-a641-bca5cc390b8f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "1a7b7501-06c0-428e-a4d5-58369d00a052"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "87f86613-f53c-4ff3-b669-52315182a759",
                      "title": "when claimTypeCode is eBenefits 526EZ-Supplemental (020)",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should return true",
                          "fullTitle": "Disability benefits helpers:  isDisabilityCompensationClaim when claimTypeCode is a disability compensation claim when claimTypeCode is eBenefits 526EZ-Supplemental (020) should return true",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "(0, _chai.expect)((0, _helpers.isDisabilityCompensationClaim)(claimTypeCode)).to.be.true;",
                          "err": {},
                          "uuid": "5f6029ff-19be-49f7-8041-be5ef36242de",
                          "parentUUID": "87f86613-f53c-4ff3-b669-52315182a759",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "5f6029ff-19be-49f7-8041-be5ef36242de"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "46146c77-d127-4a83-acf8-1a0f30848b67",
                      "title": "when claimTypeCode is IDES Initial Live Comp <8 Issues",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should return true",
                          "fullTitle": "Disability benefits helpers:  isDisabilityCompensationClaim when claimTypeCode is a disability compensation claim when claimTypeCode is IDES Initial Live Comp <8 Issues should return true",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "(0, _chai.expect)((0, _helpers.isDisabilityCompensationClaim)(claimTypeCode)).to.be.true;",
                          "err": {},
                          "uuid": "a92192f6-76c2-4068-b741-74d3191d7702",
                          "parentUUID": "46146c77-d127-4a83-acf8-1a0f30848b67",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a92192f6-76c2-4068-b741-74d3191d7702"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "8c9e07b7-7d21-4547-a8e1-1374d4ff1b1f",
                  "title": "when claimTypeCode is not a disability compensation claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "07d6c9d5-93d6-4e32-92a0-29aac1876e0f",
                      "title": "when claimTypeCode is a claim for dependency",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should return true",
                          "fullTitle": "Disability benefits helpers:  isDisabilityCompensationClaim when claimTypeCode is not a disability compensation claim when claimTypeCode is a claim for dependency should return true",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "(0, _chai.expect)((0, _helpers.isDisabilityCompensationClaim)(claimTypeCode)).to.be.false;",
                          "err": {},
                          "uuid": "eafd207f-9536-492b-bfdb-5393d9c95cee",
                          "parentUUID": "07d6c9d5-93d6-4e32-92a0-29aac1876e0f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "eafd207f-9536-492b-bfdb-5393d9c95cee"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0cd6f8b1-944c-452a-919d-03d13bff416e",
              "title": "isClaimOpen",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "3595c6e2-eda8-42b0-870c-d99113f52695",
                  "title": "when status is COMPLETE",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "bae4bff8-650b-40f6-a3f9-043bcb551a43",
                      "title": "when closeDate is null",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should return false",
                          "fullTitle": "Disability benefits helpers:  isClaimOpen when status is COMPLETE when closeDate is null should return false",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var isOpen = (0, _helpers.isClaimOpen)(status, null);\n(0, _chai.expect)(isOpen).to.be.false;",
                          "err": {},
                          "uuid": "65841cc3-9587-41e8-a57e-e648296038ba",
                          "parentUUID": "bae4bff8-650b-40f6-a3f9-043bcb551a43",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "65841cc3-9587-41e8-a57e-e648296038ba"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "855ba17a-2b65-4762-ab62-6a6fa2e64326",
                      "title": "when closeDate exists",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should return false",
                          "fullTitle": "Disability benefits helpers:  isClaimOpen when status is COMPLETE when closeDate exists should return false",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var isOpen = (0, _helpers.isClaimOpen)(status, '2024-01-01');\n(0, _chai.expect)(isOpen).to.be.false;",
                          "err": {},
                          "uuid": "0f145519-1b4c-4b35-9a79-6b4cc1421974",
                          "parentUUID": "855ba17a-2b65-4762-ab62-6a6fa2e64326",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0f145519-1b4c-4b35-9a79-6b4cc1421974"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "62076f4b-47d0-45b8-a22d-3a0ed9569614",
                  "title": "when status is not COMPLETE",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "f77311e5-011d-47f0-a051-c4a1cc64f349",
                      "title": "when closeDate is null",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should return true",
                          "fullTitle": "Disability benefits helpers:  isClaimOpen when status is not COMPLETE when closeDate is null should return true",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var isOpen = (0, _helpers.isClaimOpen)(status, null);\n(0, _chai.expect)(isOpen).to.be.true;",
                          "err": {},
                          "uuid": "cf0c3264-d2db-43ef-9dc1-3270573a58a1",
                          "parentUUID": "f77311e5-011d-47f0-a051-c4a1cc64f349",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "cf0c3264-d2db-43ef-9dc1-3270573a58a1"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    },
                    {
                      "uuid": "20dade15-2a22-43bd-8dfd-40574356c638",
                      "title": "when closeDate exists",
                      "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should return false",
                          "fullTitle": "Disability benefits helpers:  isClaimOpen when status is not COMPLETE when closeDate exists should return false",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "var isOpen = (0, _helpers.isClaimOpen)(status, '2024-01-01');\n(0, _chai.expect)(isOpen).to.be.false;",
                          "err": {},
                          "uuid": "d0647cc1-17d0-48a5-9e38-9a4e6b5dd030",
                          "parentUUID": "20dade15-2a22-43bd-8dfd-40574356c638",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "d0647cc1-17d0-48a5-9e38-9a4e6b5dd030"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 10000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c68640c1-ccae-4360-af1c-022bb2814186",
              "title": "itemsNeedingAttentionFromVet",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return number of needed items from vet",
                  "fullTitle": "Disability benefits helpers:  itemsNeedingAttentionFromVet should return number of needed items from vet",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var itemsNeeded = (0, _helpers.itemsNeedingAttentionFromVet)([{\n  id: 1,\n  status: 'NEEDED_FROM_YOU'\n}, {\n  id: 2,\n  status: 'SUBMITTED_AWAITING_REVIEW'\n}, {\n  id: 3,\n  status: 'NEEDED_FROM_OTHERS'\n}]);\n(0, _chai.expect)(itemsNeeded).to.equal(1);",
                  "err": {},
                  "uuid": "886e82e0-4c5a-47c7-91da-2eee19e5adb5",
                  "parentUUID": "c68640c1-ccae-4360-af1c-022bb2814186",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "886e82e0-4c5a-47c7-91da-2eee19e5adb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "89bfaa9e-4ea8-4181-b6c8-a675e74b01bf",
              "title": "getClaimType",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the claim type",
                  "fullTitle": "Disability benefits helpers:  getClaimType should return the claim type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  attributes: {\n    claimType: 'Awesome'\n  }\n};\n(0, _chai.expect)((0, _helpers.getClaimType)(claim)).to.equal('Awesome');",
                  "err": {},
                  "uuid": "0a7896d3-e637-4873-b319-c5f35ecffe6d",
                  "parentUUID": "89bfaa9e-4ea8-4181-b6c8-a675e74b01bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return new text for death claims",
                  "fullTitle": "Disability benefits helpers:  getClaimType should return new text for death claims",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  attributes: {\n    claimType: 'Death'\n  }\n};\n(0, _chai.expect)((0, _helpers.getClaimType)(claim)).to.equal('expenses related to death or burial');",
                  "err": {},
                  "uuid": "3a9dd868-3b7f-4be9-ac7b-dd4e202b9772",
                  "parentUUID": "89bfaa9e-4ea8-4181-b6c8-a675e74b01bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the default claim type",
                  "fullTitle": "Disability benefits helpers:  getClaimType should return the default claim type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  attributes: {\n    claimType: undefined\n  }\n};\n(0, _chai.expect)((0, _helpers.getClaimType)(claim)).to.equal('Disability Compensation');",
                  "err": {},
                  "uuid": "741b4896-ac50-4135-a717-48fd80db8c8f",
                  "parentUUID": "89bfaa9e-4ea8-4181-b6c8-a675e74b01bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a7896d3-e637-4873-b319-c5f35ecffe6d",
                "3a9dd868-3b7f-4be9-ac7b-dd4e202b9772",
                "741b4896-ac50-4135-a717-48fd80db8c8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "00fe7dc3-63a0-4e04-a3b6-fbba1b87c611",
              "title": "makeAuthRequest",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"makeAuthRequest\"",
                  "fullTitle": "Disability benefits helpers:  makeAuthRequest \"before all\" hook in \"makeAuthRequest\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.listen();\nserver.events.on('request:start', function (req) {\n  expectedUrl = req.url.href;\n});",
                  "err": {},
                  "uuid": "480011eb-0878-4307-a779-4f52a3e1e36e",
                  "parentUUID": "00fe7dc3-63a0-4e04-a3b6-fbba1b87c611",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"makeAuthRequest\"",
                  "fullTitle": "Disability benefits helpers:  makeAuthRequest \"after all\" hook in \"makeAuthRequest\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return server.close();",
                  "err": {},
                  "uuid": "2f87fadc-8125-4ab9-9056-7c8da8bd92d8",
                  "parentUUID": "00fe7dc3-63a0-4e04-a3b6-fbba1b87c611",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"after each\" hook in \"makeAuthRequest\"",
                  "fullTitle": "Disability benefits helpers:  makeAuthRequest \"after each\" hook in \"makeAuthRequest\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.resetHandlers();\nexpectedUrl = undefined;",
                  "err": {},
                  "uuid": "791b367c-20aa-4314-83ff-6a73e1c52fd1",
                  "parentUUID": "00fe7dc3-63a0-4e04-a3b6-fbba1b87c611",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should make an apiRequest request",
                  "fullTitle": "Disability benefits helpers:  makeAuthRequest should make an apiRequest request",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.use(_msw.rest.get('https://dev-api.va.gov/v0/education_benefits_claims/stem_claim_status', function (req, res, ctx) {\n  return res(ctx.status(200), ctx.json({}));\n}));\nvar onSuccess = function onSuccess() {\n  return done();\n};\n(0, _helpers.makeAuthRequest)('/v0/education_benefits_claims/stem_claim_status', null, _sinon.default.spy(), onSuccess);\n(0, _chai.expect)(expectedUrl).to.contain('/v0/education_benefits_claims/stem_claim_status');",
                  "err": {},
                  "uuid": "f70e4a4f-cc1f-495a-9dd1-d2a6da6d3257",
                  "parentUUID": "00fe7dc3-63a0-4e04-a3b6-fbba1b87c611",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject promise when there is an error",
                  "fullTitle": "Disability benefits helpers:  makeAuthRequest should reject promise when there is an error",
                  "timedOut": false,
                  "duration": 3027,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.use(_msw.rest.get('https://dev-api.va.gov/v0/education_benefits_claims/stem_claim_status', function (req, res) {\n  return res.networkError('Claims Status Failed');\n}));\nvar onError = function onError(resp) {\n  (0, _chai.expect)(resp instanceof Error).to.be.true;\n  done();\n};\nvar dispatch = _sinon.default.spy();\nvar onSuccess = _sinon.default.spy();\n(0, _helpers.makeAuthRequest)('/v0/education_benefits_claims/stem_claim_status', null, dispatch, onSuccess, onError);\n(0, _chai.expect)(onSuccess.called).to.be.false;\n(0, _chai.expect)(dispatch.called).to.be.false;",
                  "err": {},
                  "uuid": "5a33dd72-e252-44b3-9738-f1d73488df39",
                  "parentUUID": "00fe7dc3-63a0-4e04-a3b6-fbba1b87c611",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should dispatch auth error",
                  "fullTitle": "Disability benefits helpers:  makeAuthRequest should dispatch auth error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server.use(_msw.rest.get('https://dev-api.va.gov/v0/education_benefits_claims/stem_claim_status', function (req, res, ctx) {\n  return res(ctx.status(401), ctx.json({\n    status: 401\n  }));\n}));\nvar onError = _sinon.default.spy();\nvar onSuccess = _sinon.default.spy();\nvar dispatch = function dispatch(action) {\n  (0, _chai.expect)(action.type).to.equal('SET_UNAUTHORIZED');\n  (0, _chai.expect)(onError.called).to.be.false;\n  (0, _chai.expect)(onSuccess.called).to.be.false;\n  done();\n};\n(0, _helpers.makeAuthRequest)('/v0/education_benefits_claims/stem_claim_status', null, dispatch, onSuccess, onError);",
                  "err": {},
                  "uuid": "c55e4d4b-e6f0-4b3b-a057-5ad663ed34ab",
                  "parentUUID": "00fe7dc3-63a0-4e04-a3b6-fbba1b87c611",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f70e4a4f-cc1f-495a-9dd1-d2a6da6d3257",
                "5a33dd72-e252-44b3-9738-f1d73488df39",
                "c55e4d4b-e6f0-4b3b-a057-5ad663ed34ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3039,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "17c3341b-1ad8-4a73-bffd-908b82f06045",
              "title": "getStatusContents",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns an object with correct title & description",
                  "fullTitle": "Disability benefits helpers:  getStatusContents returns an object with correct title & description",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var expectedTitle = 'The Board made a decision on your appeal';\nvar expectedDescSnippet = 'Reasonableness of attorney fees';\nvar contents = (0, _appealsV2Helpers.getStatusContents)(_helpers.mockData.data[6]);\n(0, _chai.expect)(contents.title).to.equal(expectedTitle);\nvar descText = (0, _enzyme.shallow)(contents.description);\nvar decision = descText.find('Decision');\n(0, _chai.expect)(decision.dive().text()).to.contain(expectedDescSnippet);\ndescText.unmount();",
                  "err": {},
                  "uuid": "6e6b98fb-88e8-4d52-a1de-65d4487244fa",
                  "parentUUID": "17c3341b-1ad8-4a73-bffd-908b82f06045",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns sane object when given unknown type",
                  "fullTitle": "Disability benefits helpers:  getStatusContents returns sane object when given unknown type",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var contents = (0, _appealsV2Helpers.getStatusContents)({\n  attributes: {\n    status: {\n      type: 'fake_type'\n    }\n  }\n});\n(0, _chai.expect)(contents.title).to.equal('We don’t know your status');\n(0, _chai.expect)(contents.description.props.children).to.eql('We’re sorry, VA.gov will soon be updated to show your status.');",
                  "err": {},
                  "uuid": "c95d9eef-1a49-40de-b6c9-d56f60b71c61",
                  "parentUUID": "17c3341b-1ad8-4a73-bffd-908b82f06045",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "a814d991-c65c-4d50-b0b1-fd97cf8b2a75",
                  "title": "appeal decision DDL link",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"appeal decision DDL link\"",
                      "fullTitle": "Disability benefits helpers:  getStatusContents appeal decision DDL link \"before each\" hook in \"appeal decision DDL link\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "appeal = _helpers.mockData.data.find(function (a) {\n  return a.id === 'A106';\n});",
                      "err": {},
                      "uuid": "db45ac0d-1f1c-4679-a047-95387a68a7ab",
                      "parentUUID": "a814d991-c65c-4d50-b0b1-fd97cf8b2a75",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a link to DDL for a BVA-decided appeal",
                      "fullTitle": "Disability benefits helpers:  getStatusContents appeal decision DDL link returns a link to DDL for a BVA-decided appeal",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var contents = (0, _appealsV2Helpers.getStatusContents)(appeal);\nvar descText = (0, _enzyme.shallow)(contents.description);\nvar linkToDDL = descText.find('Toggler').find('Enabled').find('Link');\n(0, _chai.expect)(linkToDDL.length).to.equal(1);\n(0, _chai.expect)(linkToDDL.props().to).to.equal('/your-claim-letters');\ndescText.unmount();",
                      "err": {},
                      "uuid": "3ef553f3-6217-4c02-b7ca-11995a218283",
                      "parentUUID": "a814d991-c65c-4d50-b0b1-fd97cf8b2a75",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns a link to DDL for a BVA-post-decided appeal",
                      "fullTitle": "Disability benefits helpers:  getStatusContents appeal decision DDL link returns a link to DDL for a BVA-post-decided appeal",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var postDecisionAppeal = _objectSpread(_objectSpread({}, appeal), {}, {\n  attributes: _objectSpread(_objectSpread({}, appeal.attributes), {}, {\n    status: _objectSpread(_objectSpread({}, appeal.attributes.status), {}, {\n      type: 'post_bva_dta_decision'\n    })\n  })\n});\nvar contents = (0, _appealsV2Helpers.getStatusContents)(postDecisionAppeal);\nvar descText = (0, _enzyme.shallow)(contents.description);\nvar linkToDDL = descText.find('Toggler').find('Enabled').find('Link');\n(0, _chai.expect)(linkToDDL.length).to.equal(1);\n(0, _chai.expect)(linkToDDL.props().to).to.equal('/your-claim-letters');\ndescText.unmount();",
                      "err": {},
                      "uuid": "78508047-e93f-44fe-8398-1be35c3cacca",
                      "parentUUID": "a814d991-c65c-4d50-b0b1-fd97cf8b2a75",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3ef553f3-6217-4c02-b7ca-11995a218283",
                    "78508047-e93f-44fe-8398-1be35c3cacca"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [
                "6e6b98fb-88e8-4d52-a1de-65d4487244fa",
                "c95d9eef-1a49-40de-b6c9-d56f60b71c61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8834c59d-c1b2-4e22-aeae-eacb5fa821a8",
              "title": "getNextEvents",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns an object with a header property",
                  "fullTitle": "Disability benefits helpers:  getNextEvents returns an object with a header property",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var type = _appealsV2Helpers.STATUS_TYPES.pendingCertificationSsoc;\nvar details = {\n  certificationTimeliness: [1, 2],\n  ssocTimeliness: [1, 1]\n};\nvar nextEvents = (0, _appealsV2Helpers.getNextEvents)({\n  attributes: {\n    status: {\n      type: type,\n      details: details\n    }\n  }\n});\n(0, _chai.expect)(nextEvents.header).to.equal('What happens next depends on whether you submit new evidence.');",
                  "err": {},
                  "uuid": "aec4873d-4392-4b44-ba09-5a589b33c866",
                  "parentUUID": "8834c59d-c1b2-4e22-aeae-eacb5fa821a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns an object with an events array property",
                  "fullTitle": "Disability benefits helpers:  getNextEvents returns an object with an events array property",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var type = _appealsV2Helpers.STATUS_TYPES.remandSsoc;\n// 'remandSsoc' status has 2 nextEvents in the array\nvar details = {\n  returnTimeliness: [1, 2],\n  remandSsocTimeliness: [1, 1]\n};\nvar nextEvents = (0, _appealsV2Helpers.getNextEvents)({\n  attributes: {\n    status: {\n      type: type,\n      details: details\n    }\n  }\n});\nvar events = nextEvents.events;\n(0, _chai.expect)(events.length).to.equal(2);\nvar firstEvent = events[0];\nvar secondEvent = events[1];\n// each of the 2 'remandSsoc' nextEvents has 2 properties\n(0, _chai.expect)(Object.keys(firstEvent).length).to.equal(2);\n(0, _chai.expect)(Object.keys(secondEvent).length).to.equal(2);",
                  "err": {},
                  "uuid": "a5147988-334b-49c0-8b6e-bbc1b7bfb8d5",
                  "parentUUID": "8834c59d-c1b2-4e22-aeae-eacb5fa821a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aec4873d-4392-4b44-ba09-5a589b33c866",
                "a5147988-334b-49c0-8b6e-bbc1b7bfb8d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8c533f3d-870f-425a-9dad-5a2952d5f548",
              "title": "getAlertContent",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns an object with title, desc, displayType, and type",
                  "fullTitle": "Disability benefits helpers:  getAlertContent returns an object with title, desc, displayType, and type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var alert = {\n  type: 'ramp_eligible',\n  details: {\n    representative: 'Mr. Spock'\n  }\n};\nvar alertContent = (0, _appealsV2Helpers.getAlertContent)(alert);\n(0, _chai.expect)(alertContent.title).to.exist;\n(0, _chai.expect)(alertContent.description).to.exist;\n(0, _chai.expect)(alertContent.displayType).to.exist;\n(0, _chai.expect)(alertContent.type).to.exist;",
                  "err": {},
                  "uuid": "bea630ed-6cd4-4e56-9526-d0e406ca920a",
                  "parentUUID": "8c533f3d-870f-425a-9dad-5a2952d5f548",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bea630ed-6cd4-4e56-9526-d0e406ca920a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f2cd2f2d-c216-4034-bff4-a5d95f8efb74",
              "title": "addStatusToIssues",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns an array of same length as input array",
                  "fullTitle": "Disability benefits helpers:  addStatusToIssues returns an array of same length as input array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var issues = _helpers.mockData.data[2].attributes.issues;\nvar formattedIssues = (0, _appealsV2Helpers.addStatusToIssues)(issues);\n(0, _chai.expect)(formattedIssues.length).to.equal(issues.length);",
                  "err": {},
                  "uuid": "c28e3c0a-ae74-4927-bea6-c5de9f9acf50",
                  "parentUUID": "f2cd2f2d-c216-4034-bff4-a5d95f8efb74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns an array of objects, each with status and description",
                  "fullTitle": "Disability benefits helpers:  addStatusToIssues returns an array of objects, each with status and description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var issues = _helpers.mockData.data[2].attributes.issues;\nvar formattedIssues = (0, _appealsV2Helpers.addStatusToIssues)(issues);\n(0, _chai.expect)(formattedIssues.every(function (i) {\n  return i.status && i.description;\n})).to.be.true;",
                  "err": {},
                  "uuid": "0c411654-c7d2-48a4-bd2a-7fe84054e61d",
                  "parentUUID": "f2cd2f2d-c216-4034-bff4-a5d95f8efb74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c28e3c0a-ae74-4927-bea6-c5de9f9acf50",
                "0c411654-c7d2-48a4-bd2a-7fe84054e61d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9b878d23-0e81-4fcf-bd2b-dee8a88ca5af",
              "title": "makeDecisionReviewContent",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns the default content if no additional content is provided",
                  "fullTitle": "Disability benefits helpers:  makeDecisionReviewContent returns the default content if no additional content is provided",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var decisionReviewContent = (0, _appealsV2Helpers.makeDecisionReviewContent)();\nvar descText = (0, _enzyme.shallow)(decisionReviewContent);\n(0, _chai.expect)(descText.render().text()).to.equal('A Veterans Law Judge will review all of the available evidence and write a decision. For each issue you’re appealing, they can decide to:Grant: The judge disagrees with the original decision and decides in your favor.Deny: The judge agrees with the original decision.Remand: The judge sends the issue back to the Veterans Benefits Administration to gather more evidence or to fix a mistake before deciding whether to grant or deny.Note: About 60% of all cases have at least 1 issue remanded.');\ndescText.unmount();",
                  "err": {},
                  "uuid": "e7455f1c-6361-405c-8077-f16cb2ddf155",
                  "parentUUID": "9b878d23-0e81-4fcf-bd2b-dee8a88ca5af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns additional content when provided",
                  "fullTitle": "Disability benefits helpers:  makeDecisionReviewContent returns additional content when provided",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var decisionReviewContent = (0, _appealsV2Helpers.makeDecisionReviewContent)({\n  prop: 'Once your representative has completed their review, your case will be ready to go to a Veterans Law Judge.'\n});\nvar descText = (0, _enzyme.shallow)(decisionReviewContent);\n(0, _chai.expect)(descText.render().text()).to.equal('Once your representative has completed their review, your case will be ready to go to a Veterans Law Judge. The judge will review all of the available evidence and write a decision. For each issue you’re appealing, they can decide to:Grant: The judge disagrees with the original decision and decides in your favor.Deny: The judge agrees with the original decision.Remand: The judge sends the issue back to the Veterans Benefits Administration to gather more evidence or to fix a mistake before deciding whether to grant or deny.Note: About 60% of all cases have at least 1 issue remanded.');\ndescText.unmount();",
                  "err": {},
                  "uuid": "d4676820-9c26-469f-98e2-11b9806adf04",
                  "parentUUID": "9b878d23-0e81-4fcf-bd2b-dee8a88ca5af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uses the name of the aoj",
                  "fullTitle": "Disability benefits helpers:  makeDecisionReviewContent uses the name of the aoj",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var decisionReviewContent = (0, _appealsV2Helpers.makeDecisionReviewContent)({\n  aoj: _appealsV2Helpers.AOJS.nca\n});\nvar descText = (0, _enzyme.shallow)(decisionReviewContent);\n(0, _chai.expect)(descText.render().text()).to.contain('National Cemetery Administration');\ndescText.unmount();",
                  "err": {},
                  "uuid": "aa70e3d4-5554-4a0d-bccd-2980cfd3e647",
                  "parentUUID": "9b878d23-0e81-4fcf-bd2b-dee8a88ca5af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "adjusts language for ama appeals",
                  "fullTitle": "Disability benefits helpers:  makeDecisionReviewContent adjusts language for ama appeals",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var decisionReviewContent = (0, _appealsV2Helpers.makeDecisionReviewContent)({\n  isAma: true\n});\nvar descText = (0, _enzyme.shallow)(decisionReviewContent);\n(0, _chai.expect)(descText.render().text()).to.not.contain('60% of all cases have at least 1 issue remanded.');\ndescText.unmount();",
                  "err": {},
                  "uuid": "a4d8a244-cf5f-436e-b400-731dfce35742",
                  "parentUUID": "9b878d23-0e81-4fcf-bd2b-dee8a88ca5af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7455f1c-6361-405c-8077-f16cb2ddf155",
                "d4676820-9c26-469f-98e2-11b9806adf04",
                "aa70e3d4-5554-4a0d-bccd-2980cfd3e647",
                "a4d8a244-cf5f-436e-b400-731dfce35742"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e637743e-bcc7-4c4a-a57e-9ed8fc4df17c",
              "title": "isolateAppeal",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should find the right appeal if the given id matches",
                  "fullTitle": "Disability benefits helpers:  isolateAppeal should find the right appeal if the given id matches",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var expectedAppeal = _helpers.mockData.data[1];\nvar appeal = (0, _appealsV2Helpers.isolateAppeal)(state, expectedAppeal.id);\n(0, _chai.expect)(appeal).to.equal(expectedAppeal);",
                  "err": {},
                  "uuid": "2e2aa768-ffb4-4e71-b64d-1fdefeb38854",
                  "parentUUID": "e637743e-bcc7-4c4a-a57e-9ed8fc4df17c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should find the right appeal if the given v1 id matches a v2 appeal",
                  "fullTitle": "Disability benefits helpers:  isolateAppeal should find the right appeal if the given v1 id matches a v2 appeal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var expectedAppeal = _helpers.mockData.data[1];\n// appealIds[1] is the fake v1 id\nvar appeal = (0, _appealsV2Helpers.isolateAppeal)(state, expectedAppeal.attributes.appealIds[1]);\n(0, _chai.expect)(appeal).to.equal(expectedAppeal);",
                  "err": {},
                  "uuid": "0e0dc45b-98af-4b08-bbff-990bafa6b7b4",
                  "parentUUID": "e637743e-bcc7-4c4a-a57e-9ed8fc4df17c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined if no appeal matches the id given",
                  "fullTitle": "Disability benefits helpers:  isolateAppeal should return undefined if no appeal matches the id given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var appeal = (0, _appealsV2Helpers.isolateAppeal)(state, 'non-existent id');\n(0, _chai.expect)(appeal).to.be.undefined;",
                  "err": {},
                  "uuid": "22105c29-b7f2-4e25-955b-09637e069aa2",
                  "parentUUID": "e637743e-bcc7-4c4a-a57e-9ed8fc4df17c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e2aa768-ffb4-4e71-b64d-1fdefeb38854",
                "0e0dc45b-98af-4b08-bbff-990bafa6b7b4",
                "22105c29-b7f2-4e25-955b-09637e069aa2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e75c45dc-f940-46ee-91b1-0a24f6cd81cc",
              "title": "roundToNearest",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a number rounded to the nearest interval",
                  "fullTitle": "Disability benefits helpers:  roundToNearest returns a number rounded to the nearest interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)((0, _helpers.roundToNearest)({\n  interval: 5000,\n  value: 2000\n})).to.equal(0);\n(0, _chai.expect)((0, _helpers.roundToNearest)({\n  interval: 5000,\n  value: 23123\n})).to.equal(25000);\n(0, _chai.expect)((0, _helpers.roundToNearest)({\n  interval: 1000,\n  value: 11450\n})).to.equal(11000);",
                  "err": {},
                  "uuid": "bfb221ec-b273-479a-8bd2-13f0e7c4cb2a",
                  "parentUUID": "e75c45dc-f940-46ee-91b1-0a24f6cd81cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfb221ec-b273-479a-8bd2-13f0e7c4cb2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6fccf85e-a18b-4d19-8aa0-adebdecdd78a",
              "title": "getPageRangeText",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns the correct item range based on the page",
                  "fullTitle": "Disability benefits helpers:  getPageRangeText returns the correct item range based on the page",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)((0, _appealsV2Helpers.getPageRange)(1, 5)).to.deep.equal({\n  start: 1,\n  end: 5\n});\n(0, _chai.expect)((0, _appealsV2Helpers.getPageRange)(1, 12)).to.deep.equal({\n  start: 1,\n  end: 10\n});\n(0, _chai.expect)((0, _appealsV2Helpers.getPageRange)(1, 25)).to.deep.equal({\n  start: 1,\n  end: 10\n});\n(0, _chai.expect)((0, _appealsV2Helpers.getPageRange)(2, 12)).to.deep.equal({\n  start: 11,\n  end: 12\n});\n(0, _chai.expect)((0, _appealsV2Helpers.getPageRange)(2, 22)).to.deep.equal({\n  start: 11,\n  end: 20\n});\n(0, _chai.expect)((0, _appealsV2Helpers.getPageRange)(2, 25)).to.deep.equal({\n  start: 11,\n  end: 20\n});\n(0, _chai.expect)((0, _appealsV2Helpers.getPageRange)(3, 25)).to.deep.equal({\n  start: 21,\n  end: 25\n});",
                  "err": {},
                  "uuid": "36968f25-298b-4dd5-a7bf-4749501233cc",
                  "parentUUID": "6fccf85e-a18b-4d19-8aa0-adebdecdd78a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36968f25-298b-4dd5-a7bf-4749501233cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "789b1056-cd6c-4319-a218-0ce15acf77e2",
              "title": "claimAvaliable",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return false when claim is empty",
                  "fullTitle": "Disability benefits helpers:  claimAvaliable should return false when claim is empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var isClaimAvaliable = (0, _helpers.claimAvailable)({});\n(0, _chai.expect)(isClaimAvaliable).to.be.false;",
                  "err": {},
                  "uuid": "409a900e-1229-4e81-9bdc-310bb77932f9",
                  "parentUUID": "789b1056-cd6c-4319-a218-0ce15acf77e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false when claim is null",
                  "fullTitle": "Disability benefits helpers:  claimAvaliable should return false when claim is null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var isClaimAvaliable = (0, _helpers.claimAvailable)(null);\n(0, _chai.expect)(isClaimAvaliable).to.be.false;",
                  "err": {},
                  "uuid": "85162d34-7301-496f-8304-b08598bf05eb",
                  "parentUUID": "789b1056-cd6c-4319-a218-0ce15acf77e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false when claim attributes are empty",
                  "fullTitle": "Disability benefits helpers:  claimAvaliable should return false when claim attributes are empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {}\n};\nvar isClaimAvaliable = (0, _helpers.claimAvailable)(claim);\n(0, _chai.expect)(isClaimAvaliable).to.be.false;",
                  "err": {},
                  "uuid": "af2c29b9-4bc9-4057-bb4c-6ea844f98bd8",
                  "parentUUID": "789b1056-cd6c-4319-a218-0ce15acf77e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false when claim attributes are null",
                  "fullTitle": "Disability benefits helpers:  claimAvaliable should return false when claim attributes are null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: null\n};\nvar isClaimAvaliable = (0, _helpers.claimAvailable)(claim);\n(0, _chai.expect)(isClaimAvaliable).to.be.false;",
                  "err": {},
                  "uuid": "192cc06b-f612-4d5a-9bf1-27cd8ff2e522",
                  "parentUUID": "789b1056-cd6c-4319-a218-0ce15acf77e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true when claim attributes exist",
                  "fullTitle": "Disability benefits helpers:  claimAvaliable should return true when claim attributes exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var claim = {\n  id: 1,\n  attributes: {\n    claimType: 'Compensation',\n    claimDate: '2024-04-05'\n  }\n};\nvar isClaimAvaliable = (0, _helpers.claimAvailable)(claim);\n(0, _chai.expect)(isClaimAvaliable).to.be.true;",
                  "err": {},
                  "uuid": "fd8583ce-f767-4626-b152-9b9f10807ca6",
                  "parentUUID": "789b1056-cd6c-4319-a218-0ce15acf77e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "409a900e-1229-4e81-9bdc-310bb77932f9",
                "85162d34-7301-496f-8304-b08598bf05eb",
                "af2c29b9-4bc9-4057-bb4c-6ea844f98bd8",
                "192cc06b-f612-4d5a-9bf1-27cd8ff2e522",
                "fd8583ce-f767-4626-b152-9b9f10807ca6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6d0bff46-f268-4a4e-a0d0-39874847745f",
              "title": "getClaimPhaseTypeHeaderText",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display claim phase type header text from map",
                  "fullTitle": "Disability benefits helpers:  getClaimPhaseTypeHeaderText should display claim phase type header text from map",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var desc = (0, _helpers.getClaimPhaseTypeHeaderText)('CLAIM_RECEIVED');\n(0, _chai.expect)(desc).to.equal('Step 1 of 8: Claim received');",
                  "err": {},
                  "uuid": "2ff69955-fd71-486b-bb1d-823b2875a6a9",
                  "parentUUID": "6d0bff46-f268-4a4e-a0d0-39874847745f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ff69955-fd71-486b-bb1d-823b2875a6a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "133203fb-2553-4f45-8b5d-d1426fd2ac1f",
              "title": "getPhaseItemText",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "084bbc43-c773-4e5c-ad35-218bc59d5634",
                  "title": "when showEightPhases false - 5 steps",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should display phase item text from map when step 1",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases false - 5 steps should display phase item text from map when step 1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(1);\n(0, _chai.expect)(desc).to.equal('Step 1: Claim received');",
                      "err": {},
                      "uuid": "2442299d-76d0-416e-bc00-c1efd46587e2",
                      "parentUUID": "084bbc43-c773-4e5c-ad35-218bc59d5634",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 2",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases false - 5 steps should display phase item text from map when step 2",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(2);\n(0, _chai.expect)(desc).to.equal('Step 2: Initial review');",
                      "err": {},
                      "uuid": "65fc5655-e8b8-40d7-a1ee-80eec71065f1",
                      "parentUUID": "084bbc43-c773-4e5c-ad35-218bc59d5634",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 3",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases false - 5 steps should display phase item text from map when step 3",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(3);\n(0, _chai.expect)(desc).to.equal('Step 3: Evidence gathering, review, and decision');",
                      "err": {},
                      "uuid": "b7c16a11-fbd4-4199-bd69-7d6591e9ab56",
                      "parentUUID": "084bbc43-c773-4e5c-ad35-218bc59d5634",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 4",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases false - 5 steps should display phase item text from map when step 4",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(4);\n(0, _chai.expect)(desc).to.equal('Step 3: Evidence gathering, review, and decision');",
                      "err": {},
                      "uuid": "75db2a92-1f95-43e1-8f0f-47efea7a3906",
                      "parentUUID": "084bbc43-c773-4e5c-ad35-218bc59d5634",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 5",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases false - 5 steps should display phase item text from map when step 5",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(5);\n(0, _chai.expect)(desc).to.equal('Step 3: Evidence gathering, review, and decision');",
                      "err": {},
                      "uuid": "606c9c73-6b84-47fe-aed8-cc6a58be0b4a",
                      "parentUUID": "084bbc43-c773-4e5c-ad35-218bc59d5634",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 6",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases false - 5 steps should display phase item text from map when step 6",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(6);\n(0, _chai.expect)(desc).to.equal('Step 3: Evidence gathering, review, and decision');",
                      "err": {},
                      "uuid": "0fc59e29-540b-49cb-91e2-90e63fee797e",
                      "parentUUID": "084bbc43-c773-4e5c-ad35-218bc59d5634",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 7",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases false - 5 steps should display phase item text from map when step 7",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(7);\n(0, _chai.expect)(desc).to.equal('Step 4: Preparation for notification');",
                      "err": {},
                      "uuid": "4b51196b-1b13-4235-ba98-5c7ee65cee17",
                      "parentUUID": "084bbc43-c773-4e5c-ad35-218bc59d5634",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 8",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases false - 5 steps should display phase item text from map when step 8",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(8);\n(0, _chai.expect)(desc).to.equal('Step 5: Closed');",
                      "err": {},
                      "uuid": "f5acdd56-8073-4394-a6d4-7e8bd669cec3",
                      "parentUUID": "084bbc43-c773-4e5c-ad35-218bc59d5634",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2442299d-76d0-416e-bc00-c1efd46587e2",
                    "65fc5655-e8b8-40d7-a1ee-80eec71065f1",
                    "b7c16a11-fbd4-4199-bd69-7d6591e9ab56",
                    "75db2a92-1f95-43e1-8f0f-47efea7a3906",
                    "606c9c73-6b84-47fe-aed8-cc6a58be0b4a",
                    "0fc59e29-540b-49cb-91e2-90e63fee797e",
                    "4b51196b-1b13-4235-ba98-5c7ee65cee17",
                    "f5acdd56-8073-4394-a6d4-7e8bd669cec3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "d11270d0-4744-4446-97b9-9d53c019c4cb",
                  "title": "when showEightPhases true - 8 steps",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should display phase item text from map when step 1",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases true - 8 steps should display phase item text from map when step 1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(1, true);\n(0, _chai.expect)(desc).to.equal('We received your claim in our system');",
                      "err": {},
                      "uuid": "9423124d-bdf7-4cd7-91a0-70f52701b4b4",
                      "parentUUID": "d11270d0-4744-4446-97b9-9d53c019c4cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 2",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases true - 8 steps should display phase item text from map when step 2",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(2, true);\n(0, _chai.expect)(desc).to.equal('Step 2: Initial review');",
                      "err": {},
                      "uuid": "f38dd4d7-156a-44ef-a058-8bb658c41b3b",
                      "parentUUID": "d11270d0-4744-4446-97b9-9d53c019c4cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 3",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases true - 8 steps should display phase item text from map when step 3",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(3, true);\n(0, _chai.expect)(desc).to.equal('Step 3: Evidence gathering');",
                      "err": {},
                      "uuid": "9720b2ee-227d-47d7-9526-8be624783a43",
                      "parentUUID": "d11270d0-4744-4446-97b9-9d53c019c4cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 4",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases true - 8 steps should display phase item text from map when step 4",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(4, true);\n(0, _chai.expect)(desc).to.equal('Step 4: Evidence review');",
                      "err": {},
                      "uuid": "7ff8180b-bb69-41e5-972d-63198b49d583",
                      "parentUUID": "d11270d0-4744-4446-97b9-9d53c019c4cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 5",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases true - 8 steps should display phase item text from map when step 5",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(5, true);\n(0, _chai.expect)(desc).to.equal('Step 5: Rating');",
                      "err": {},
                      "uuid": "715ff687-50f8-4adb-b561-86fe82e33012",
                      "parentUUID": "d11270d0-4744-4446-97b9-9d53c019c4cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 6",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases true - 8 steps should display phase item text from map when step 6",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(6, true);\n(0, _chai.expect)(desc).to.equal('Step 6: Preparing decision letter');",
                      "err": {},
                      "uuid": "a51ce5d8-e364-4f8d-bc6d-ce6c331b4a6a",
                      "parentUUID": "d11270d0-4744-4446-97b9-9d53c019c4cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 7",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases true - 8 steps should display phase item text from map when step 7",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(7, true);\n(0, _chai.expect)(desc).to.equal('Step 7: Final review');",
                      "err": {},
                      "uuid": "112ee4d1-aeb4-4b0a-b60c-f466db243420",
                      "parentUUID": "d11270d0-4744-4446-97b9-9d53c019c4cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should display phase item text from map when step 8",
                      "fullTitle": "Disability benefits helpers:  getPhaseItemText when showEightPhases true - 8 steps should display phase item text from map when step 8",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var desc = (0, _helpers.getPhaseItemText)(8, true);\n(0, _chai.expect)(desc).to.equal('Your claim was decided');",
                      "err": {},
                      "uuid": "49d999a3-e25b-41bb-b3aa-45f1a800a4a3",
                      "parentUUID": "d11270d0-4744-4446-97b9-9d53c019c4cb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9423124d-bdf7-4cd7-91a0-70f52701b4b4",
                    "f38dd4d7-156a-44ef-a058-8bb658c41b3b",
                    "9720b2ee-227d-47d7-9526-8be624783a43",
                    "7ff8180b-bb69-41e5-972d-63198b49d583",
                    "715ff687-50f8-4adb-b561-86fe82e33012",
                    "a51ce5d8-e364-4f8d-bc6d-ce6c331b4a6a",
                    "112ee4d1-aeb4-4b0a-b60c-f466db243420",
                    "49d999a3-e25b-41bb-b3aa-45f1a800a4a3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6f303c0a-5dbf-44cb-ba1a-3a61b8401e23",
              "title": "getClaimPhaseTypeDescription",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display claim phase type description from map",
                  "fullTitle": "Disability benefits helpers:  getClaimPhaseTypeDescription should display claim phase type description from map",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var desc = (0, _helpers.getClaimPhaseTypeDescription)('CLAIM_RECEIVED');\n(0, _chai.expect)(desc).to.equal('We received your claim in our system.');",
                  "err": {},
                  "uuid": "b426a843-d606-477f-b247-687a31ef848a",
                  "parentUUID": "6f303c0a-5dbf-44cb-ba1a-3a61b8401e23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b426a843-d606-477f-b247-687a31ef848a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "dfd201b7-6edc-44a2-baea-10ca67bc22ca",
              "title": "setDocumentRequestPageTitle",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display 5103 Evidence Notice",
                  "fullTitle": "Disability benefits helpers:  setDocumentRequestPageTitle should display 5103 Evidence Notice",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var displayName = 'Automated 5103 Notice Response';\nvar documentRequestPageTitle = (0, _helpers.setDocumentRequestPageTitle)(displayName);\n(0, _chai.expect)(documentRequestPageTitle).to.equal('Review evidence list (5103 notice)');",
                  "err": {},
                  "uuid": "5a6faff4-3687-49f5-872d-b52985c2603f",
                  "parentUUID": "dfd201b7-6edc-44a2-baea-10ca67bc22ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should display Submit buddy statement(s)",
                  "fullTitle": "Disability benefits helpers:  setDocumentRequestPageTitle should display Submit buddy statement(s)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var displayName = 'Submit buddy statement(s)';\nvar documentRequestPageTitle = (0, _helpers.setDocumentRequestPageTitle)(displayName);\n(0, _chai.expect)(documentRequestPageTitle).to.equal(displayName);",
                  "err": {},
                  "uuid": "203dd3d8-3ee0-42f9-b4ae-3478d21cfb9b",
                  "parentUUID": "dfd201b7-6edc-44a2-baea-10ca67bc22ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a6faff4-3687-49f5-872d-b52985c2603f",
                "203dd3d8-3ee0-42f9-b4ae-3478d21cfb9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "51fb5d7d-9c1a-4428-9fbb-99e6812aaee2",
              "title": "setTabDocumentTitle",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "1a9ba4af-9926-4c22-b03b-8b749e1ff9b7",
                  "title": "when there is no claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should set tab title for Status",
                      "fullTitle": "Disability benefits helpers:  setTabDocumentTitle when there is no claim should set tab title for Status",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _helpers.setTabDocumentTitle)(null, 'Status');\n(0, _chai.expect)(document.title).to.equal('Status of Your Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "03aa553b-2265-4527-ac38-e2c0e4860322",
                      "parentUUID": "1a9ba4af-9926-4c22-b03b-8b749e1ff9b7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should set tab title for Files",
                      "fullTitle": "Disability benefits helpers:  setTabDocumentTitle when there is no claim should set tab title for Files",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _helpers.setTabDocumentTitle)(null, 'Files');\n(0, _chai.expect)(document.title).to.equal('Files for Your Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "702c2218-f713-4c9b-9920-20330cec701f",
                      "parentUUID": "1a9ba4af-9926-4c22-b03b-8b749e1ff9b7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should set tab title for Overview",
                      "fullTitle": "Disability benefits helpers:  setTabDocumentTitle when there is no claim should set tab title for Overview",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _helpers.setTabDocumentTitle)(null, 'Overview');\n(0, _chai.expect)(document.title).to.equal('Overview of Your Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "8bc1a036-ca99-40e8-910e-188efb64d26c",
                      "parentUUID": "1a9ba4af-9926-4c22-b03b-8b749e1ff9b7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "03aa553b-2265-4527-ac38-e2c0e4860322",
                    "702c2218-f713-4c9b-9920-20330cec701f",
                    "8bc1a036-ca99-40e8-910e-188efb64d26c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "2800410c-3ee0-47bb-ae8a-c46d52f44097",
                  "title": "when there is a claim",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should set tab title for Status",
                      "fullTitle": "Disability benefits helpers:  setTabDocumentTitle when there is a claim should set tab title for Status",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _helpers.setTabDocumentTitle)(claim, 'Status');\n(0, _chai.expect)(document.title).to.equal('Status of January 1, 2023 Disability Compensation Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "84abc9a9-49d1-4f7f-9f02-056ef4750f6c",
                      "parentUUID": "2800410c-3ee0-47bb-ae8a-c46d52f44097",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should set tab title for Files",
                      "fullTitle": "Disability benefits helpers:  setTabDocumentTitle when there is a claim should set tab title for Files",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _helpers.setTabDocumentTitle)(claim, 'Files');\n(0, _chai.expect)(document.title).to.equal('Files for January 1, 2023 Disability Compensation Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "c60423f7-00da-42b4-9721-6078a146e5b5",
                      "parentUUID": "2800410c-3ee0-47bb-ae8a-c46d52f44097",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should set tab title for Overview",
                      "fullTitle": "Disability benefits helpers:  setTabDocumentTitle when there is a claim should set tab title for Overview",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _helpers.setTabDocumentTitle)(claim, 'Overview');\n(0, _chai.expect)(document.title).to.equal('Overview of January 1, 2023 Disability Compensation Claim | Veterans Affairs');",
                      "err": {},
                      "uuid": "9a16d79b-6616-4765-b07c-d20db56768ef",
                      "parentUUID": "2800410c-3ee0-47bb-ae8a-c46d52f44097",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "84abc9a9-49d1-4f7f-9f02-056ef4750f6c",
                    "c60423f7-00da-42b4-9721-6078a146e5b5",
                    "9a16d79b-6616-4765-b07c-d20db56768ef"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f727a549-a0f1-4c53-8baf-61ed09b87348",
              "title": "setPageFocus",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "4f43dc2c-d695-437b-8b17-310aed2fb245",
                  "title": "when last page was not a tab and loading is false",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should run setUpPage",
                      "fullTitle": "Disability benefits helpers:  setPageFocus when last page was not a tab and loading is false should run setUpPage",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var setUpPage = _sinon.default.spy(page, 'setUpPage');\n(0, _helpers.setPageFocus)('/test', false);\n(0, _chai.expect)(setUpPage.called).to.be.true;",
                      "err": {},
                      "uuid": "5b449988-2e34-4c9b-bb35-a8ca935c210a",
                      "parentUUID": "4f43dc2c-d695-437b-8b17-310aed2fb245",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5b449988-2e34-4c9b-bb35-a8ca935c210a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "2eed1517-1800-4be4-b5cc-006bb69e8c17",
                  "title": "when last page was not a tab and loading is true",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should run scrollToTop",
                      "fullTitle": "Disability benefits helpers:  setPageFocus when last page was not a tab and loading is true should run scrollToTop",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var scrollToTop = _sinon.default.spy(scroll, 'scrollToTop');\n(0, _helpers.setPageFocus)('/test', true);\n(0, _chai.expect)(scrollToTop.called).to.be.true;",
                      "err": {},
                      "uuid": "229b1d6c-cc22-4655-98d7-53de2b93898e",
                      "parentUUID": "2eed1517-1800-4be4-b5cc-006bb69e8c17",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "229b1d6c-cc22-4655-98d7-53de2b93898e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "a56d84e5-fc26-4176-a69b-0a91077b49d7",
                  "title": "when last page was a tab",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should run scrollAndFocus",
                      "fullTitle": "Disability benefits helpers:  setPageFocus when last page was a tab should run scrollAndFocus",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var scrollAndFocus = _sinon.default.spy(scroll, 'scrollAndFocus');\n(0, _helpers.setPageFocus)('/status', false);\n(0, _chai.expect)(scrollAndFocus.called).to.be.true;",
                      "err": {},
                      "uuid": "a6b25bdd-00a0-4510-b553-f9708d72bd8b",
                      "parentUUID": "a56d84e5-fc26-4176-a69b-0a91077b49d7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a6b25bdd-00a0-4510-b553-f9708d72bd8b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ffc3d9d4-2962-4f41-b535-f4e4a93b49e0",
              "title": "getTrackedItemDateFromStatus",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a7bada76-2f74-45fc-bfb9-ed788dbd7ce7",
                  "title": "when item status is NEEDED_FROM_YOU",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return item requestedDate",
                      "fullTitle": "Disability benefits helpers:  getTrackedItemDateFromStatus when item status is NEEDED_FROM_YOU should return item requestedDate",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var item = {\n  id: 1,\n  requestedDate: '2023-02-22',\n  status: 'NEEDED_FROM_YOU',\n  displayName: 'Test'\n};\nvar date = (0, _helpers.getTrackedItemDateFromStatus)(item);\n(0, _chai.expect)(date).to.equal(item.requestedDate);",
                      "err": {},
                      "uuid": "12639568-8241-472b-8e73-da33e3875722",
                      "parentUUID": "a7bada76-2f74-45fc-bfb9-ed788dbd7ce7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "12639568-8241-472b-8e73-da33e3875722"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "8e50656a-6d63-4287-a4f6-976b00ec3b79",
                  "title": "when item status is NEEDED_FROM_OTHERS",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return item requestedDate",
                      "fullTitle": "Disability benefits helpers:  getTrackedItemDateFromStatus when item status is NEEDED_FROM_OTHERS should return item requestedDate",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var item = {\n  id: 1,\n  requestedDate: '2023-02-22',\n  status: 'NEEDED_FROM_OTHERS',\n  displayName: 'Test'\n};\nvar date = (0, _helpers.getTrackedItemDateFromStatus)(item);\n(0, _chai.expect)(date).to.equal(item.requestedDate);",
                      "err": {},
                      "uuid": "3c2222dc-4a51-404d-aa3f-5a3bea1c8c9e",
                      "parentUUID": "8e50656a-6d63-4287-a4f6-976b00ec3b79",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3c2222dc-4a51-404d-aa3f-5a3bea1c8c9e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "1f0b7c5b-c8d2-4f5d-89d7-3690c0e744d5",
                  "title": "when item status is NO_LONGER_REQUIRED",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return item requestedDate",
                      "fullTitle": "Disability benefits helpers:  getTrackedItemDateFromStatus when item status is NO_LONGER_REQUIRED should return item requestedDate",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var item = {\n  id: 1,\n  closedDate: '2023-02-22',\n  status: 'NO_LONGER_REQUIRED',\n  displayName: 'Test'\n};\nvar date = (0, _helpers.getTrackedItemDateFromStatus)(item);\n(0, _chai.expect)(date).to.equal(item.closedDate);",
                      "err": {},
                      "uuid": "704ff528-6886-4220-85e3-f947e75d4fa8",
                      "parentUUID": "1f0b7c5b-c8d2-4f5d-89d7-3690c0e744d5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "704ff528-6886-4220-85e3-f947e75d4fa8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "846664fd-89b9-4581-a57b-ca3eb9080231",
                  "title": "when item status is SUBMITTED_AWAITING_REVIEW",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the oldest item.documents.uploadDate requestedDate",
                      "fullTitle": "Disability benefits helpers:  getTrackedItemDateFromStatus when item status is SUBMITTED_AWAITING_REVIEW should return the oldest item.documents.uploadDate requestedDate",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var item = {\n  id: 1,\n  date: '2023-02-22',\n  status: 'SUBMITTED_AWAITING_REVIEW',\n  displayName: 'Test',\n  documents: [{\n    documentId: '{1}',\n    documentTypeLabel: 'Correspondence',\n    originalFileName: 'file.pdf',\n    trackedItemId: 1,\n    uploadDate: '2023-02-23'\n  }, {\n    documentId: '{2}',\n    documentTypeLabel: 'Correspondence',\n    originalFileName: 'file2.pdf',\n    trackedItemId: 1,\n    uploadDate: '2023-02-20'\n  }]\n};\nvar date = (0, _helpers.getTrackedItemDateFromStatus)(item);\n(0, _chai.expect)(date).to.equal(item.documents[1].uploadDate);",
                      "err": {},
                      "uuid": "ed24d2b1-5904-48c3-b209-5c70dd4238ba",
                      "parentUUID": "846664fd-89b9-4581-a57b-ca3eb9080231",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ed24d2b1-5904-48c3-b209-5c70dd4238ba"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "9cdc2ee6-686c-456c-aa03-203777d84515",
                  "title": "when item status is INITIAL_REVIEW_COMPLETE",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return item receivedDate",
                      "fullTitle": "Disability benefits helpers:  getTrackedItemDateFromStatus when item status is INITIAL_REVIEW_COMPLETE should return item receivedDate",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var item = {\n  id: 1,\n  receivedDate: '2023-02-22',\n  status: 'INITIAL_REVIEW_COMPLETE',\n  displayName: 'Test'\n};\nvar date = (0, _helpers.getTrackedItemDateFromStatus)(item);\n(0, _chai.expect)(date).to.equal(item.receivedDate);",
                      "err": {},
                      "uuid": "6f04bd2b-40b7-4a64-8766-1038802c5dc5",
                      "parentUUID": "9cdc2ee6-686c-456c-aa03-203777d84515",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6f04bd2b-40b7-4a64-8766-1038802c5dc5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "f1879b5f-edd3-454c-8a04-157675927257",
                  "title": "when item status is ACCEPTED",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return item receivedDate",
                      "fullTitle": "Disability benefits helpers:  getTrackedItemDateFromStatus when item status is ACCEPTED should return item receivedDate",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var item = {\n  id: 1,\n  receivedDate: '2023-02-22',\n  status: 'ACCEPTED',\n  displayName: 'Test'\n};\nvar date = (0, _helpers.getTrackedItemDateFromStatus)(item);\n(0, _chai.expect)(date).to.equal(item.receivedDate);",
                      "err": {},
                      "uuid": "c232aefb-7b9a-437c-82c3-5eceada999d3",
                      "parentUUID": "f1879b5f-edd3-454c-8a04-157675927257",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c232aefb-7b9a-437c-82c3-5eceada999d3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "acb82d38-0843-4b4a-8330-69f4e68028e3",
                  "title": "when item status is not recognized",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the default item requestedDate",
                      "fullTitle": "Disability benefits helpers:  getTrackedItemDateFromStatus when item status is not recognized should return the default item requestedDate",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var item = {\n  id: 1,\n  requestedDate: '2023-02-22',\n  status: 'TEST',\n  displayName: 'Test'\n};\nvar date = (0, _helpers.getTrackedItemDateFromStatus)(item);\n(0, _chai.expect)(date).to.equal(item.requestedDate);",
                      "err": {},
                      "uuid": "29f494b8-af0f-419a-8515-138f7f800a83",
                      "parentUUID": "acb82d38-0843-4b4a-8330-69f4e68028e3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "29f494b8-af0f-419a-8515-138f7f800a83"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e951a60b-412c-4ea5-82df-6ffdfe741c3d",
              "title": "isStandard5103Notice",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "427eb6fe-3aaa-40d2-935a-66b53a857eb3",
                  "title": "when display name is not a standard 5103 notice",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return false",
                      "fullTitle": "Disability benefits helpers:  isStandard5103Notice when display name is not a standard 5103 notice should return false",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var displayName = 'Test';\n(0, _chai.expect)((0, _helpers.isStandard5103Notice)(displayName)).to.be.false;",
                      "err": {},
                      "uuid": "1ba6ff48-c4ac-4c43-86e3-1a4ad27e43ff",
                      "parentUUID": "427eb6fe-3aaa-40d2-935a-66b53a857eb3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1ba6ff48-c4ac-4c43-86e3-1a4ad27e43ff"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "d6cb8a34-e8b5-4cca-986c-24edf173ed20",
                  "title": "when display name is a standard 5103 notice from the API",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return true",
                      "fullTitle": "Disability benefits helpers:  isStandard5103Notice when display name is a standard 5103 notice from the API should return true",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var displayName = '5103 Notice Response';\n(0, _chai.expect)((0, _helpers.isStandard5103Notice)(displayName)).to.be.true;",
                      "err": {},
                      "uuid": "17a5411a-312a-44b7-b46b-05f0dfbf8f48",
                      "parentUUID": "d6cb8a34-e8b5-4cca-986c-24edf173ed20",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "17a5411a-312a-44b7-b46b-05f0dfbf8f48"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "bef8acde-11ab-4a09-8dad-f72464e8bfe1",
                  "title": "when display name is a standard 5103 notice mocked by the application",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return true",
                      "fullTitle": "Disability benefits helpers:  isStandard5103Notice when display name is a standard 5103 notice mocked by the application should return true",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var displayName = 'Review evidence list (5103 notice)';\n(0, _chai.expect)((0, _helpers.isStandard5103Notice)(displayName)).to.be.true;",
                      "err": {},
                      "uuid": "0208ffa5-dd60-4060-ba87-3ba75cbc408f",
                      "parentUUID": "bef8acde-11ab-4a09-8dad-f72464e8bfe1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0208ffa5-dd60-4060-ba87-3ba75cbc408f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ef21886f-19d0-41c4-9bcf-c7d03a03726b",
              "title": "isAutomated5103Notice",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "2111dc08-4c17-48c9-a1ac-39d57e51f56c",
                  "title": "when display name is not an automated 5103 notice",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return false",
                      "fullTitle": "Disability benefits helpers:  isAutomated5103Notice when display name is not an automated 5103 notice should return false",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var displayName = 'Test';\n(0, _chai.expect)((0, _helpers.isAutomated5103Notice)(displayName)).to.be.false;",
                      "err": {},
                      "uuid": "3526603f-47a2-439b-ab72-39585f26c147",
                      "parentUUID": "2111dc08-4c17-48c9-a1ac-39d57e51f56c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3526603f-47a2-439b-ab72-39585f26c147"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "ab79ac68-0fad-4dbd-a917-c291256d20d0",
                  "title": "when display name is an automated 5103 notice",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return true",
                      "fullTitle": "Disability benefits helpers:  isAutomated5103Notice when display name is an automated 5103 notice should return true",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var displayName = 'Automated 5103 Notice Response';\n(0, _chai.expect)((0, _helpers.isAutomated5103Notice)(displayName)).to.be.true;",
                      "err": {},
                      "uuid": "c7cf1557-f56d-4b22-9844-de96c8992da3",
                      "parentUUID": "ab79ac68-0fad-4dbd-a917-c291256d20d0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c7cf1557-f56d-4b22-9844-de96c8992da3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ef74950d-4750-4c18-b0cc-9b3b7f7553bd",
              "title": "sentenceCase",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "capitalizes the first letter in a string and does not modify the rest of the string",
                  "fullTitle": "Disability benefits helpers:  sentenceCase capitalizes the first letter in a string and does not modify the rest of the string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)((0, _helpers.sentenceCase)('a')).to.equal('A');\n(0, _chai.expect)((0, _helpers.sentenceCase)('A')).to.equal('A');\n(0, _chai.expect)((0, _helpers.sentenceCase)('1')).to.equal('1');\n(0, _chai.expect)((0, _helpers.sentenceCase)('hello world')).to.equal('Hello world');\n(0, _chai.expect)((0, _helpers.sentenceCase)('h3770 W0R7D')).to.equal('H3770 W0R7D');",
                  "err": {},
                  "uuid": "f465bf1a-4c21-4093-99b3-5d9a53117a58",
                  "parentUUID": "ef74950d-4750-4c18-b0cc-9b3b7f7553bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns an empty string for bad inputs",
                  "fullTitle": "Disability benefits helpers:  sentenceCase returns an empty string for bad inputs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)((0, _helpers.sentenceCase)()).to.equal('');\n(0, _chai.expect)((0, _helpers.sentenceCase)('')).to.equal('');\n(0, _chai.expect)((0, _helpers.sentenceCase)(['array', 'of', 'strings'])).to.equal('');\n(0, _chai.expect)((0, _helpers.sentenceCase)({\n  key: 'value'\n})).to.equal('');",
                  "err": {},
                  "uuid": "c21ea609-df4d-4492-91de-9b5e3d7ac4ac",
                  "parentUUID": "ef74950d-4750-4c18-b0cc-9b3b7f7553bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f465bf1a-4c21-4093-99b3-5d9a53117a58",
                "c21ea609-df4d-4492-91de-9b5e3d7ac4ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ef4a76c9-f018-46a9-acd7-e3c439e86d3c",
              "title": "generateClaimTitle",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "907d3f58-21df-4a18-98ae-d55250025b7f",
                  "title": "when generating a card title",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should generate a default title",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a card title should generate a default title",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)()).to.equal('Claim for disability compensation');",
                      "err": {},
                      "uuid": "13d3802c-77f9-4329-892d-73293750027b",
                      "parentUUID": "907d3f58-21df-4a18-98ae-d55250025b7f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should generate a title based on the claim type",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a card title should generate a title based on the claim type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)(compensationClaim)).to.equal('Claim for compensation');",
                      "err": {},
                      "uuid": "7f495373-592a-4a1e-b2b6-fa4820221513",
                      "parentUUID": "907d3f58-21df-4a18-98ae-d55250025b7f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should generate a different title for requests to add or remove a dependent",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a card title should generate a different title for requests to add or remove a dependent",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)(addOrRemoveDependentClaim)).to.equal('Request to add or remove a dependent');",
                      "err": {},
                      "uuid": "b3222fb7-04f6-400d-94b7-f3fca0b22270",
                      "parentUUID": "907d3f58-21df-4a18-98ae-d55250025b7f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "13d3802c-77f9-4329-892d-73293750027b",
                    "7f495373-592a-4a1e-b2b6-fa4820221513",
                    "b3222fb7-04f6-400d-94b7-f3fca0b22270"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "b4dbe0e9-61fd-4331-a0dd-e1b7b7189647",
                  "title": "when generating a detail page heading",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should generate a default title",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a detail page heading should generate a default title",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)({}, 'detail')).to.equal('Your disability compensation claim');",
                      "err": {},
                      "uuid": "25011405-7258-4db9-a44b-5f8bdd18587f",
                      "parentUUID": "b4dbe0e9-61fd-4331-a0dd-e1b7b7189647",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should generate a title based on the claim type",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a detail page heading should generate a title based on the claim type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)(compensationClaim, 'detail')).to.equal('Your compensation claim');",
                      "err": {},
                      "uuid": "7521a9de-7ac7-4a15-a43a-418303a4af4a",
                      "parentUUID": "b4dbe0e9-61fd-4331-a0dd-e1b7b7189647",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should generate a different title for requests to add or remove a dependent",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a detail page heading should generate a different title for requests to add or remove a dependent",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)(addOrRemoveDependentClaim, 'detail')).to.equal('Your request to add or remove a dependent');",
                      "err": {},
                      "uuid": "48201304-3045-404c-be3a-cb27b2ca106e",
                      "parentUUID": "b4dbe0e9-61fd-4331-a0dd-e1b7b7189647",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "25011405-7258-4db9-a44b-5f8bdd18587f",
                    "7521a9de-7ac7-4a15-a43a-418303a4af4a",
                    "48201304-3045-404c-be3a-cb27b2ca106e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "c2e82b23-c325-46af-8796-1af1742513d9",
                  "title": "when generating a breadcrumb title",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should generate a default title if the claim is unavailable",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a breadcrumb title should generate a default title if the claim is unavailable",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)({}, 'breadcrumb', 'Status')).to.equal('Status of your claim');",
                      "err": {},
                      "uuid": "c18ecca1-0f1c-4fdc-b90b-08060dc216d6",
                      "parentUUID": "c2e82b23-c325-46af-8796-1af1742513d9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should generate a title based on the tab name and claim type",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a breadcrumb title should generate a title based on the tab name and claim type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)(compensationClaim, 'breadcrumb', 'Files')).to.equal('Files for your compensation claim');\n(0, _chai.expect)((0, _helpers.generateClaimTitle)(compensationClaim, 'breadcrumb', 'Status')).to.equal('Status of your compensation claim');",
                      "err": {},
                      "uuid": "c352ee12-7239-4ff6-85dc-a2df1befafee",
                      "parentUUID": "c2e82b23-c325-46af-8796-1af1742513d9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should generate a different title for requests to add or remove a dependent",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a breadcrumb title should generate a different title for requests to add or remove a dependent",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)(addOrRemoveDependentClaim, 'breadcrumb', 'Files')).to.equal('Files for your request to add or remove a dependent');\n(0, _chai.expect)((0, _helpers.generateClaimTitle)(addOrRemoveDependentClaim, 'breadcrumb', 'Status')).to.equal('Status of your request to add or remove a dependent');",
                      "err": {},
                      "uuid": "bc8556d0-5e07-4804-b232-985901d0960f",
                      "parentUUID": "c2e82b23-c325-46af-8796-1af1742513d9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c18ecca1-0f1c-4fdc-b90b-08060dc216d6",
                    "c352ee12-7239-4ff6-85dc-a2df1befafee",
                    "bc8556d0-5e07-4804-b232-985901d0960f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "1297e89c-8427-409c-a968-f73465ba0d02",
                  "title": "when generating a document title for the browser tab",
                  "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "file": "/src/applications/claims-status/tests/utils/helpers.unit.spec.jsx",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should generate a default title if the claim is unavailable",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a document title for the browser tab should generate a default title if the claim is unavailable",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)({}, 'document', 'Files')).to.equal('Files for Your Claim');",
                      "err": {},
                      "uuid": "41551cf8-a197-4af8-a351-598bd2165a58",
                      "parentUUID": "1297e89c-8427-409c-a968-f73465ba0d02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should generate a title based on the tab name and claim type",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a document title for the browser tab should generate a title based on the tab name and claim type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)({\n  attributes: {\n    claimDate: claimDate\n  }\n}, 'document', 'Files')).to.equal('Files for August 21, 2024 Disability Compensation Claim');",
                      "err": {},
                      "uuid": "98bba404-dbb5-475e-a341-a451a040bb69",
                      "parentUUID": "1297e89c-8427-409c-a968-f73465ba0d02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should generate a different title for requests to add or remove a dependent",
                      "fullTitle": "Disability benefits helpers:  generateClaimTitle when generating a document title for the browser tab should generate a different title for requests to add or remove a dependent",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)((0, _helpers.generateClaimTitle)(addOrRemoveDependentClaim, 'document', 'Files')).to.equal('Files for August 21, 2024 Request to Add or Remove a Dependent');",
                      "err": {},
                      "uuid": "27abd850-4f69-4273-80b6-8c24ab4f87b5",
                      "parentUUID": "1297e89c-8427-409c-a968-f73465ba0d02",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "41551cf8-a197-4af8-a351-598bd2165a58",
                    "98bba404-dbb5-475e-a341-a451a040bb69",
                    "27abd850-4f69-4273-80b6-8c24ab4f87b5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "76f4a41d-c667-4a4a-b40e-b395e65abcb6",
          "title": "Page utils:",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/page.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/utils/page.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "65f958c0-e3dc-45a3-a00d-a04104195761",
              "title": "isTab",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/page.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/page.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should detect tab urls",
                  "fullTitle": "Page utils: isTab should detect tab urls",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)((0, _page.isTab)('testing/details')).to.be.true;\n(0, _chai.expect)((0, _page.isTab)('testing/files')).to.be.true;\n(0, _chai.expect)((0, _page.isTab)('testing/status')).to.be.true;\n(0, _chai.expect)((0, _page.isTab)('testing/turn-in-evidence')).to.be.false;",
                  "err": {},
                  "uuid": "dd5d2a32-b530-4a64-a0eb-4e6ff6889c4f",
                  "parentUUID": "65f958c0-e3dc-45a3-a00d-a04104195761",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd5d2a32-b530-4a64-a0eb-4e6ff6889c4f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "560ee25c-0eb9-4b9a-82e2-075e07bc5651",
              "title": "setFocus",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/page.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/page.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should focus on element",
                  "fullTitle": "Page utils: setFocus should focus on element",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var mainDiv = document.createElement('div');\nmainDiv.setAttribute('id', 'main');\ndocument.body.appendChild(mainDiv);\n(0, _page.setFocus)('#main');\n(0, _chai.expect)(document.activeElement.id).to.equal('main');\n(0, _chai.expect)(mainDiv.tabIndex).to.equal(-1);\ndocument.body.removeChild(mainDiv);",
                  "err": {},
                  "uuid": "4c87c341-b8fa-4a56-8e9b-388e321e1da3",
                  "parentUUID": "560ee25c-0eb9-4b9a-82e2-075e07bc5651",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c87c341-b8fa-4a56-8e9b-388e321e1da3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6a592621-ad30-4f3f-a576-a1cfbf327bf8",
              "title": "setPageFocus",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/page.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/page.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should focus on selector",
                  "fullTitle": "Page utils: setPageFocus should focus on selector",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var div = document.createElement('div');\ndiv.classList.add('testing');\ndocument.body.appendChild(div);\n(0, _page.setPageFocus)('.testing');\n(0, _chai.expect)(document.activeElement.classList.contains('testing')).to.be.true;\n(0, _chai.expect)(div.tabIndex).to.equal(-1);\ndocument.body.removeChild(div);",
                  "err": {},
                  "uuid": "6ad75f15-1e72-4797-ac5c-671ca873dd1b",
                  "parentUUID": "6a592621-ad30-4f3f-a576-a1cfbf327bf8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ad75f15-1e72-4797-ac5c-671ca873dd1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9d2196e3-3c93-4020-b070-7b4a5d59b43b",
          "title": "initializeRealUserMonitoring",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"initializeRealUserMonitoring\"",
              "fullTitle": "initializeRealUserMonitoring \"before each\" hook in \"initializeRealUserMonitoring\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "envStub = _sinon.default.stub(constants, 'isProductionEnv');\ninitSpy = _sinon.default.spy(_browserRum.datadogRum, 'init');\nstartSessionReplayRecordingStub = _sinon.default.stub(_browserRum.datadogRum, 'startSessionReplayRecording');",
              "err": {},
              "uuid": "baed1e28-0885-4fb9-a4c5-fc71ac6e0147",
              "parentUUID": "9d2196e3-3c93-4020-b070-7b4a5d59b43b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"initializeRealUserMonitoring\"",
              "fullTitle": "initializeRealUserMonitoring \"after each\" hook in \"initializeRealUserMonitoring\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "envStub.restore();\ninitSpy.restore();\nstartSessionReplayRecordingStub.restore();",
              "err": {},
              "uuid": "1f23bc03-2760-4f0b-ba01-9fa6557df1e0",
              "parentUUID": "9d2196e3-3c93-4020-b070-7b4a5d59b43b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a11dc6ab-9c56-4e37-9e82-667da8d66c41",
              "title": "when isProductionEnv is true",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should call init and startSessionReplayRecording ",
                  "fullTitle": "initializeRealUserMonitoring when isProductionEnv is true should call init and startSessionReplayRecording ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "envStub.returns(true);\ninitializeRealUserMonitoring.initializeRealUserMonitoring();\n(0, _chai.expect)(initSpy.called).to.be.true;\n(0, _chai.expect)(initSpy.calledOnce).to.be.true;\n(0, _chai.expect)(startSessionReplayRecordingStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "e7c8ade4-26d7-42d9-ac5d-c00c799a70bf",
                  "parentUUID": "a11dc6ab-9c56-4e37-9e82-667da8d66c41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7c8ade4-26d7-42d9-ac5d-c00c799a70bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "09e9ac23-906b-4c91-b318-4870cd33b442",
              "title": "when isProductionEnv is false",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not call init and startSessionReplayRecording ",
                  "fullTitle": "initializeRealUserMonitoring when isProductionEnv is false should not call init and startSessionReplayRecording ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "envStub.returns(false);\ninitializeRealUserMonitoring.initializeRealUserMonitoring();\n(0, _chai.expect)(initSpy.notCalled).to.be.true;\n(0, _chai.expect)(startSessionReplayRecordingStub.notCalled).to.be.true;",
                  "err": {},
                  "uuid": "b390636d-9ff2-4da5-8135-ab1e888062e0",
                  "parentUUID": "09e9ac23-906b-4c91-b318-4870cd33b442",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b390636d-9ff2-4da5-8135-ab1e888062e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e2c99b7f-088c-4944-a105-0134f6bded95",
          "title": "useBrowserMonitoring",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"useBrowserMonitoring\"",
              "fullTitle": "useBrowserMonitoring \"before each\" hook in \"useBrowserMonitoring\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "stub = _sinon.default.stub(initializeRealUserMonitoring, 'initializeRealUserMonitoring');\nwindow.DD_RUM = {\n  getInitConfiguration: function getInitConfiguration() {}\n};\nwindow.DD_LOGS = {\n  getInitConfiguration: function getInitConfiguration() {}\n};",
              "err": {},
              "uuid": "0dee2c31-4485-4a9c-b24e-c606e80964ba",
              "parentUUID": "e2c99b7f-088c-4944-a105-0134f6bded95",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"useBrowserMonitoring\"",
              "fullTitle": "useBrowserMonitoring \"after each\" hook in \"useBrowserMonitoring\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "stub.restore();",
              "err": {},
              "uuid": "64c0d3d7-71c1-4f37-901c-da317117c8d4",
              "parentUUID": "e2c99b7f-088c-4944-a105-0134f6bded95",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "13f2832f-4cd7-4d9f-8de0-6cd5f3c92a03",
              "title": "when loggedIn false",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should return",
                  "fullTitle": "useBrowserMonitoring when loggedIn false it should return",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(TestComponent, null)));\n(0, _chai.expect)(stub.notCalled).to.be.true;\n(0, _chai.expect)(window.DD_RUM).to.exist;\n(0, _chai.expect)(window.DD_LOGS).to.exist;",
                  "err": {},
                  "uuid": "d3c67a2f-377b-4894-a861-ed5d7d2d84a4",
                  "parentUUID": "13f2832f-4cd7-4d9f-8de0-6cd5f3c92a03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3c67a2f-377b-4894-a861-ed5d7d2d84a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d4f7df9c-0876-430d-845c-8ce46180ff27",
              "title": "when isLoadingFeatureFlags false",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should return",
                  "fullTitle": "useBrowserMonitoring when isLoadingFeatureFlags false it should return",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(TestComponent, null)));\n(0, _chai.expect)(stub.notCalled).to.be.true;\n(0, _chai.expect)(window.DD_RUM).to.exist;\n(0, _chai.expect)(window.DD_LOGS).to.exist;",
                  "err": {},
                  "uuid": "f004c4b9-5be9-40cc-ae72-7b2cedebcded",
                  "parentUUID": "d4f7df9c-0876-430d-845c-8ce46180ff27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f004c4b9-5be9-40cc-ae72-7b2cedebcded"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "94d71658-a790-47bb-a8e0-44ba25052523",
              "title": "when user is logged in and ff are not loading and the toggle is enabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should call initializeRealUserMonitoring",
                  "fullTitle": "useBrowserMonitoring when user is logged in and ff are not loading and the toggle is enabled it should call initializeRealUserMonitoring",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore()\n}, /*#__PURE__*/_react.default.createElement(TestComponent, {\n  loggedIn: true\n})));\n(0, _chai.expect)(stub.called).to.be.true;\n(0, _chai.expect)(window.DD_RUM).to.exist;\n(0, _chai.expect)(window.DD_LOGS).to.exist;",
                  "err": {},
                  "uuid": "5cfe9741-326d-4d56-ac94-70188eb456d1",
                  "parentUUID": "94d71658-a790-47bb-a8e0-44ba25052523",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5cfe9741-326d-4d56-ac94-70188eb456d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f2701769-07bc-45eb-ae03-6279cc74f7ef",
              "title": "when user is logged in and ff are not loading and the toggle is disabled",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/useDatadogRum.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should delete window.DD_RUM and window.DD_LOGS",
                  "fullTitle": "useBrowserMonitoring when user is logged in and ff are not loading and the toggle is disabled it should delete window.DD_RUM and window.DD_LOGS",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _react2.render)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: getStore(false)\n}, /*#__PURE__*/_react.default.createElement(TestComponent, {\n  loggedIn: true\n})));\n(0, _chai.expect)(stub.notCalled).to.be.true;\n(0, _chai.expect)(window.DD_RUM).to.not.exist;\n(0, _chai.expect)(window.DD_LOGS).to.not.exist;",
                  "err": {},
                  "uuid": "8405d1e2-efca-4293-9d00-9d1cef2ff876",
                  "parentUUID": "f2701769-07bc-45eb-ae03-6279cc74f7ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8405d1e2-efca-4293-9d00-9d1cef2ff876"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b7f0cd57-6363-4cc5-98f1-fa70f0101071",
          "title": "Claims status validation:",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/validations.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/utils/validations.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eba96dac-76cf-4dde-9c05-4ee08df90015",
              "title": "isValidFileSize",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/validations.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/validations.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate size is less than max",
                  "fullTitle": "Claims status validation: isValidFileSize should validate size is less than max",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _validations.isValidFileSize)({\n  size: 10\n});\n(0, _chai.expect)(result).to.be.true;",
                  "err": {},
                  "uuid": "026e39b0-f4a0-4b89-9b82-a7caeb8bb0e6",
                  "parentUUID": "eba96dac-76cf-4dde-9c05-4ee08df90015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should invalidate size is greater than max",
                  "fullTitle": "Claims status validation: isValidFileSize should invalidate size is greater than max",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _validations.isValidFileSize)({\n  size: _validations.MAX_PDF_SIZE_BYTES + 100\n});\n(0, _chai.expect)(result).to.be.false;",
                  "err": {},
                  "uuid": "7a6e4175-8213-485f-a60d-5e04a42926ac",
                  "parentUUID": "eba96dac-76cf-4dde-9c05-4ee08df90015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate PDF size is less than max",
                  "fullTitle": "Claims status validation: isValidFileSize should validate PDF size is less than max",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _validations.isValidFileSize)({\n  name: 'test.pdf',\n  size: validPdfSize\n});\n(0, _chai.expect)(result).to.be.true;",
                  "err": {},
                  "uuid": "be49d0b6-0ee0-4ffe-af73-aec75dc1755f",
                  "parentUUID": "eba96dac-76cf-4dde-9c05-4ee08df90015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should invalidate PDF size is greater than max",
                  "fullTitle": "Claims status validation: isValidFileSize should invalidate PDF size is greater than max",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var invalidSize = _validations.MAX_PDF_SIZE_BYTES;\nvar result = (0, _validations.isValidFileSize)({\n  name: 'test.pdf',\n  size: invalidSize\n});\n(0, _chai.expect)(result).to.be.false;",
                  "err": {},
                  "uuid": "30e54032-7f06-4ac5-9f02-24b9599124b4",
                  "parentUUID": "eba96dac-76cf-4dde-9c05-4ee08df90015",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "026e39b0-f4a0-4b89-9b82-a7caeb8bb0e6",
                "7a6e4175-8213-485f-a60d-5e04a42926ac",
                "be49d0b6-0ee0-4ffe-af73-aec75dc1755f",
                "30e54032-7f06-4ac5-9f02-24b9599124b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e5b76afc-479d-4dd5-9240-36a638e7d096",
              "title": "isValidFileType",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/validations.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/validations.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should check that file has a valid type",
                  "fullTitle": "Claims status validation: isValidFileType should check that file has a valid type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _validations.isValidFileType)({\n  name: 'testing.jpg'\n});\n(0, _chai.expect)(result).to.be.true;",
                  "err": {},
                  "uuid": "280aa55f-181d-439b-a0eb-ccf0e6be1ffb",
                  "parentUUID": "e5b76afc-479d-4dd5-9240-36a638e7d096",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should check that file has an invalid type",
                  "fullTitle": "Claims status validation: isValidFileType should check that file has an invalid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _validations.isValidFileType)({\n  name: 'testing.exe'\n});\n(0, _chai.expect)(result).to.be.false;",
                  "err": {},
                  "uuid": "d80bc6f2-ae6a-4014-8841-5a497dc9330b",
                  "parentUUID": "e5b76afc-479d-4dd5-9240-36a638e7d096",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should check that file has a valid type regardless of case",
                  "fullTitle": "Claims status validation: isValidFileType should check that file has a valid type regardless of case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _validations.isValidFileType)({\n  name: 'testing.JPG'\n});\n(0, _chai.expect)(result).to.be.true;",
                  "err": {},
                  "uuid": "f38084e6-4dc8-4a95-965b-44a4388c2517",
                  "parentUUID": "e5b76afc-479d-4dd5-9240-36a638e7d096",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "280aa55f-181d-439b-a0eb-ccf0e6be1ffb",
                "d80bc6f2-ae6a-4014-8841-5a497dc9330b",
                "f38084e6-4dc8-4a95-965b-44a4388c2517"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b9f7a6c5-db8e-4ff1-882a-f2f7076b5f47",
              "title": "isValidFile",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/validations.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/validations.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate file for size and type",
                  "fullTitle": "Claims status validation: isValidFile should validate file for size and type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _validations.isValidFile)({\n  name: 'testing.jpg',\n  size: 10\n});\n(0, _chai.expect)(result).to.be.true;",
                  "err": {},
                  "uuid": "cf1fb092-a617-44d6-bd26-431b967873c5",
                  "parentUUID": "b9f7a6c5-db8e-4ff1-882a-f2f7076b5f47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate empty file",
                  "fullTitle": "Claims status validation: isValidFile should not validate empty file",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _validations.isValidFile)();\n(0, _chai.expect)(result).to.be.false;",
                  "err": {},
                  "uuid": "ebe8418d-9a10-4307-8437-d072366bcf22",
                  "parentUUID": "b9f7a6c5-db8e-4ff1-882a-f2f7076b5f47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate file for size and type",
                  "fullTitle": "Claims status validation: isValidFile should validate file for size and type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _validations.isValidFile)({\n  name: 'testing.pdf',\n  size: validPdfSize\n});\n(0, _chai.expect)(result).to.be.true;",
                  "err": {},
                  "uuid": "4fd6ceb9-459b-4996-9798-2b747770ed57",
                  "parentUUID": "b9f7a6c5-db8e-4ff1-882a-f2f7076b5f47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf1fb092-a617-44d6-bd26-431b967873c5",
                "ebe8418d-9a10-4307-8437-d072366bcf22",
                "4fd6ceb9-459b-4996-9798-2b747770ed57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5473a07c-a5db-47d8-a593-9008640d5320",
              "title": "isValidDocument",
              "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/validations.unit.spec.jsx",
              "file": "/src/applications/claims-status/tests/utils/validations.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate that docType is not blank",
                  "fullTitle": "Claims status validation: isValidDocument should validate that docType is not blank",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _validations.isValidDocument)({\n  file: {\n    name: 'test.jpg',\n    size: 10\n  },\n  docType: {\n    value: ''\n  }\n});\n(0, _chai.expect)(result).to.be.false;",
                  "err": {},
                  "uuid": "0deb2475-0600-441c-a933-0239ddf0c835",
                  "parentUUID": "5473a07c-a5db-47d8-a593-9008640d5320",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate that docType and file are valid",
                  "fullTitle": "Claims status validation: isValidDocument should validate that docType and file are valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var result = (0, _validations.isValidDocument)({\n  file: {\n    name: 'test.jpg',\n    size: 10\n  },\n  docType: {\n    value: 'L101'\n  }\n});\n(0, _chai.expect)(result).to.be.true;",
                  "err": {},
                  "uuid": "baeeef88-d13c-459e-b43e-79c90b13529f",
                  "parentUUID": "5473a07c-a5db-47d8-a593-9008640d5320",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0deb2475-0600-441c-a933-0239ddf0c835",
                "baeeef88-d13c-459e-b43e-79c90b13529f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f85a4a3a-9802-43bc-b105-454598aa600e",
          "title": "withRouter",
          "fullFile": "/Users/hemesh/Projects/VA/vets-website/src/applications/claims-status/tests/utils/withRouter.unit.spec.jsx",
          "file": "/src/applications/claims-status/tests/utils/withRouter.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render withRouter",
              "fullTitle": "withRouter should render withRouter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _renderWithRouter = (0, _utils.renderWithRouter)(/*#__PURE__*/_react.default.createElement(TestComponentWithRouter, null)),\n  getByTestId = _renderWithRouter.getByTestId;\n(0, _chai.expect)(getByTestId('test')).to.exist;\n// expect(result).to.exist;",
              "err": {},
              "uuid": "4a716fd3-8520-4bb9-ad28-f1a52eadb322",
              "parentUUID": "f85a4a3a-9802-43bc-b105-454598aa600e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a716fd3-8520-4bb9-ad28-f1a52eadb322"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "undefined_2025-03-19T173158478Z",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "min",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "consoleReporter": "min",
        "reportDir": "mocha/results",
        "reportFilename": "undefined_2025-03-19T173158478Z",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}