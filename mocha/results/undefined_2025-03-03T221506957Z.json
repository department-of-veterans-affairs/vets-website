{
  "stats": {
    "suites": 17,
    "tests": 66,
    "passes": 66,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-03T22:15:07.061Z",
    "end": "2025-03-03T22:15:07.731Z",
    "duration": 670,
    "testsRegistered": 66,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "78a1d2f5-dcc3-4e33-8b1e-99d9529b428b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook: beforeEach in \"{root}\"",
          "fullTitle": "\"before each\" hook: beforeEach in \"{root}\"",
          "timedOut": false,
          "duration": 4,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cov_5fzq6lsur().f[20]++;\ncov_5fzq6lsur().s[70]++;\nsetupJSDom();\ncov_5fzq6lsur().s[71]++;\nresetFetch();\ncov_5fzq6lsur().s[72]++;\ncleanupStorage();\ncov_5fzq6lsur().s[73]++;\nif (isStressTest == 'false') {\n  cov_5fzq6lsur().b[12][0]++;\n  cov_5fzq6lsur().s[74]++;\n  checkAllowList(this);\n} else {\n  cov_5fzq6lsur().b[12][1]++;\n}\ncov_5fzq6lsur().s[75]++;\nif ((cov_5fzq6lsur().b[14][0]++, process.env.CI) || (cov_5fzq6lsur().b[14][1]++, ['trace', 'debug'].includes(process.env.LOG_LEVEL))) {\n  cov_5fzq6lsur().b[13][0]++;\n  cov_5fzq6lsur().s[76]++;\n  console.log('running: ', this.currentTest.file.slice(this.currentTest.file.indexOf('src')));\n} else {\n  cov_5fzq6lsur().b[13][1]++;\n}",
          "err": {},
          "uuid": "07ade5ac-46b5-4eb1-8b0b-9dc43e97cefe",
          "parentUUID": "78a1d2f5-dcc3-4e33-8b1e-99d9529b428b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook: afterEach in \"{root}\"",
          "fullTitle": "\"after each\" hook: afterEach in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cov_5fzq6lsur().f[21]++;\ncov_5fzq6lsur().s[77]++;\ncleanupStorage();\ncov_5fzq6lsur().s[78]++;\nflushPromises();",
          "err": {},
          "uuid": "9998265d-4cff-4b8e-a4d8-2af3eeb64cb5",
          "parentUUID": "78a1d2f5-dcc3-4e33-8b1e-99d9529b428b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "(0, _pure.cleanup)();",
          "err": {},
          "uuid": "63456269-3ead-4b22-83f9-680551046b70",
          "parentUUID": "78a1d2f5-dcc3-4e33-8b1e-99d9529b428b",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "a4cf3fe0-439d-4273-abb1-98df011711dc",
          "title": "getEnrollmentData",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/actions/post-911-gib-status.unit.spec.js",
          "file": "/src/applications/post-911-gib-status/tests/actions/post-911-gib-status.unit.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: setup in \"getEnrollmentData\"",
              "fullTitle": "getEnrollmentData \"before each\" hook: setup in \"getEnrollmentData\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "oldWindow = global.window;\n(0, _helpers.mockFetch)();\nglobal.window = Object.create(global.window);\nObject.assign(global.window, {\n  dataLayer: [],\n  URL: {\n    createObjectURL: function createObjectURL() {},\n    revokeObjectURL: function revokeObjectURL() {}\n  }\n});",
              "err": {},
              "uuid": "23954507-8972-4bc5-b29b-4b3e9ca5a6a3",
              "parentUUID": "a4cf3fe0-439d-4273-abb1-98df011711dc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: teardown in \"getEnrollmentData\"",
              "fullTitle": "getEnrollmentData \"after each\" hook: teardown in \"getEnrollmentData\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "global.window = oldWindow;",
              "err": {},
              "uuid": "5408c161-fd1d-4236-8bec-14e85e60b63a",
              "parentUUID": "a4cf3fe0-439d-4273-abb1-98df011711dc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "dispatches GET_ENROLLMENT_DATA_SUCCESS on successful fetch",
              "fullTitle": "getEnrollmentData dispatches GET_ENROLLMENT_DATA_SUCCESS on successful fetch",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONResponse)(global.fetch.onCall(0), successResponse);\nvar thunk = (0, _post911GibStatus.getEnrollmentData)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_constants.GET_ENROLLMENT_DATA_SUCCESS);\n  (0, _chai.expect)(action.data).to.equal(successResponse.data.attributes);\n}).then(done, done);",
              "err": {},
              "uuid": "3f50e5a9-c181-4940-8655-89492335233a",
              "parentUUID": "a4cf3fe0-439d-4273-abb1-98df011711dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dispatches GET_ENROLLMENT_DATA_FAILURE on unspecified failure",
              "fullTitle": "getEnrollmentData dispatches GET_ENROLLMENT_DATA_FAILURE on unspecified failure",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONFailure)(global.fetch.onCall(0), new Error('Unknown error in apiRequest'));\nvar thunk = (0, _post911GibStatus.getEnrollmentData)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_constants.GET_ENROLLMENT_DATA_FAILURE);\n}).then(done, done);",
              "err": {},
              "uuid": "e3383cc1-fa19-4bb7-b30d-a3ac3c41f75f",
              "parentUUID": "a4cf3fe0-439d-4273-abb1-98df011711dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dispatches GET_ENROLLMENT_DATA_FAILURE on unexpected error without code",
              "fullTitle": "getEnrollmentData dispatches GET_ENROLLMENT_DATA_FAILURE on unexpected error without code",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONFailure)(global.fetch.onCall(0), Promise.reject(new Error()));\nvar thunk = (0, _post911GibStatus.getEnrollmentData)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_constants.GET_ENROLLMENT_DATA_FAILURE);\n}).then(done, done);",
              "err": {},
              "uuid": "cc01a74e-90e5-4ee9-9b0b-36c91c829b2b",
              "parentUUID": "a4cf3fe0-439d-4273-abb1-98df011711dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dispatches GET_ENROLLMENT_DATA_FAILURE on unexpected error code",
              "fullTitle": "getEnrollmentData dispatches GET_ENROLLMENT_DATA_FAILURE on unexpected error code",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONFailure)(global.fetch.onCall(0), {\n  errors: [{\n    status: '500'\n  }]\n});\nvar thunk = (0, _post911GibStatus.getEnrollmentData)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_constants.GET_ENROLLMENT_DATA_FAILURE);\n}).then(done, done);",
              "err": {},
              "uuid": "462d7ae8-2f92-46a4-8764-d6c1e3dfa08e",
              "parentUUID": "a4cf3fe0-439d-4273-abb1-98df011711dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dispatches matching error action on known error code",
              "fullTitle": "getEnrollmentData dispatches matching error action on known error code",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONFailure)(global.fetch.onCall(0), {\n  errors: [{\n    status: '503'\n  }]\n});\nvar thunk = (0, _post911GibStatus.getEnrollmentData)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_constants.SERVICE_DOWNTIME_ERROR);\n}).then(done, done);",
              "err": {},
              "uuid": "fecd5138-55a4-4baf-9c61-db1d2dac781c",
              "parentUUID": "a4cf3fe0-439d-4273-abb1-98df011711dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dispatches BACKEND_SERVICE_ERROR on 504 error code",
              "fullTitle": "getEnrollmentData dispatches BACKEND_SERVICE_ERROR on 504 error code",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONFailure)(global.fetch.onCall(0), {\n  errors: [{\n    status: '504'\n  }]\n});\nvar thunk = (0, _post911GibStatus.getEnrollmentData)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_constants.BACKEND_SERVICE_ERROR);\n}).then(done, done);",
              "err": {},
              "uuid": "6153731e-61f3-4295-ae26-7f74343e995f",
              "parentUUID": "a4cf3fe0-439d-4273-abb1-98df011711dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dispatches BACKEND_AUTHENTICATION_ERROR on 403 error code",
              "fullTitle": "getEnrollmentData dispatches BACKEND_AUTHENTICATION_ERROR on 403 error code",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONFailure)(global.fetch.onCall(0), {\n  errors: [{\n    status: '403'\n  }]\n});\nvar thunk = (0, _post911GibStatus.getEnrollmentData)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_constants.BACKEND_AUTHENTICATION_ERROR);\n}).then(done, done);",
              "err": {},
              "uuid": "9a316b8e-fcae-4ab5-8154-f8f1b9267d91",
              "parentUUID": "a4cf3fe0-439d-4273-abb1-98df011711dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dispatches BACKEND_AUTHENTICATION_ERROR on 404 error code",
              "fullTitle": "getEnrollmentData dispatches BACKEND_AUTHENTICATION_ERROR on 404 error code",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONFailure)(global.fetch.onCall(0), {\n  errors: [{\n    status: '404'\n  }]\n});\nvar thunk = (0, _post911GibStatus.getEnrollmentData)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_constants.NO_CHAPTER33_RECORD_AVAILABLE);\n}).then(done, done);",
              "err": {},
              "uuid": "b95acb3e-de90-46dc-b2d4-61cb0b8bbdc2",
              "parentUUID": "a4cf3fe0-439d-4273-abb1-98df011711dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dispatches GET_ENROLLMENT_DATA_FAILURE when no error codes are received",
              "fullTitle": "getEnrollmentData dispatches GET_ENROLLMENT_DATA_FAILURE when no error codes are received",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helpers.setFetchJSONFailure)(global.fetch.onCall(0), {\n  errors: [] // no errors received\n});\nvar thunk = (0, _post911GibStatus.getEnrollmentData)();\nvar dispatch = _sinon.default.spy();\nthunk(dispatch).then(function () {\n  var action = dispatch.firstCall.args[0];\n  (0, _chai.expect)(action.type).to.equal(_constants.GET_ENROLLMENT_DATA_FAILURE);\n}).then(done, done);",
              "err": {},
              "uuid": "e90b61b4-64fe-4ecf-b5c0-2528042a05c8",
              "parentUUID": "a4cf3fe0-439d-4273-abb1-98df011711dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f50e5a9-c181-4940-8655-89492335233a",
            "e3383cc1-fa19-4bb7-b30d-a3ac3c41f75f",
            "cc01a74e-90e5-4ee9-9b0b-36c91c829b2b",
            "462d7ae8-2f92-46a4-8764-d6c1e3dfa08e",
            "fecd5138-55a4-4baf-9c61-db1d2dac781c",
            "6153731e-61f3-4295-ae26-7f74343e995f",
            "9a316b8e-fcae-4ab5-8154-f8f1b9267d91",
            "b95acb3e-de90-46dc-b2d4-61cb0b8bbdc2",
            "e90b61b4-64fe-4ecf-b5c0-2528042a05c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b838bbdf-190f-45ae-a7ca-5172c5f62f24",
          "title": "<EducationWizard>",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/components/EducationWizard.unit.spec.jsx",
          "file": "/src/applications/post-911-gib-status/tests/components/EducationWizard.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should show button and no questions",
              "fullTitle": "<EducationWizard> should show button and no questions",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var dom = document.createElement('div');\n_reactDom.default.render(/*#__PURE__*/_react.default.createElement(_EducationWizard.default, {\n  config: _wizardConfig.default,\n  toggleText: \"Troubleshoot My GI Bill Benefits\"\n}), dom);\n(0, _chai.expect)(dom.querySelector('button')).not.to.be.false;\n(0, _chai.expect)(dom.querySelector('#wizardOptions').className).to.contain('wizard-content-closed');",
              "err": {},
              "uuid": "98f9951c-6b59-4d32-897c-2787016a78a3",
              "parentUUID": "b838bbdf-190f-45ae-a7ca-5172c5f62f24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show button and first question",
              "fullTitle": "<EducationWizard> should show button and first question",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var dom = document.createElement('div');\n_reactDom.default.render(/*#__PURE__*/_react.default.createElement(_EducationWizard.default, {\n  config: _wizardConfig.default,\n  toggleText: \"Troubleshoot My GI Bill Benefits\"\n}), dom).setState({\n  open: true\n});\n(0, _chai.expect)(dom.querySelector('button')).not.to.be.false;\n(0, _chai.expect)(dom.querySelector('#wizardOptions').className).not.to.contain('wizard-content-closed');\n(0, _chai.expect)(dom.querySelector('va-radio')).not.to.be.empty;",
              "err": {},
              "uuid": "67a7b3e1-7d94-4253-b799-02604aa82eed",
              "parentUUID": "b838bbdf-190f-45ae-a7ca-5172c5f62f24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show next relevant question",
              "fullTitle": "<EducationWizard> should show next relevant question",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "9051f176-b41a-49a1-9829-ca978bf65f2d",
              "parentUUID": "b838bbdf-190f-45ae-a7ca-5172c5f62f24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reset after earlier answer changed",
              "fullTitle": "<EducationWizard> should reset after earlier answer changed",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "c6e9a02e-eec2-4dfb-8de4-5932974ec28c",
              "parentUUID": "b838bbdf-190f-45ae-a7ca-5172c5f62f24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display question if previous is an array and isActive is true",
              "fullTitle": "<EducationWizard> should display question if previous is an array and isActive is true",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "48a23756-89cf-4962-9d5e-6155c497d6e4",
              "parentUUID": "b838bbdf-190f-45ae-a7ca-5172c5f62f24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reset choices after a previous question is answered",
              "fullTitle": "<EducationWizard> should reset choices after a previous question is answered",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); });",
              "err": {},
              "uuid": "f97e6908-8f9f-410c-abcb-88277d8c08bc",
              "parentUUID": "b838bbdf-190f-45ae-a7ca-5172c5f62f24",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "98f9951c-6b59-4d32-897c-2787016a78a3",
            "67a7b3e1-7d94-4253-b799-02604aa82eed",
            "9051f176-b41a-49a1-9829-ca978bf65f2d",
            "c6e9a02e-eec2-4dfb-8de4-5932974ec28c",
            "48a23756-89cf-4962-9d5e-6155c497d6e4",
            "f97e6908-8f9f-410c-abcb-88277d8c08bc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 109,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "714f0c00-2e50-4f8c-9bfc-a18de98bcb37",
          "title": "<InfoPair>",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/components/InfoPair.unit.spec.jsx",
          "file": "/src/applications/post-911-gib-status/tests/components/InfoPair.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<InfoPair> should render",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  label: 'Item',\n  value: 3\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_InfoPair.default, props));\nvar vdom = tree.getRenderOutput();\n(0, _chai.expect)(vdom).to.exist;",
              "err": {},
              "uuid": "cb58c5a8-0716-456a-9e2a-e4e3584c588a",
              "parentUUID": "714f0c00-2e50-4f8c-9bfc-a18de98bcb37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show truthy values",
              "fullTitle": "<InfoPair> should show truthy values",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  label: 'Item',\n  value: 3\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_InfoPair.default, props));\n(0, _chai.expect)(tree.subTree('span').text()).to.contain('Item');",
              "err": {},
              "uuid": "57652c35-9b3b-4afb-bffb-fe93adf81cbe",
              "parentUUID": "714f0c00-2e50-4f8c-9bfc-a18de98bcb37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render if value is not passed in",
              "fullTitle": "<InfoPair> should not render if value is not passed in",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  label: 'Item'\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_InfoPair.default, props));\n(0, _chai.expect)(tree.subTree('span')).to.be.false;",
              "err": {},
              "uuid": "c2709654-64cd-4e16-af7b-02281b368e37",
              "parentUUID": "714f0c00-2e50-4f8c-9bfc-a18de98bcb37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not render if value is 0",
              "fullTitle": "<InfoPair> should not render if value is 0",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  label: 'Item',\n  value: 0\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_InfoPair.default, props));\n(0, _chai.expect)(tree.subTree('span')).to.be.false;",
              "err": {},
              "uuid": "d1ae3754-0683-43f4-b742-e9d186763a0b",
              "parentUUID": "714f0c00-2e50-4f8c-9bfc-a18de98bcb37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb58c5a8-0716-456a-9e2a-e4e3584c588a",
            "57652c35-9b3b-4afb-bffb-fe93adf81cbe",
            "c2709654-64cd-4e16-af7b-02281b368e37",
            "d1ae3754-0683-43f4-b742-e9d186763a0b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "91e03059-ce9f-4fd1-856e-ae3f63cf7c43",
          "title": "<UserInfoSection>",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
          "file": "/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<UserInfoSection> should render",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UserInfoSection.default, props));\nvar vdom = tree.getRenderOutput();\n(0, _chai.expect)(vdom).to.not.be.undefined;",
              "err": {},
              "uuid": "a8224f5c-1c94-4874-9d02-a42207fb6b3a",
              "parentUUID": "91e03059-ce9f-4fd1-856e-ae3f63cf7c43",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "38d4a8b4-da3d-42f6-8359-57b732c3c242",
              "title": "showCurrentAsOfAlert is falsey",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "file": "/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should omit the \"current as of\" date",
                  "fullTitle": "<UserInfoSection> showCurrentAsOfAlert is falsey should omit the \"current as of\" date",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var currentAsOfProps = (0, _merge2.default)({}, props, {\n  showCurrentAsOfAlert: false\n});\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UserInfoSection.default, currentAsOfProps));\n(0, _chai.expect)(tree.subTree(currentHeadingSelector)).to.be.false;",
                  "err": {},
                  "uuid": "46ccb211-b578-4a51-b262-153b83f10207",
                  "parentUUID": "38d4a8b4-da3d-42f6-8359-57b732c3c242",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should omit the \"current as of\" date",
                  "fullTitle": "<UserInfoSection> showCurrentAsOfAlert is falsey should omit the \"current as of\" date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UserInfoSection.default, props));\n(0, _chai.expect)(tree.subTree(currentHeadingSelector)).to.be.false;",
                  "err": {},
                  "uuid": "1ff32c54-34c0-4daf-b547-ef1576d74d04",
                  "parentUUID": "38d4a8b4-da3d-42f6-8359-57b732c3c242",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46ccb211-b578-4a51-b262-153b83f10207",
                "1ff32c54-34c0-4daf-b547-ef1576d74d04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b1b87e75-bd18-463a-9355-4f8b270be982",
              "title": "showCurrentAsOfAlert is truthy",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "file": "/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the \"current as of\" date",
                  "fullTitle": "<UserInfoSection> showCurrentAsOfAlert is truthy should display the \"current as of\" date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var currentAsOfProps = (0, _merge2.default)({}, props, {\n  showCurrentAsOfAlert: true\n});\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UserInfoSection.default, currentAsOfProps));\n(0, _chai.expect)(tree.subTree(currentHeadingSelector)).to.not.be.false;",
                  "err": {},
                  "uuid": "4da06ea2-b704-439e-91ed-1d2ec14c35f3",
                  "parentUUID": "b1b87e75-bd18-463a-9355-4f8b270be982",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4da06ea2-b704-439e-91ed-1d2ec14c35f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "81b293ab-1ec0-43cc-87a4-95ac4eff9e8c",
              "title": "veteran eligibility",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "file": "/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should show benefit information if eligible",
                  "fullTitle": "<UserInfoSection> veteran eligibility should show benefit information if eligible",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UserInfoSection.default, props));\nvar benefitLevel = tree.subTree('#benefit-level');\n(0, _chai.expect)(benefitLevel).to.not.be.false;",
                  "err": {},
                  "uuid": "b9f3a7b5-1710-4c82-9a30-29af7986a7ec",
                  "parentUUID": "81b293ab-1ec0-43cc-87a4-95ac4eff9e8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show not qualified message if not eligible",
                  "fullTitle": "<UserInfoSection> veteran eligibility should show not qualified message if not eligible",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var newProps = {\n  enrollmentData: {\n    veteranIsEligible: false,\n    dateOfBirth: '1995-11-12T06:00:00.000+0000',\n    originalEntitlement: {},\n    usedEntitlement: {},\n    remainingEntitlement: {},\n    enrollments: []\n  }\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UserInfoSection.default, newProps));\nvar benefitLevel = tree.subTree('#benefit-level');\n(0, _chai.expect)(benefitLevel).to.be.false;\nvar notQualifiedMessage = tree.subTree('.not-qualified');\n(0, _chai.expect)(notQualifiedMessage.text()).to.contain(\"You don't qualify\");",
                  "err": {},
                  "uuid": "1ab340c9-b916-4b52-907e-6635670635bb",
                  "parentUUID": "81b293ab-1ec0-43cc-87a4-95ac4eff9e8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9f3a7b5-1710-4c82-9a30-29af7986a7ec",
                "1ab340c9-b916-4b52-907e-6635670635bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "64e0f31a-f1f7-4745-9b10-077f971e8367",
              "title": "percentageBenefit is not provided",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "file": "/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display \"unavailable\"",
                  "fullTitle": "<UserInfoSection> percentageBenefit is not provided should display \"unavailable\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UserInfoSection.default, props));\nvar benefitLevel = tree.subTree('#benefit-level');\n(0, _chai.expect)(benefitLevel).to.not.be.false;\n(0, _chai.expect)(benefitLevel.text()).to.contain('unavailable');",
                  "err": {},
                  "uuid": "7e0ff87a-44eb-426d-bb7f-d53f0f815095",
                  "parentUUID": "64e0f31a-f1f7-4745-9b10-077f971e8367",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e0ff87a-44eb-426d-bb7f-d53f0f815095"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "51a8b9cc-51d3-4d08-8141-e2d8ca8f5e37",
              "title": "should display delimitingDate",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "file": "/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the delimiting date",
                  "fullTitle": "<UserInfoSection> should display delimitingDate should display the delimiting date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UserInfoSection.default, props));\nvar benefitEndDate = tree.subTree('.benefit-end-date');\n(0, _chai.expect)(benefitEndDate).to.not.be.false;\n(0, _chai.expect)(benefitEndDate.text()).to.contain('You have until');",
                  "err": {},
                  "uuid": "9971fe28-8c0f-48e8-ac10-d588a694ed3e",
                  "parentUUID": "51a8b9cc-51d3-4d08-8141-e2d8ca8f5e37",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not display the delimiting date if active duty",
                  "fullTitle": "<UserInfoSection> should display delimitingDate should not display the delimiting date if active duty",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var newProps = {\n  enrollmentData: {\n    veteranIsEligible: true,\n    dateOfBirth: '1995-11-12T06:00:00.000+0000',\n    activeDuty: true,\n    originalEntitlement: {},\n    usedEntitlement: {},\n    remainingEntitlement: {},\n    enrollments: []\n  }\n};\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UserInfoSection.default, newProps));\nvar benefitEndDate = tree.subTree('.benefit-end-date');\n(0, _chai.expect)(benefitEndDate).to.not.be.false;\n(0, _chai.expect)(benefitEndDate.text()).to.contain('Since you’re on active duty');",
                  "err": {},
                  "uuid": "b9be38ad-1a2c-4d0b-b4cd-d08db86388ec",
                  "parentUUID": "51a8b9cc-51d3-4d08-8141-e2d8ca8f5e37",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9971fe28-8c0f-48e8-ac10-d588a694ed3e",
                "b9be38ad-1a2c-4d0b-b4cd-d08db86388ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "838b982e-8892-4abd-bab6-db8c41716205",
              "title": "date of birth InfoPair",
              "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "file": "/src/applications/post-911-gib-status/tests/components/UserInfoSection.unit.spec.jsx",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the formatted date of birth if present",
                  "fullTitle": "<UserInfoSection> date of birth InfoPair should display the formatted date of birth if present",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UserInfoSection.default, props));\nvar dobInfoPair = tree.everySubTree('InfoPair').find(function (pair) {\n  return pair.props.label === 'Date of birth';\n});\n(0, _chai.expect)(dobInfoPair).to.exist;\n(0, _chai.expect)(dobInfoPair.props.value).to.equal('November 12, 1995');",
                  "err": {},
                  "uuid": "a53f81e9-bde3-4523-a856-416142602e3e",
                  "parentUUID": "838b982e-8892-4abd-bab6-db8c41716205",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should display \"Unavailable\" if dateOfBirth is missing",
                  "fullTitle": "<UserInfoSection> date of birth InfoPair should display \"Unavailable\" if dateOfBirth is missing",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a copy of props but remove dateOfBirth\nvar noDobProps = (0, _merge2.default)({}, props, {\n  enrollmentData: {\n    dateOfBirth: null\n  }\n});\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_UserInfoSection.default, noDobProps));\nvar dobInfoPair = tree.everySubTree('InfoPair').find(function (pair) {\n  return pair.props.label === 'Date of birth';\n});\n(0, _chai.expect)(dobInfoPair).to.exist;\n(0, _chai.expect)(dobInfoPair.props.value).to.equal('Unavailable');",
                  "err": {},
                  "uuid": "380d07b6-0e58-48b8-815b-97893b7e07d1",
                  "parentUUID": "838b982e-8892-4abd-bab6-db8c41716205",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a53f81e9-bde3-4523-a856-416142602e3e",
                "380d07b6-0e58-48b8-815b-97893b7e07d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "a8224f5c-1c94-4874-9d02-a42207fb6b3a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "bff62d00-14a6-423b-a9fc-762067ab2772",
          "title": "Main",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/containers/Main.unit.spec.jsx",
          "file": "/src/applications/post-911-gib-status/tests/containers/Main.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "Main should render",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_Main.Main, defaultProps));\nvar vdom = tree.getRenderOutput();\n(0, _chai.expect)(vdom).to.not.be.undefined;",
              "err": {},
              "uuid": "f68c3c15-901b-4362-9193-e7a6f0129b3f",
              "parentUUID": "bff62d00-14a6-423b-a9fc-762067ab2772",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call getEnrollmentData in componentDidMount",
              "fullTitle": "Main should call getEnrollmentData in componentDidMount",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  getEnrollmentData: _sinon.default.spy(),\n  apiVersion: 'some-api-version'\n};\nvar wrapper = (0, _enzyme.mount)(/*#__PURE__*/_react.default.createElement(_Main.Main, props));\nwrapper.instance().componentDidMount();\n(0, _chai.expect)(props.getEnrollmentData.calledWith(props.apiVersion)).to.be.true;\nwrapper.unmount();",
              "err": {},
              "uuid": "43659d25-3474-4dd8-aff6-8c04b1b6eb54",
              "parentUUID": "bff62d00-14a6-423b-a9fc-762067ab2772",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show data when service is available",
              "fullTitle": "Main should show data when service is available",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\nconst props = _.merge({}, defaultProps,\n                      { enrollmentData: { firstName: 'Joe' } });\nconst tree = SkinDeep.shallowRender(<Main {...props}/>);\n// TODO: why is StatusPage not found\nexpect(tree.dive(['div', 'StatusPage'])).to.be.ok;\n*/",
              "err": {},
              "uuid": "58bceb6d-e1c2-4669-8bf7-90eba2b5948e",
              "parentUUID": "bff62d00-14a6-423b-a9fc-762067ab2772",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show loading spinner when waiting for response",
              "fullTitle": "Main should show loading spinner when waiting for response",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _merge2.default)({}, defaultProps, {\n  availability: 'awaitingResponse'\n});\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_Main.Main, props));\n(0, _chai.expect)(tree.subTree('va-loading-indicator')).to.be.ok;",
              "err": {},
              "uuid": "8e69bfbd-b291-485e-89df-0a9e0d1c30eb",
              "parentUUID": "bff62d00-14a6-423b-a9fc-762067ab2772",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show system down message for backend service error",
              "fullTitle": "Main should show system down message for backend service error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _merge2.default)({}, defaultProps, {\n  availability: 'backendServiceError'\n});\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_Main.Main, props));\n(0, _chai.expect)(tree.subTree('#backendErrorMessage')).to.be.ok;",
              "err": {},
              "uuid": "8d4eee76-acdd-41f5-84f9-1f9059c72f5a",
              "parentUUID": "bff62d00-14a6-423b-a9fc-762067ab2772",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show backend authentication error",
              "fullTitle": "Main should show backend authentication error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _merge2.default)({}, defaultProps, {\n  availability: 'backendAuthenticationError'\n});\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_Main.Main, props));\n(0, _chai.expect)(tree.subTree('#authenticationErrorMessage')).to.be.ok;",
              "err": {},
              "uuid": "07c8b970-bef7-4cdc-845c-79d31bfa9901",
              "parentUUID": "bff62d00-14a6-423b-a9fc-762067ab2772",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show generic error message for service downtime",
              "fullTitle": "Main should show generic error message for service downtime",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _merge2.default)({}, defaultProps, {\n  availability: 'serviceDowntimeError'\n});\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_Main.Main, props));\n(0, _chai.expect)(tree.subTree('#appContent')).to.be.ok;",
              "err": {},
              "uuid": "1ca3a9d3-1a53-468f-9caf-51a1a9eea627",
              "parentUUID": "bff62d00-14a6-423b-a9fc-762067ab2772",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show generic error message for unknown availability",
              "fullTitle": "Main should show generic error message for unknown availability",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _merge2.default)({}, defaultProps, {\n  availability: 'unknown'\n});\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_Main.Main, props));\n(0, _chai.expect)(tree.subTree('#appContent')).to.be.ok;",
              "err": {},
              "uuid": "a77da04b-15e3-40a6-9fc2-26ae56f7c405",
              "parentUUID": "bff62d00-14a6-423b-a9fc-762067ab2772",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the authentication warning when record not found",
              "fullTitle": "Main should show the authentication warning when record not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _merge2.default)({}, defaultProps, {\n  availability: 'noChapter33Record'\n});\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_Main.Main, props));\n(0, _chai.expect)(tree.subTree('#authenticationErrorMessage')).to.be.ok;",
              "err": {},
              "uuid": "06ed13a3-fb40-4a5a-b0a3-d08688dbba98",
              "parentUUID": "bff62d00-14a6-423b-a9fc-762067ab2772",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show system down message when fetching enrollment data fails",
              "fullTitle": "Main should show system down message when fetching enrollment data fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = (0, _merge2.default)({}, defaultProps, {\n  availability: 'getEnrollmentDataFailure'\n});\nvar tree = _skinDeep.default.shallowRender(/*#__PURE__*/_react.default.createElement(_Main.Main, props));\n(0, _chai.expect)(tree.subTree('#backendErrorMessage')).to.be.ok;",
              "err": {},
              "uuid": "d9749477-3801-4b19-8e1e-53f895de9e0b",
              "parentUUID": "bff62d00-14a6-423b-a9fc-762067ab2772",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f68c3c15-901b-4362-9193-e7a6f0129b3f",
            "43659d25-3474-4dd8-aff6-8c04b1b6eb54",
            "58bceb6d-e1c2-4669-8bf7-90eba2b5948e",
            "8e69bfbd-b291-485e-89df-0a9e0d1c30eb",
            "8d4eee76-acdd-41f5-84f9-1f9059c72f5a",
            "07c8b970-bef7-4cdc-845c-79d31bfa9901",
            "1ca3a9d3-1a53-468f-9caf-51a1a9eea627",
            "a77da04b-15e3-40a6-9fc2-26ae56f7c405",
            "06ed13a3-fb40-4a5a-b0a3-d08688dbba98",
            "d9749477-3801-4b19-8e1e-53f895de9e0b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b350b6e1-92f9-4a5b-9e52-93dabfad4f53",
          "title": "<Post911GIBStatusApp>",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/containers/Post911GIBStatusApp.unit.spec.jsx",
          "file": "/src/applications/post-911-gib-status/tests/containers/Post911GIBStatusApp.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<Post911GIBStatusApp> should render",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var tree = (0, _enzyme.mount)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: store\n}, /*#__PURE__*/_react.default.createElement(_Post911GIBStatusApp.default, null)));\nvar vdom = tree.html();\n(0, _chai.expect)(vdom).to.not.be.undefined;\ntree.unmount();",
              "err": {},
              "uuid": "336e33ca-ea2a-4bd7-9a8a-0bd947577db8",
              "parentUUID": "b350b6e1-92f9-4a5b-9e52-93dabfad4f53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "336e33ca-ea2a-4bd7-9a8a-0bd947577db8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e130597e-f974-4bde-9eb6-b04bb38be34b",
          "title": "<PrintPage/>",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/containers/PrintPage.unit.spec.jsx",
          "file": "/src/applications/post-911-gib-status/tests/containers/PrintPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"<PrintPage/>\"",
              "fullTitle": "<PrintPage/> \"after each\" hook in \"<PrintPage/>\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return pushSpy.reset();",
              "err": {},
              "uuid": "e34f22b2-2f88-4c78-a688-15e4f7b3d6af",
              "parentUUID": "e130597e-f974-4bde-9eb6-b04bb38be34b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<PrintPage/> should render",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Not necessary if not componentWillUnmount\n// eslint-disable-next-line @department-of-veterans-affairs/enzyme-unmount\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_PrintPage.PrintPage, defaultProps), {\n  disableLifecycleMethods: true\n});\n(0, _chai.expect)(wrapper.type()).to.equal('div');",
              "err": {},
              "uuid": "7c85808c-7407-4645-929a-c402d6db0046",
              "parentUUID": "e130597e-f974-4bde-9eb6-b04bb38be34b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "renders a UserInfoSection child",
              "fullTitle": "<PrintPage/> renders a UserInfoSection child",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Not necessary if not componentWillUnmount\n// eslint-disable-next-line @department-of-veterans-affairs/enzyme-unmount\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_PrintPage.PrintPage, defaultProps), {\n  disableLifecycleMethods: true\n});\n(0, _chai.expect)(wrapper.find('UserInfoSection').length).to.equal(1);",
              "err": {},
              "uuid": "62c56156-1266-47a0-ad5b-34934ce5f9f1",
              "parentUUID": "e130597e-f974-4bde-9eb6-b04bb38be34b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a print button",
              "fullTitle": "<PrintPage/> should render a print button",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Not necessary if not componentWillUnmount\n// eslint-disable-next-line @department-of-veterans-affairs/enzyme-unmount\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_PrintPage.PrintPage, defaultProps), {\n  disableLifecycleMethods: true\n});\nvar printButton = wrapper.find('.usa-button-primary');\n(0, _chai.expect)(printButton.length).to.equal(1);",
              "err": {},
              "uuid": "3a6b901c-d93c-40a6-976e-dc80ab09c0e5",
              "parentUUID": "e130597e-f974-4bde-9eb6-b04bb38be34b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render a back to statement button",
              "fullTitle": "<PrintPage/> should render a back to statement button",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Not necessary if not componentWillUnmount\n// eslint-disable-next-line @department-of-veterans-affairs/enzyme-unmount\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_PrintPage.PrintPage, defaultProps), {\n  disableLifecycleMethods: true\n});\nvar backButton = wrapper.find('.usa-button-secondary');\n(0, _chai.expect)(backButton.length).to.equal(1);",
              "err": {},
              "uuid": "ffa6da02-51da-4e28-bed3-ccef95fd395a",
              "parentUUID": "e130597e-f974-4bde-9eb6-b04bb38be34b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fire a print request when print button clicked",
              "fullTitle": "<PrintPage/> should fire a print request when print button clicked",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var oldPrint = global.window.print;\nvar printSpy = _sinon.default.spy();\nglobal.window.print = printSpy;\n// Not necessary if not componentWillUnmount\n// eslint-disable-next-line @department-of-veterans-affairs/enzyme-unmount\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_PrintPage.PrintPage, defaultProps), {\n  disableLifecycleMethods: true\n});\nvar printButton = wrapper.find('.usa-button-primary');\n(0, _chai.expect)(printSpy.notCalled).to.be.true;\nprintButton.simulate('click');\n(0, _chai.expect)(printSpy.calledOnce).to.be.true;\nglobal.window.print = oldPrint;",
              "err": {},
              "uuid": "fa55ed5e-a947-4281-97a2-0d6c443772fd",
              "parentUUID": "e130597e-f974-4bde-9eb6-b04bb38be34b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should navigate to statement when back to statement button clicked",
              "fullTitle": "<PrintPage/> should navigate to statement when back to statement button clicked",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Not necessary if not componentWillUnmount\n// eslint-disable-next-line @department-of-veterans-affairs/enzyme-unmount\nvar wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_PrintPage.PrintPage, defaultProps), {\n  disableLifecycleMethods: true\n});\nvar backButton = wrapper.find('.usa-button-secondary');\n(0, _chai.expect)(pushSpy.notCalled).to.be.true;\nbackButton.simulate('click');\n(0, _chai.expect)(pushSpy.calledOnce).to.be.true;",
              "err": {},
              "uuid": "4a265fcb-be60-4712-8945-40c4fb284d03",
              "parentUUID": "e130597e-f974-4bde-9eb6-b04bb38be34b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c85808c-7407-4645-929a-c402d6db0046",
            "62c56156-1266-47a0-ad5b-34934ce5f9f1",
            "3a6b901c-d93c-40a6-976e-dc80ab09c0e5",
            "ffa6da02-51da-4e28-bed3-ccef95fd395a",
            "fa55ed5e-a947-4281-97a2-0d6c443772fd",
            "4a265fcb-be60-4712-8945-40c4fb284d03"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "5004481c-4f6c-4d69-9ded-cd1caa410557",
          "title": "<ServiceAvailabilityBanner />",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/containers/ServiceAvailabilityBanner.unit.spec.jsx",
          "file": "/src/applications/post-911-gib-status/tests/containers/ServiceAvailabilityBanner.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render the CallToActionWidget with the appId \"gi-bill-benefits\"",
              "fullTitle": "<ServiceAvailabilityBanner /> should render the CallToActionWidget with the appId \"gi-bill-benefits\"",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_ServiceAvailabilityBanner.default, null));\nvar callToActionWidget = wrapper.find(_ctaWidget.default);\n(0, _chai.expect)(callToActionWidget).to.have.lengthOf(1);\n(0, _chai.expect)(callToActionWidget.prop('appId')).to.equal('gi-bill-benefits');\nwrapper.unmount();",
              "err": {},
              "uuid": "afdb46cc-5a09-473d-855e-789855c34d46",
              "parentUUID": "5004481c-4f6c-4d69-9ded-cd1caa410557",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "afdb46cc-5a09-473d-855e-789855c34d46"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c121adf3-a6ed-47be-81dc-1cf9a6085164",
          "title": "<StatusPage>",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/containers/StatusPage.unit.spec.jsx",
          "file": "/src/applications/post-911-gib-status/tests/containers/StatusPage.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render",
              "fullTitle": "<StatusPage> should render",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var tree = (0, _enzyme.mount)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: store\n}, /*#__PURE__*/_react.default.createElement(_StatusPage.default, defaultProps)));\nvar vdom = tree.html();\n(0, _chai.expect)(vdom).to.exist;\ntree.unmount();",
              "err": {},
              "uuid": "5d451ba7-224c-4aaf-b940-2f30b9307041",
              "parentUUID": "c121adf3-a6ed-47be-81dc-1cf9a6085164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show title and print button",
              "fullTitle": "<StatusPage> should show title and print button",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "window.dataLayer = [];\nvar tree = (0, _enzyme.mount)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: store\n}, /*#__PURE__*/_react.default.createElement(_StatusPage.default, defaultProps)));\n(0, _chai.expect)(tree.find('h1').text()).to.equal('Check your remaining Post-9/11 GI Bill benefits');\n(0, _chai.expect)(tree.find({\n  text: 'Get printable statement of benefits'\n}).exists());\ntree.unmount();",
              "err": {},
              "uuid": "bb2e331d-103c-4ea8-9657-7c7fcf07239c",
              "parentUUID": "c121adf3-a6ed-47be-81dc-1cf9a6085164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not show intro and print button if veteran is not eligible",
              "fullTitle": "<StatusPage> should not show intro and print button if veteran is not eligible",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var props = {\n  enrollmentData: {\n    veteranIsEligible: false,\n    dateOfBirth: '1995-11-12T06:00:00.000+0000',\n    originalEntitlement: {},\n    usedEntitlement: {},\n    remainingEntitlement: {}\n  }\n};\nvar tree = (0, _enzyme.shallow)(/*#__PURE__*/_react.default.createElement(_StatusPage.default, _extends({\n  store: store\n}, props)));\n(0, _chai.expect)(tree.find('.va-introtext').exists()).to.be.false;\n(0, _chai.expect)(tree.find('.usa-button-primary').exists()).to.be.false;\ntree.unmount();",
              "err": {},
              "uuid": "23127bdd-40fb-49cc-a857-ebf48695f554",
              "parentUUID": "c121adf3-a6ed-47be-81dc-1cf9a6085164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should navigate to print page when print button is clicked",
              "fullTitle": "<StatusPage> should navigate to print page when print button is clicked",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mockRouter = {\n  push: _sinon.default.spy()\n};\nvar props = _objectSpread(_objectSpread({}, defaultProps), {}, {\n  router: mockRouter\n});\nvar tree = (0, _enzyme.mount)(/*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {\n  store: store\n}, /*#__PURE__*/_react.default.createElement(_StatusPage.default, props)));\nvar printButton = tree.find('#print-button').at(0);\nprintButton.simulate('click');\n(0, _chai.expect)(mockRouter.push.calledOnce).to.be.true;\n(0, _chai.expect)(mockRouter.push.calledWithExactly('/print')).to.be.true;\ntree.unmount();",
              "err": {},
              "uuid": "81700feb-ff41-4f5e-96e8-5b41b3f6f7e2",
              "parentUUID": "c121adf3-a6ed-47be-81dc-1cf9a6085164",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d451ba7-224c-4aaf-b940-2f30b9307041",
            "bb2e331d-103c-4ea8-9657-7c7fcf07239c",
            "23127bdd-40fb-49cc-a857-ebf48695f554",
            "81700feb-ff41-4f5e-96e8-5b41b3f6f7e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0684e618-0026-4ad0-8b2d-14bb9f1119c2",
          "title": "post911GIBStatus reducer",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/reducers/index.unit.spec.js",
          "file": "/src/applications/post-911-gib-status/tests/reducers/index.unit.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should handle a successful request for enrollment information",
              "fullTitle": "post911GIBStatus reducer should handle a successful request for enrollment information",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = _reducers.default.post911GIBStatus(initialState, {\n  type: 'GET_ENROLLMENT_DATA_SUCCESS',\n  data: {\n    firstName: 'Jane',\n    lastName: 'Austen',\n    dateOfBirth: '9/1/1980',\n    vaFileNumber: '111223333'\n  }\n});\n(0, _chai.expect)(state.enrollmentData.firstName).to.equal('Jane');\n(0, _chai.expect)(state.availability).to.equal('available');",
              "err": {},
              "uuid": "d3ddb24e-7a57-4e88-8d65-89277ba82dfa",
              "parentUUID": "0684e618-0026-4ad0-8b2d-14bb9f1119c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle backend service error",
              "fullTitle": "post911GIBStatus reducer should handle backend service error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = _reducers.default.post911GIBStatus(initialState, {\n  type: 'BACKEND_SERVICE_ERROR'\n});\n(0, _chai.expect)(state.enrollmentData).to.be.null;\n(0, _chai.expect)(state.availability).to.equal('backendServiceError');",
              "err": {},
              "uuid": "e634bffe-5265-452f-968b-519608f3a159",
              "parentUUID": "0684e618-0026-4ad0-8b2d-14bb9f1119c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle backend authentication error",
              "fullTitle": "post911GIBStatus reducer should handle backend authentication error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = _reducers.default.post911GIBStatus(initialState, {\n  type: 'BACKEND_AUTHENTICATION_ERROR'\n});\n(0, _chai.expect)(state.enrollmentData).to.be.null;\n(0, _chai.expect)(state.availability).to.equal('backendAuthenticationError');",
              "err": {},
              "uuid": "154e08a7-ee5a-460e-a773-af897f6117b1",
              "parentUUID": "0684e618-0026-4ad0-8b2d-14bb9f1119c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle no Chapter 33 record error",
              "fullTitle": "post911GIBStatus reducer should handle no Chapter 33 record error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = _reducers.default.post911GIBStatus(initialState, {\n  type: 'NO_CHAPTER33_RECORD_AVAILABLE'\n});\n(0, _chai.expect)(state.enrollmentData).to.be.null;\n(0, _chai.expect)(state.availability).to.equal('noChapter33Record');",
              "err": {},
              "uuid": "39e25a5a-9829-46c6-a8cf-a70463088011",
              "parentUUID": "0684e618-0026-4ad0-8b2d-14bb9f1119c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle failure to fetch enrollment information",
              "fullTitle": "post911GIBStatus reducer should handle failure to fetch enrollment information",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = _reducers.default.post911GIBStatus(initialState, {\n  type: 'GET_ENROLLMENT_DATA_FAILURE'\n});\n(0, _chai.expect)(state.enrollmentData).to.be.null;\n(0, _chai.expect)(state.availability).to.equal('getEnrollmentDataFailure');",
              "err": {},
              "uuid": "38576233-85ae-4e5c-a5dc-a58ac890e206",
              "parentUUID": "0684e618-0026-4ad0-8b2d-14bb9f1119c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle service downtime error",
              "fullTitle": "post911GIBStatus reducer should handle service downtime error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var state = _reducers.default.post911GIBStatus(initialState, {\n  type: 'SERVICE_DOWNTIME_ERROR'\n});\n(0, _chai.expect)(state.enrollmentData).to.be.null;\n(0, _chai.expect)(state.availability).to.equal('serviceDowntimeError');",
              "err": {},
              "uuid": "9625f9d8-010d-4ab1-8b74-cd4d06f1370b",
              "parentUUID": "0684e618-0026-4ad0-8b2d-14bb9f1119c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3ddb24e-7a57-4e88-8d65-89277ba82dfa",
            "e634bffe-5265-452f-968b-519608f3a159",
            "154e08a7-ee5a-460e-a773-af897f6117b1",
            "39e25a5a-9829-46c6-a8cf-a70463088011",
            "38576233-85ae-4e5c-a5dc-a58ac890e206",
            "9625f9d8-010d-4ab1-8b74-cd4d06f1370b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "5515b980-8484-42f5-a028-2a65d0fde6c6",
          "title": "helpers",
          "fullFile": "/Users/jacobpenner/repos/ad_hoc/va/vets-website/src/applications/post-911-gib-status/tests/utils/helpers.unit.spec.jsx",
          "file": "/src/applications/post-911-gib-status/tests/utils/helpers.unit.spec.jsx",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return valid formatted percentage",
              "fullTitle": "helpers should return valid formatted percentage",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _chai.expect)((0, _helpers.formatPercent)(75)).to.equal('75%');\n(0, _chai.expect)((0, _helpers.formatPercent)('100')).to.equal('100%');\n(0, _chai.expect)((0, _helpers.formatPercent)(undefined)).to.be.undefined;",
              "err": {},
              "uuid": "588b5aa2-8be6-4921-a60b-4db1a2d6124e",
              "parentUUID": "5515b980-8484-42f5-a028-2a65d0fde6c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should mask VA file number correctly",
              "fullTitle": "helpers should mask VA file number correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _chai.expect)((0, _helpers.formatVAFileNumber)('123456789')).to.equal('xxxxx-6789');\n(0, _chai.expect)((0, _helpers.formatVAFileNumber)(null)).to.equal('-');\n(0, _chai.expect)((0, _helpers.formatVAFileNumber)('')).to.equal('-');",
              "err": {},
              "uuid": "ea0a2edb-aa7e-4d84-a561-260d90f92f06",
              "parentUUID": "5515b980-8484-42f5-a028-2a65d0fde6c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should format month and day fields",
              "fullTitle": "helpers should format month and day fields",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var field = {\n  months: 2,\n  days: 5\n};\n(0, _chai.expect)((0, _helpers.formatMonthDayFields)(field)).to.equal('2 months, 5 days');\n(0, _chai.expect)((0, _helpers.formatMonthDayFields)({\n  months: 1,\n  days: 1\n})).to.equal('1 month, 1 day');\n(0, _chai.expect)((0, _helpers.formatMonthDayFields)(null)).to.equal('unavailable');\n(0, _chai.expect)((0, _helpers.formatMonthDayFields)(undefined)).to.equal('unavailable');",
              "err": {},
              "uuid": "49270965-55ba-4e90-b0ee-925ea07cefc8",
              "parentUUID": "5515b980-8484-42f5-a028-2a65d0fde6c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct explanation for benefit end date",
              "fullTitle": "helpers should return the correct explanation for benefit end date",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var delimitingDate = '2024-12-31';\n(0, _chai.expect)((0, _helpers.benefitEndDateExplanation)('remainingEntitlement', delimitingDate)).not.to.be.undefined;\n(0, _chai.expect)((0, _helpers.benefitEndDateExplanation)('activeDuty')).not.to.be.undefined;\n(0, _chai.expect)((0, _helpers.benefitEndDateExplanation)('unknown')).to.be.undefined;",
              "err": {},
              "uuid": "a513a588-01d9-454d-8e5b-487a5eb9c56a",
              "parentUUID": "5515b980-8484-42f5-a028-2a65d0fde6c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct explanation for active duty",
              "fullTitle": "helpers should return correct explanation for active duty",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrapper = (0, _enzyme.shallow)((0, _helpers.benefitEndDateExplanation)('activeDuty'));\n(0, _chai.expect)(wrapper.find('h4').text()).to.equal('Benefit end date');\n(0, _chai.expect)(wrapper.find('div').at(1).text()).to.equal('Since you’re on active duty, your benefits don’t yet have an expiration date.');\nwrapper.unmount();",
              "err": {},
              "uuid": "0ff4ab12-900c-42c1-ae5f-8c8909be142e",
              "parentUUID": "5515b980-8484-42f5-a028-2a65d0fde6c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct explanation for remaining entitlement with an invalid date",
              "fullTitle": "helpers should return correct explanation for remaining entitlement with an invalid date",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidDate = 'invalid-date';\nvar wrapper = (0, _enzyme.shallow)((0, _helpers.benefitEndDateExplanation)('remainingEntitlement', invalidDate));\n(0, _chai.expect)(wrapper.find('h4').text()).to.equal('Benefit end date');\n(0, _chai.expect)(wrapper.find('div').at(1).text()).to.equal('There’s no time limit to use these education benefits.');\nwrapper.unmount();",
              "err": {},
              "uuid": "803d98bc-3164-4554-a1bb-110538eeef2e",
              "parentUUID": "5515b980-8484-42f5-a028-2a65d0fde6c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return undefined for unknown condition",
              "fullTitle": "helpers should return undefined for unknown condition",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = (0, _helpers.benefitEndDateExplanation)('unknown');\n(0, _chai.expect)(result).to.be.undefined;",
              "err": {},
              "uuid": "01e0af9a-6c78-4013-84f3-023b16fb145b",
              "parentUUID": "5515b980-8484-42f5-a028-2a65d0fde6c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return not qualified warning component",
              "fullTitle": "helpers should return not qualified warning component",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _chai.expect)((0, _helpers.notQualifiedWarning)()).not.to.be.undefined;",
              "err": {},
              "uuid": "b05f4152-d549-4b43-bccb-23497cb89d19",
              "parentUUID": "5515b980-8484-42f5-a028-2a65d0fde6c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "588b5aa2-8be6-4921-a60b-4db1a2d6124e",
            "ea0a2edb-aa7e-4d84-a561-260d90f92f06",
            "49270965-55ba-4e90-b0ee-925ea07cefc8",
            "a513a588-01d9-454d-8e5b-487a5eb9c56a",
            "0ff4ab12-900c-42c1-ae5f-8c8909be142e",
            "803d98bc-3164-4554-a1bb-110538eeef2e",
            "01e0af9a-6c78-4013-84f3-023b16fb145b",
            "b05f4152-d549-4b43-bccb-23497cb89d19"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "undefined_2025-03-03T221506957Z",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "min",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "consoleReporter": "min",
        "reportDir": "mocha/results",
        "reportFilename": "undefined_2025-03-03T221506957Z",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}