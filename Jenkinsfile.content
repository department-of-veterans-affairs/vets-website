@Library('va.gov-devops-jenkins-lib') _

// NOTE this job is expected to run in two contexts:
//
// 1. This job will be triggered by the vets-website production
// release pipeline also known as the daily auto-deploy
// http://jenkins.vfs.va.gov/job/deploys/job/vets-gov-autodeploy-vets-website/
// When run in this context the ref parameter will be populated with
// the ref of the latest release.
//
// 2. This job will be triggered by the CMS (va-cms-bot) in order to
// run a content build and deploy to dev or staging. In this context
// the ref parameter will not be provided and this job will retrieve
// the latest commit SHA from the master branch and wait for a valid
// commit status indicated that it has been deployed and can therefore
// be rebuilt and deployed by this job.
//
// Under no circumstances should this job trigger a production
// deployment. At this point in time all deployments to production
// should be handled through the daily deploy job referenced above.

node('vetsgov-general-purpose') {
  refStatusState = ""
  ref = params.ref
  if (ref == "") {
    ref = getLatestGitRef("vets-website", branch: "master")
  }

  def jobFailed = false
  def refStatusState
  while({
    echo "checking build status..."
    refStatusState = getGithubCommitState("vets-website", ref)
    if ("${refStatusState}" == "SUCCESS") {
      return false
    } else if ("${refStatusState}" == "PENDING") {
      sleep 60
      return true
    }
    jobFailed = true
    return false
  }()) continue

  if (jobFailed) {
    message = "Web content refresh on ${params.env} aborted due to '${refStatusState}' status on vets-website commit ${ref}."
    echo "${message}"
    slackSend(message: "${message}",
              color: "warning",
              channel: "cms-notifications")

    currentBuild.result = 'FAILURE'
    return
  }

  dir("vets-website") {
    checkout scm: [$class: 'GitSCM', branches: [[name: ref]], userRemoteConfigs: [[credentialsId: 'va-bot', url: 'git@github.com:department-of-veterans-affairs/vets-website.git']]]
  }

  def commonStages = load "vets-website/jenkins/common.groovy"

  // Setup stage
  dockerContainer = commonStages.setup()

  stage("Build") {
    commonStages.build(ref, dockerContainer, ref, params.env, false, true)
  }

  stage("Prearchive") {
    commonStages.prearchive(dockerContainer, params.env)
  }

  stage("Archive") {
    commonStages.archive(dockerContainer, ref, params.env)
  }

  stage("Deploy Dev or Staging") {
    if (params.env != "vagovprod" && params.deploy) {
      commonStages.runDeploy("deploys/vets-website-${params.env}", ref, true)
      message = "Web content refresh in ${params.env} completed."
      echo "${message}"
      slackSend(message: "${message}",
                color: "good",
                channel: "cms-notifications")
    }
  }
}
